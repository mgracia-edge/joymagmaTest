{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/javascript/module_nx_studio.js","webpack:///./public/javascript/service_nx_api.js","webpack:///./public/javascript/service_nx_dialogs.js","webpack:///./public/javascript/service_nx_nav_panel_and_main_bar.js","webpack:///./public/javascript/controller_home.js","webpack:///./public/javascript/controller_login.js","webpack:///./public/javascript/controller_main.js","webpack:///./public/javascript/controller_s_account_settings.js","webpack:///./public/javascript/controller_s_account_settings_user.js","webpack:///./public/javascript/controller_s_account_settings_users.js","webpack:///./public/javascript/controller_s_n_a.js","webpack:///./public/javascript/controller_s_ott_categories.js","webpack:///./public/javascript/controller_s_ott_category_detail.js","webpack:///./public/javascript/controller_s_ott_channel.js","webpack:///./public/javascript/controller_s_ott_channel_detail.js","webpack:///./public/javascript/controller_s_ott_config.js","webpack:///./public/javascript/controller_s_ott_epg_monitor.js","webpack:///./public/javascript/controller_s_ott_private_cloud.js","webpack:///./public/javascript/controller_s_ott_products.js","webpack:///./public/javascript/controller_s_ott_products_detail.js","webpack:///./public/javascript/controller_s_ott_subscribers.js","webpack:///./public/javascript/controller_s_ott_subscribers_detail.js","webpack:///./public/javascript/controller_s_user_profile.js","webpack:///./public/javascript/directive_channel.js","webpack:///./public/javascript/stats/statsContentCtrl.js","webpack:///./public/javascript/stats/statsAudienceCtrl.js","webpack:///./public/javascript/stats/statsDevicesCtrl.js","webpack:///./public/javascript/controller_s_ott_statistics.js"],"names":["angular","$routeProvider","templateUrl","controller","$locationProvider","$rootScope","$location","$NxNav","HOST","$q","$http","getURI","id","headers","session","token","response","success","reject","GET_ACCOUNT","user","afterLoginCallback","localStorage","init","account","getAccount","preSuccess","password","callback","subscribers","data","resolve","content","checkSubscriberCredentials","code","message","error_dsc","Subscribers","update","params","Account","users","_id","Users","programmes","channels","Programmes","restartPush","channelsDelegation","categories","categoriesDelegation","privateCloud","ip","serverIp","media","format","killPid","role","pid","privateCloudDelegation","products","Products","avProfiles","AvProfiles","ottConfigurations","OttConfigurations","statistics","report","StatisticsDelegation","$mdDialog","$scope","cancel","solve","$NxApi","showAdd","showAddDelegation","showChannelSelector","showChannelSelectorDelegation","permissions","USER_ADMIN","PRIVATE_CLOUD_ADMIN","PRODUCTS_WRITE","PRODUCTS_READ","CHANNELS_WRITE","CHANNELS_READ","STATS_ACCESS","SUBSCRIBERS_READ","mainBar","hidden","navPanel","loadRootLevel","name","items","iconURL","path","item","toast","window","$mdToast","$event","checkLogin","$NxDialogs","console","description","file","document","maxSize","reader","logo","services","_getImage","url","img","user_id","$routeParams","permission","firstName","lastName","email","user_permissions","users_permissions","value","state","userId","dialog","parent","newPassword","dialog_alert","_updateTable","category","descriptionShort","descriptionLong","channelId","enabled","error","channel","channelEPGId","poster","notes","transcoder","parseInt","out","channelsEPGId","Math","task","str","rst","DAY","HOUR","MINUTE","server","label","formatUptime","privateCloudConfig","gpu_enc","gpu_dec","gpu_mem","mServer","t","serverCondition","streamingTestDialog","protocol","host","port","app","streamname","inStream","element","serverPart","source","pre","video","Date","encodeURIComponent","videojs","Array","pSource","target","clickOutsideToClose","confirm","getChannel","getTranscoder","outStream","streams","targetServer","getPackager","o","stream","productId","product","i","text","field","sortVars","a","b","getItemAtIndex","getLength","order","sortSubscribers","by","subscriber","newValue","background","$timeout","subscriberId","includeUpdateHistory","photo","scope","chart_data","char_labels","ctx","layout","padding","left","right","top","bottom","legend","labels","fontColor","title","display","tooltips","scales","xAxes","yAxes","stacked","restrict","require","link","ios","android","androidTv","browser","from","until","channelsTotals","chartData","date","sorted","playTime","topChannels","match","it","addChannelNames","results","namesOnly","dataSet","color","backgroundColor","pointRadius","borderWidth","fill","type","datasets","options","interaction","mode","intersect","plugins","position","tooltip","x","y","categoryPercentage","barPercentage","cleanUp","getData","chart_data_unique","chart_data_avgPTPD","myBarChart","ticks","beginAtZero","ctx2","concurrency","uniqueUsers","avgPTPD","result","uidx","avgPlayTime","DB_DEVICE_KEY","acumDevices","androidKey","androidTvKey","iosKey","browserKey","tnm","chart_data_iOs","chart_data_and","chart_data_box","chart_data_browser","parameterAvilable","aggregation","parameterDefault","nextColor","section","colors","masterScope","startDate","endDate","Object","dates","parameters","onDateChanged","onParameterChanged","icon","chart_data_active","chart_data_new","chart_data_del","deletion","active","deletions","AudienceCtrl","ContentCtrl","DevicesCtrl","startSection"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio', ['ngMaterial', 'ngMessages', 'ngRoute'])\n        .config([\"$routeProvider\", \"$locationProvider\", \"$mdThemingProvider\",function ($routeProvider, $locationProvider, $mdThemingProvider){\n\n            $routeProvider\n                .when('/', {\n                    templateUrl: '/res/layout/view_home.html',\n                    controller: 'HomeCtrl'\n                })\n                .when('/login', {\n                    templateUrl: '/res/layout/view_login.html',\n                    controller: 'LoginCtrl'\n                })\n                .when('/s/ott/channel', {\n                    templateUrl: '/res/layout/view_s_ott_channel.html',\n                    controller: 'sOttChannelCtrl'\n                })\n                .when('/s/ott/channel/:id', {\n                    templateUrl: '/res/layout/view_s_ott_channel_detail.html',\n                    controller: 'sOttChannelDetailCtrl'\n                })\n                .when('/s/ott/subscribers', {\n                    templateUrl: '/res/layout/view_s_ott_subscribers.html',\n                    controller: 'sOttSubscribersCtrl'\n                })\n                .when('/s/ott/subscribers/:id', {\n                    templateUrl: '/res/layout/view_s_ott_subscribers_detail.html',\n                    controller: 'sOttSubscribersDetailCtrl'\n                })\n                .when('/s/ott/products', {\n                    templateUrl: '/res/layout/view_s_ott_products.html',\n                    controller: 'sOttProductsCtrl'\n                })\n                .when('/s/ott/products/:id', {\n                    templateUrl: '/res/layout/view_s_ott_products_detail.html',\n                    controller: 'sOttProductsDetailCtrl'\n                })\n                .when('/s/ott/categories', {\n                    templateUrl: '/res/layout/view_s_ott_categories.html',\n                    controller: 'sCategoriesCtrl'\n                })\n                .when('/s/ott/categories/:id', {\n                    templateUrl: '/res/layout/view_s_ott_category_detail.html',\n                    controller: 'sCategoriesDetailCtrl'\n                })\n                .when('/s/ott/epg_monitor', {\n                    templateUrl: '/res/layout/view_s_ott_epg_monitor.html',\n                    controller: 'sOttEPGMonitorCtrl'\n                })\n                .when('/s/ott/config', {\n                    templateUrl: '/res/layout/view_s_ott_config.html',\n                    controller: 'sOttConfigCtrl'\n                })\n                .when('/s/ott/statistics', {\n                    templateUrl: '/res/layout/view_s_ott_statistics.html',\n                    controller: 'sOttStatisticsCtrl'\n                })\n                .when('/s/user-profile', {\n                    templateUrl: '/res/layout/view_s_user_profile.html',\n                    controller: 'sUserProfileCtrl'\n                })\n                .when('/s/account/settings', {\n                    templateUrl: '/res/layout/view_s_account_settings.html',\n                    controller: 'sAccountSettingsCtrl'\n                })\n                .when('/s/account/settings/users', {\n                    templateUrl: '/res/layout/view_s_account_settings_users.html',\n                    controller: 'sAccountSettingsUsersCtrl'\n                })\n                .when('/s/account/settings/users/:user_id', {\n                    templateUrl: '/res/layout/view_s_account_settings_user.html',\n                    controller: 'sAccountSettingsUserCtrl'\n                })\n                .when('/s/infra/private-cloud', {\n                    templateUrl: '/res/layout/view_s_private_cloud.html',\n                    controller: 'sPrivateCloudCtrl'\n                })\n                .when('/s/infra/private-cloud/:role/:ip', {\n                    templateUrl: '/res/layout/view_s_private_cloud_server.html',\n                    controller: 'sPrivateCloudDetailCtrl'\n                })\n                .when('/s/infra/private-cloud/channel/:channelId', {\n                    templateUrl: '/res/layout/view_s_private_cloud_channel.html',\n                    controller: 'sPrivateCloudCtrl'\n                })\n                .when('/s/n/a', {\n                    templateUrl: '/res/layout/view_n_a.html',\n                    controller: 'sNACtrl'\n                });\n\n            $locationProvider.html5Mode(true);\n\n        }])\n        .run([\"$rootScope\", \"$location\", \"$window\",\"$NxNav\", function run($rootScope,$location, $window,$NxNav) {\n            /*// initialise google analytics\n            $window.ga('create', 'UA-126373601-1', 'auto');\n\n            $rootScope.$on('$routeChangeSuccess', function (event) {\n                $window.ga('send', 'pageview', $location.path());\n            });*/\n\n\n            $rootScope.$on('$routeChangeSuccess', function (event) {\n                if($location.path() == \"/login\"){\n                    $NxNav.hide();\n                }else{\n                    $NxNav.show();\n                }\n            });\n\n\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n\n    angular.module('NxStudio')\n        .factory('$NxApi', ['$http', '$q', '$NxNav', function ($http, $q, $NxNav) {\n\n            const HOST = \"\";\n            const LOGIN_PATH = \"/api/1.0/user/login\";\n            const LOGIN_AS_USER_PATH = \"/api/1.0/user/login_as_user\";\n            const CHECK_SESSION = \"/api/1.0/user/check-session\";\n            const GET_ACCOUNT = \"/api/1.0/account/get\";\n\n            let session = {\n                user: null,\n                token: null\n            };\n\n            let afterLoginCallback = null;\n\n            function init() {\n                if (localStorage.getItem(\"token\")) {\n                    session.token = localStorage.getItem(\"token\");\n                }\n            }\n\n            function getURI(path) {\n                return HOST + path;\n            }\n\n            function login(email, password) {\n\n                return $q((success, reject) => {\n\n                    if (email === undefined) {\n\n                        if (session.token) {\n                            $http.post(getURI(CHECK_SESSION), {}, {\n                                headers: {\n                                    \"Authorization\": \"Bearer \" + session.token\n                                }\n                            }).then((response) => {\n                                preSuccess(response.data)\n                            }).catch((error) => {\n                                reject(error)\n                            });\n                        } else {\n                            reject(new Error(\"Session data not hosted\"));\n                        }\n                    } else {\n\n                        $http.post(getURI(LOGIN_PATH), {\n                            \"email\": email,\n                            \"password\": password\n                        }).then((response) => {\n                            preSuccess(response.data)\n                        }).catch((error) => {\n                            reject(error)\n                        });\n\n                    }\n\n                    function preSuccess(response) {\n\n                        session.user = response.content.user\n                        session.data = response.content.session\n\n                        localStorage.setItem(\"token\", session.data.token);\n\n                        let account = null;\n\n                        getAccount(response.content.user.account).then((data) => {\n                            account = data;\n                        }).catch((b) => {\n                        }).finally(() => {\n                            $NxNav.loadRootLevel(session.user, account);\n                            success(response.content.user);\n                            if (afterLoginCallback) afterLoginCallback();\n                        })\n\n\n                    }\n\n                })\n\n            }\n\n            function loginAsUser(email, password) {\n\n                return $q((success, reject) => {\n\n                    $http.post(getURI(LOGIN_AS_USER_PATH), {\n                        \"email\": email,\n                        \"password\": password\n                    }, {\n                        headers: {\n                            \"Authorization\": \"Bearer \" + session.token\n                        }\n                    }).then((response) => {\n                        preSuccess(response.data)\n                    }).catch((error) => {\n                        reject(error)\n                    });\n\n                    function preSuccess(response) {\n\n                        session.user = response.content.user\n                        session.data = response.content.session\n\n                        localStorage.setItem(\"token\", session.data.token);\n\n                        let account = null;\n\n                        getAccount(response.content.user.account).then((data) => {\n                            account = data;\n                        }).catch((b) => {\n                        }).finally(() => {\n                            $NxNav.loadRootLevel(session.user, account);\n                            success(response.content.user);\n                            if (afterLoginCallback) afterLoginCallback();\n                        })\n\n                    }\n\n                })\n\n            }\n\n            function setAfterLogin(callback) {\n                if (session.user === null) {\n                    afterLoginCallback = callback;\n                } else {\n                    callback()\n                }\n\n            }\n\n            function getUser() {\n                return session.user;\n            }\n\n            function getAccount(id) {\n                return $q((success, reject) => {\n                    $http.post(getURI(GET_ACCOUNT), {\n                        id: id\n                    }, {\n                        headers: {\n                            \"Authorization\": \"Bearer \" + session.token\n                        }\n                    }).then((response) => {\n                        if (response.data.error !== null) {\n                            reject(response.data.error)\n                        } else {\n                            success(response.data.content)\n                        }\n                    }).catch((error) => {\n                        reject(error)\n                    });\n                })\n            }\n\n            function Account($http, $q) {\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/account/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    update,\n                }\n            }\n\n            function Programmes($http, $q) {\n\n                function channels(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/programmes/channels\", {}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/programmes/read\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    read,\n                    channels\n                }\n            }\n\n            function channelsDelegation($http, $q) {\n\n                function create(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve(data);\n\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function read(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/read\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function restartPush(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/restartPush\", {\n                            id: params.id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                    restartPush\n                }\n            }\n\n            function categoriesDelegation($http, $q) {\n\n                function create(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/category/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve(data);\n\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/category/read\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/category/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/category/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                }\n            }\n\n            function privateCloudDelegation($http, $q) {\n\n                function getConfig() {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/privateCloud/config/get\", {}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function getEntrypointCondition(serverIp) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/entrypoint/get`, {ip: serverIp}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function getTranscoderCondition(serverIp) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/transcoder/get`, {ip: serverIp}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function getPackagerCondition(serverIp) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/packager/get`, {ip: serverIp}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function mediainfo(source, format) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/test/mediainfo`, {media: source, format: format}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function killPid(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/kill/pid`, {\n                            role: params.role,\n                            ip: params.ip,\n                            pid: params.pid\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                return {\n                    getConfig,\n                    getEntrypointCondition,\n                    getTranscoderCondition,\n                    getPackagerCondition,\n                    mediainfo,\n                    killPid\n                }\n            }\n\n            function Products($http, $q) {\n\n                function create(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/product/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/product/read\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve(data.content);\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/product/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/product/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                }\n            }\n\n            function Users($http, $q) {\n\n                function create(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/user/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/user/read\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve({\n                                    users: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/user/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/user/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                }\n            }\n\n            function Subscribers($http, $q) {\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/subscriber/read\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({\n                                    subscribers: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function checkSubscriberCredentials(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/playme/check_subscriber_credentials\", params)\n                            .then(({data}) => {\n\n                                if (data.error) {\n                                    reject({\n                                        code: data.error,\n                                        message: data.error_dsc\n                                    });\n                                } else {\n                                    resolve({message: \"Correct Password\"});\n                                }\n\n                            })\n                            .catch(({data}) => {\n                                reject({\n                                    code: data.error,\n                                    message: data.error_dsc\n                                })\n                            });\n                    });\n                }\n\n                return {\n                    read,\n                    checkSubscriberCredentials\n                }\n            }\n\n            function AvProfiles($http, $q) {\n\n                function create(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/avProfile/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({\n                                    avProfiles: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/avProfile/read\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({\n                                    avProfiles: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/avProfile/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/avProfile/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                }\n            }\n\n            function OttConfigurations($http, $q) {\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/ottConfigurations/read\", {}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve({\n                                    ottConfigurations: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/ottConfigurations/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    read,\n                    update\n                }\n            }\n\n            function StatisticsDelegation($http, $q) {\n\n                function subscribers(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/statistics/subscribers\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data.content);\n                        }).catch((error) => {\n                            reject(error)\n                        });\n                    });\n                }\n\n                function dailyPlay(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/statistics/dailyPlay\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data.content);\n                        }).catch((error) => {\n                            reject(error)\n                        });\n                    });\n                }\n\n                function devices(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/statistics/devices\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data.content);\n                        }).catch((error) => {\n                            reject(error)\n                        });\n                    });\n                }                \n\n                function report(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/statistics/report\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data.content);\n                        }).catch((error) => {\n                            reject(error)\n                        });\n                    });\n                }\n\n                return {\n                    subscribers,\n                    dailyPlay,\n                    devices,\n                    report\n                }\n            }\n\n            init();\n\n            return {\n                login: login,\n                loginAsUser: loginAsUser,\n                setAfterLogin: setAfterLogin,\n                getUser: getUser,\n                getAccount: getAccount,\n                subscribers: Subscribers($http, $q),\n                account: Account($http, $q),\n                users: Users($http, $q),\n                programmes: Programmes($http, $q),\n                channels: channelsDelegation($http, $q),\n                categories: categoriesDelegation($http, $q),\n                privateCloud: privateCloudDelegation($http, $q),\n                products: Products($http, $q),\n                avProfiles: AvProfiles($http, $q),\n                ottConfigurations: OttConfigurations($http, $q),\n                statistics: StatisticsDelegation($http, $q)\n            }\n        }]);\n\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    const C = {};\n\n    angular.module('NxStudio')\n        .factory('$NxDialogs', ['$http', '$q', '$mdDialog', '$location', '$NxApi',\n            function ($http, $q, $mdDialog, $location, $NxApi) {\n\n                return {\n                    showAdd: showAddDelegation($http, $q, $mdDialog, $location, $NxApi),\n                    showChannelSelector: showChannelSelectorDelegation($http, $q, $mdDialog, $location, $NxApi)\n                }\n\n            }]);\n\n\n    function showAddDelegation($http, $q, $mdDialog, $location, $NxApi) {\n\n        function show($event) {\n            let addDialog = {\n                templateUrl: \"/res/layout/fragment_dialog_add.html\",\n                controller: controller,\n\n            };\n\n\n            function controller($scope, $mdDialog) {\n\n                $scope.cancel = cancel;\n\n                $scope.add = add;\n\n\n                function cancel() {\n                    $mdDialog.hide()\n                }\n\n                function add(event) {\n                    cancel();\n                    switch (event) {\n                        case \"channel\": {\n                            $location.path(\"/s/ott/channel/new\");\n                            break;\n                        }\n                        case \"category\": {\n                            $location.path(\"/s/ott/categories/new\");\n                            break;\n                        }\n                        default: {\n                            $location.path(\"/s/ott/products/new\")\n                        }\n                    }\n\n                }\n\n\n            }\n\n            $mdDialog.show(addDialog);\n        }\n\n\n        return show;\n\n    }\n    function showChannelSelectorDelegation($http, $q, $mdDialog, $location, $NxApi) {\n\n        function show($event) {\n            return $q((solve, reject) => {\n\n                let addDialog = {\n                    templateUrl: \"/res/layout/fragment_dialog_channel_list.html\",\n                    controller: controller,\n                };\n\n\n                function controller($scope, $mdDialog) {\n\n                    $scope.cancel = cancel;\n                    $scope.select = select;\n                    $scope.loading = true;\n                    $scope.channels = [];\n\n                    function init() {\n\n                        $NxApi.channels.read({}).then((data)=>{\n                            $scope.channels = data;\n                            $scope.loading = false;\n                        })\n\n                    }\n\n                    function cancel() {\n                        $mdDialog.hide()\n                    }\n\n                    function select(channel) {\n                        cancel();\n                        solve(channel)\n                    }\n\n                    init();\n                }\n\n                $mdDialog.show(addDialog);\n\n            });\n        }\n\n\n        return show;\n\n    }\n\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    const C = {};\n\n    angular.module('NxStudio')\n        .factory('$NxNav', ['$http', '$q', function ($http, $q) {\n\n            const permissions = {\n                USER_ADMIN: \"user.admin\",\n                PRIVATE_CLOUD_ADMIN: \"privatecloud.admin\",\n                PRODUCTS_WRITE: \"products.write\",\n                PRODUCTS_READ: \"products.read\",\n                CHANNELS_WRITE: \"channels.write\",\n                CHANNELS_READ: \"channels.read\",\n                STATS_ACCESS: \"stats.access\",\n                SUBSCRIBERS_READ: \"subscribers.read\"\n            };\n\n            let mainBar = {\n                hidden: true\n            };\n\n            let navPanel = {\n                hidden: true\n            };\n\n\n            function hide() {\n                mainBar.hidden = true;\n                navPanel.hidden = true;\n            }\n\n            function show() {\n                mainBar.hidden = false;\n                navPanel.hidden = false;\n            }\n\n            function loadRootLevel(user, account) {\n\n                navPanel.currentAccount = account;\n                navPanel.currentMap = [\n                    {\n                        name: \"Assets (PC)\",\n                        items: [\n                            /*{\n                                iconURL: \"/res/drawable/ic_live_alt.svg\",\n                                name: \"Live Feeds\",\n                                path: \"/s/ott/channel\"\n                            },*/\n                            {\n                                iconURL: \"/res/drawable/ic_playlist.svg\",\n                                name: \"Private Cloud\",\n                                path: \"/s/infra/private-cloud\"\n                            }\n                        ],\n                    },\n                    {\n                        name: \"Publishing\",\n                        items: [\n                            {\n                                iconURL: \"/res/drawable/ic_show.svg\",\n                                name: \"Channels\",\n                                path: \"/s/ott/channel\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_package.svg\",\n                                name: \"Package\",\n                                path: \"/s/ott/products\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_channel.svg\",\n                                name: \"Categories\",\n                                path: \"/s/ott/categories\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_notification.svg\",\n                                name: \"Notifications\",\n                                path: \"/s/ott/notifications\"\n                            }\n                        ]\n                    },\n                    {\n                        name: \"OTT\",\n                        items: [\n                            {\n                                iconURL: \"/res/drawable/ic_subscribers.svg\",\n                                name: \"Subscribers\",\n                                path: \"/s/ott/subscribers\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_epg_monitor.svg\",\n                                name: \"EPG Monitor\",\n                                path: \"/s/ott/epg_monitor\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_ott_project.svg\",\n                                name: \"Config\",\n                                path: \"/s/ott/config\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_statistics.svg\",\n                                name: \"Statistics\",\n                                path: \"/s/ott/statistics\"\n                            }]\n\n                    },\n                    {\n                        name: \"Account\",\n                        items: [\n                            {\n                                iconURL: \"/res/drawable/ic_settings.svg\",\n                                name: \"Settings\",\n                                path: \"/s/account/settings\"\n                            }\n                        ]\n                    }\n\n                ].filter(checkPermissions);\n\n                function checkPermissions(item) {\n\n                    if (item.name === \"Assets (PC)\") {\n                        return user.permissions.includes(permissions.PRIVATE_CLOUD_ADMIN);\n                    }\n\n                    return true;\n                }\n\n            }\n\n            return {\n                hide: hide,\n                show: show,\n                mainBar: mainBar,\n                navPanel: navPanel,\n                loadRootLevel: loadRootLevel\n            }\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"HomeCtrl\", ['$scope', '$interval', controller]);\n\n    function controller($scope, $interval) {\n\n\n    }\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"LoginCtrl\", ['$scope', '$NxApi','$NxNav', '$location', '$mdToast', function ($scope, $NxApi, $NxNav,$location, $mdToast) {\n\n            // Scope Properties\n\n            // Methods Declaration\n\n            $scope.keyPress = keyPress;\n            $scope.checkLogin = checkLogin;\n\n            // Implementation\n\n            function init() {\n\n            }\n\n\n            function keyPress($event) {\n                if ($event.code === \"Enter\") {\n                    checkLogin()\n                }\n            }\n\n            function checkLogin() {\n                if ($scope.loginData.email === \"\" || $scope.loginData.password === \"\") {\n                    toast(\"Please complete all your login information\")\n                } else {\n                    $NxApi.login($scope.loginData.email, $scope.loginData.password).then((user) => {\n                        window.location = \"/\";\n                    }).catch((error) => {\n                        toast(\"Invalid email or password. Pleas, check your login information.\")\n                    })\n                }\n            }\n\n            function toast(msg) {\n                $mdToast.show(\n                    $mdToast.simple()\n                        .textContent(msg)\n                        .hideDelay(5000))\n                    .then(function () {\n                    }).catch(function () {\n                });\n            }\n\n            init();\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"MainCtrl\", ['$scope', '$NxApi', '$NxNav', '$NxDialogs', '$location','$mdToast',\n            function ($scope, $NxApi, $NxNav, $NxDialogs, $location,$mdToast) {\n\n                // Scope Properties\n\n                $scope.navPanel = $NxNav.navPanel;\n                $scope.mainBar = $NxNav.mainBar;\n\n                // Methods Declaration\n\n                $scope.userPicture = userPicture;\n                $scope.userName = userName;\n                $scope.navAction = navAction;\n                $scope.currentAccount = currentAccount;\n                $scope.logOut = logOut;\n                $scope.accessProfile = accessProfile;\n                $scope.showAddDialog = showAddDialog;\n                $scope.toast = toast;\n\n                // Implementation\n\n                function init() {\n\n                    $NxApi.login().then(() => {\n\n                        if ($location.path() === \"/login\") {\n                            $location.path(\"/\")\n                        } else {\n\n                        }\n\n                    }).catch((e) => {\n                        console.log(2, e);\n                        $location.path(\"/login\");\n                    });\n\n                }\n\n                function userPicture() {\n                    const user = $NxApi.getUser();\n\n                    if (user && user.photo && user.photo.url) {\n                        return user.photo.url\n                    } else {\n                        return \"/res/drawable/ph_user.jpg\"\n                    }\n                }\n\n                function userName() {\n                    const user = $NxApi.getUser();\n\n                    if (user) {\n                        return user.firstName + \" \" + user.lastName\n                    } else {\n                        return \"...\"\n                    }\n                }\n\n                function navAction(item) {\n                    $location.path(item.path);\n                }\n\n                function currentAccount() {\n                    return $NxNav.navPanel.currentAccount;\n                }\n\n                function logOut() {\n                    localStorage.clear();\n                    window.location = \"/login\"\n                }\n\n                function accessProfile() {\n                    $location.path(\"/s/user-profile\")\n                }\n\n                function showAddDialog($event) {\n                    $NxDialogs.showAdd($event)\n                }\n\n                function toast(msg) {\n                    $mdToast.show(\n                        $mdToast.simple()\n                            .textContent(msg)\n                            .hideDelay(5000))\n                        .then(function () {\n                        }).catch(function () {\n                    });\n                }\n\n\n                init();\n\n            }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sAccountSettingsCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location','$q',\n                function ($scope, $NxApi, $mdToast, $location,$q) {\n\n            $scope.acount = {\n                logo: '',\n                name: '',\n                description: '',\n                services: []\n            };\n\n            $scope.account_users = account_users;\n            $scope.updateAccount = updateAccount;\n            $scope.uploadImage = uploadImage;\n\n            function init() {\n                let user = $NxApi.getUser();\n\n                if(user){\n                    $NxApi.getAccount(user.account).then((account) => {\n                        let {name, logo, description, services,_id} = account;\n\n                        $scope.acount = {\n                            _id,\n                            name,\n                            logo,\n                            description,\n                            services\n                        }\n                    })\n                }\n\n            }\n\n            function account_users(){\n                $location.path(\"/s/account/settings/users\")\n            }\n\n            function toast(msg) {\n                $mdToast.show(\n                    $mdToast.simple()\n                        .textContent(msg)\n                        .hideDelay(5000))\n                    .then(function () {\n                    }).catch(function () {\n                });\n            }\n\n            function checkForm() {\n\n                let {name, description} = $scope.acount;\n\n                if (name !== '' && description !== '') {\n                    return true\n                }\n\n                toast(\"The fields cannot be empty\");\n\n                return false\n            }\n\n            function _getImage() {\n                return $q((resolve, reject) => {\n                    let file = document.createElement('input');\n                    let maxSize = 500; //kb\n                    file.type = 'file';\n                    file.click();\n\n                    file.addEventListener('change', function () {\n\n                        if (file.files[0].size / 1000 > maxSize) {\n                            reject(`The image can not be larger than ${maxSize}kb`)\n                        }\n\n                        let reader = new FileReader();\n\n                        reader.onloadend = function () {\n                            resolve(reader.result)\n                        };\n\n                        reader.readAsDataURL(file.files[0]);\n                    })\n                })\n            }\n\n            function uploadImage() {\n                _getImage().then((img) => {\n                    $scope.acount.logo = {\n                        update:true,\n                        url:img\n                    };\n                }).catch((error) => {\n                    toast(error);\n                })\n            }\n\n            function updateAccount(){\n                if(checkForm()){\n\n                    $scope.loading = true;\n\n                    $NxApi.account\n                        .update($scope.acount)\n                        .then(() => {\n                            toast('The account was update');\n                            $scope.loading = false;\n                            if($scope.user.photo) $scope.user.photo.update = false;\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.loading = false;\n                        })\n\n                }\n            }\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sAccountSettingsUserCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location', '$routeParams', '$q', '$mdDialog',\n                function ($scope, $NxApi, $mdToast, $location, $routeParams, $q, $mdDialog) {\n\n                    const users_permissions = {\n                        USER_ADMIN: \"user.admin\",\n                        PRIVATE_CLOUD_ADMIN: \"privatecloud.admin\",\n                        PRODUCTS_WRITE: \"products.write\",\n                        PRODUCTS_READ: \"products.read\",\n                        CHANNELS_WRITE: \"channels.write\",\n                        CHANNELS_READ: \"channels.read\",\n                        STATS_ACCESS: \"stats.access\",\n                        SUBSCRIBERS_READ: \"subscribers.read\"\n                    };\n\n                    $scope.isNew = $routeParams.user_id === \"new\";\n                    $scope.user = {};\n                    $scope.accountName = '';\n                    $scope.users_permissions = [\n                        {\n                            value: users_permissions.CHANNELS_READ,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.CHANNELS_WRITE,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.PRODUCTS_READ,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.PRODUCTS_WRITE,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.STATS_ACCESS,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.SUBSCRIBERS_READ,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.USER_ADMIN,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.PRIVATE_CLOUD_ADMIN,\n                            state: false\n                        }\n                    ];\n                    $scope.loading = false;\n\n                    $scope.updateUser = updateUser;\n                    $scope.uploadImage = uploadImage;\n                    $scope.getUrlProfilePhoto = getUrlProfilePhoto;\n                    $scope.dialog_changePassword = dialog_changePassword;\n                    $scope.dialog_alert = dialog_alert;\n                    $scope.logAsUser = logAsUser;\n\n                    function init() {\n                        if (!$scope.isNew) {\n                            let user_id = $routeParams.user_id;\n\n                            if (user_id) {\n                                $NxApi.users.read({_id: user_id}).then(({users}) => {\n                                    $scope.user = users[0];\n                                    for (let permission of $scope.users_permissions) {\n                                        if ($scope.user.permissions.includes(permission.value)) {\n                                            permission.state = true;\n                                        }\n                                    }\n                                });\n\n                            }\n                        }\n                    }\n\n                    function toast(msg) {\n                        $mdToast.show(\n                            $mdToast.simple()\n                                .textContent(msg)\n                                .hideDelay(5000))\n                            .then(function () {\n                            }).catch(function () {\n                        });\n                    }\n\n                    function checkForm() {\n\n                        let {firstName, lastName, email,password} = $scope.user;\n\n                        if (\n                            typeof firstName !== 'undefined' &&\n                            firstName !== '' &&\n                            typeof lastName !== 'undefined' &&\n                            lastName !== '' &&\n                            typeof email !== 'undefined'\n                            && email !== ''\n                        ) {\n\n                            if ($scope.isNew) {\n                                if (password !== 'undefined' && password !== '') {\n                                    return true\n                                }\n                            }else{\n                                return true\n                            }\n                        }\n\n                        toast(\"The fields cannot be empty\");\n\n                        return false\n                    }\n\n                    function updateUser() {\n\n                        if (checkForm()) {\n\n                            $scope.loading = true;\n\n                            let data = {\n                                _id: $scope.user._id,\n                                firstName: $scope.user.firstName,\n                                lastName: $scope.user.lastName,\n                                permissions: _getPermissions(),\n                                email: $scope.user.email\n                            };\n\n                            if($scope.user.photo){\n                                data[\"photo\"] = $scope.user.photo;\n                            }\n\n                            if ($scope.isNew) {\n\n                                data.password = $scope.user.password;\n\n                                $NxApi.users\n                                    .create(data)\n                                    .then(() => {\n                                        toast('The user was create');\n                                        $scope.loading = false;\n                                        $location.path(\"/s/account/settings/users\");\n\n                                    })\n                                    .catch((error) => {\n                                        console.log(error);\n                                        $scope.loading = false;\n                                    })\n\n                            } else {\n\n                                $NxApi.users\n                                    .update(data)\n                                    .then(() => {\n                                        toast('The user was update');\n                                        $scope.loading = false;\n                                        if($scope.user.photo) $scope.user.photo.update = false;\n\n                                    })\n                                    .catch((error) => {\n                                        console.log(error);\n                                        $scope.loading = false;\n                                    })\n                            }\n\n                        }\n\n                    }\n\n                    function getUrlProfilePhoto(user) {\n                        if (user.photo && user.photo.url) {\n                            return user.photo.url\n                        }\n\n                        return '/res/drawable/ph_user.jpg'\n                    }\n\n                    function _getPermissions() {\n                        let user_permissions = [];\n                        for (let permission of $scope.users_permissions) {\n                            if (permission.state) user_permissions.push(permission.value);\n                        }\n                        return user_permissions;\n                    }\n\n                    function dialog_changePassword() {\n\n                        let title = 'Reset Password';\n                        let templateUrl = \"/res/layout/dialog_change_password.html\";\n                        let userId = $scope.user._id;\n\n                        return $q((resolve, reject) => {\n\n                            let dialog = {\n                                templateUrl: templateUrl,\n                                parent: angular.element(document.body),\n                                escapeToClose: true,\n                                clickOutsideToClose: true,\n                                controller: dialogController\n                            };\n\n                            $mdDialog.show(dialog).then(resolve, reject);\n\n                            function dialogController($scope, $mdDialog) {\n\n                                $scope.title = title;\n                                $scope.userId = userId;\n                                $scope.newPassword = '';\n                                $scope.newPasswordVerify = '';\n                                $scope.loading = false;\n\n                                $scope.cancel = cancel;\n                                $scope.save = save;\n                                $scope.verifyPassword = verifyPassword;\n\n                                function init() {\n\n                                }\n\n                                function cancel() {\n                                    $mdDialog.cancel();\n                                }\n\n                                function verifyPassword() {\n\n                                    return ($scope.newPassword === '' && $scope.newPasswordVerify === '') || $scope.newPassword !== $scope.newPasswordVerify\n                                }\n\n                                function save() {\n                                    $scope.loading = true;\n                                    $NxApi.users\n                                        .update({\n                                            _id: userId,\n                                            password: $scope.newPassword\n                                        })\n                                        .then(() => {\n                                            toast('The password was update');\n                                            $scope.loading = false;\n                                            $mdDialog.hide();\n\n                                        })\n                                        .catch((error) => {\n                                            console.log(error);\n                                            $scope.loading = false;\n                                        })\n\n                                }\n\n                                init();\n                            }\n\n                        });\n\n                    }\n\n                    function dialog_alert() {\n\n                        let title = 'Remove user';\n                        let description = 'You are sure to delete the current user?';\n                        let templateUrl = \"/res/layout/dialog_alert.html\";\n                        let userId = $scope.user._id;\n\n                        return $q((resolve, reject) => {\n\n                            let dialog = {\n                                templateUrl: templateUrl,\n                                parent: angular.element(document.body),\n                                escapeToClose: true,\n                                clickOutsideToClose: true,\n                                controller: dialogController\n                            };\n\n                            $mdDialog.show(dialog).then(resolve, reject);\n\n                            function dialogController($scope, $mdDialog) {\n\n                                $scope.title = title;\n                                $scope.description = description;\n                                $scope.userId = userId;\n                                $scope.loading = false;\n\n                                $scope.cancel = cancel;\n                                $scope.ok = ok;\n\n                                function init() {\n\n                                }\n\n                                function cancel() {\n                                    $mdDialog.cancel();\n                                }\n\n                                function ok() {\n                                    $scope.loading = true;\n                                    $NxApi.users\n                                        .delete({\n                                            _id: userId\n                                        })\n                                        .then(() => {\n                                            toast('user removed');\n                                            $scope.loading = false;\n                                            $mdDialog.hide();\n                                            $location.path('/s/account/settings/users');\n\n                                        })\n                                        .catch((error) => {\n                                            console.log(error);\n                                            $scope.loading = false;\n                                        })\n\n                                }\n\n                                init();\n                            }\n\n                        });\n\n                    }\n\n                    function _getImage() {\n                        return $q((resolve, reject) => {\n                            let file = document.createElement('input');\n                            let maxSize = 500; //kb\n                            file.type = 'file';\n                            file.click();\n\n                            file.addEventListener('change', function () {\n\n                                if (file.files[0].size / 1000 > maxSize) {\n                                    reject(`The image can not be larger than ${maxSize}kb`)\n                                }\n\n                                let reader = new FileReader();\n\n                                reader.onloadend = function () {\n                                    resolve(reader.result)\n                                };\n\n                                reader.readAsDataURL(file.files[0]);\n                            })\n                        })\n                    }\n\n                    function uploadImage() {\n                        _getImage().then((img) => {\n                            $scope.user.photo = {\n                                update:true,\n                                url:img\n                            };\n                        }).catch((error) => {\n                            toast(error);\n                        })\n                    }\n\n                    function logAsUser(user){\n                        $NxApi.loginAsUser(user.email,user.authentication.password).then(()=>{\n                            window.location = \"/\";\n                        })\n                    }\n\n                    init();\n\n                    $NxApi.setAfterLogin(init);\n\n                }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sAccountSettingsUsersCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location', '$q', '$mdDialog',\n                function ($scope, $NxApi, $mdToast, $location, $q, $mdDialog) {\n\n                    $scope.users = [];\n                    $scope.accountName = '';\n                    $scope.loading = true;\n\n                    $scope.getUrlProfilePhoto = getUrlProfilePhoto;\n                    $scope.userDetails = userDetails;\n                    $scope.newUser = newUser;\n                    $scope.removeUser = removeUser;\n\n                    function init() {\n                        let user = $NxApi.getUser();\n\n                        if (user) {\n\n                            $NxApi.getAccount(user.account).then((account) => {\n                                $scope.accountName = account.name;\n                                $NxApi.users.read({account: user.account}).then(({users}) => {\n                                    $scope.users = users;\n                                    $scope.loading = false;\n                                });\n                            })\n\n                        }\n\n                    }\n\n                    function _updateTable() {\n                        let user = $NxApi.getUser();\n\n                        if (user) {\n\n                            $NxApi.getAccount(user.account).then((account) => {\n                                $scope.accountName = account.name;\n                                $NxApi.users.read({account: user.account}).then(({users}) => {\n                                    $scope.users = users;\n                                });\n                            })\n\n                        }\n                    }\n\n                    function newUser() {\n                        $location.path('/s/account/settings/users/new')\n                    }\n\n                    function userDetails(user) {\n                        $location.path('/s/account/settings/users/' + user._id)\n                    }\n\n                    function removeUser(user) {\n\n                        dialog_alert(user).then(() => {\n                            toast('user removed');\n                            _updateTable();\n                        })\n\n                    }\n\n                    function toast(msg) {\n                        $mdToast.show(\n                            $mdToast.simple()\n                                .textContent(msg)\n                                .hideDelay(5000))\n                            .then(function () {\n                            }).catch(function () {\n                        });\n                    }\n\n                    function dialog_alert(user) {\n\n                        let title = 'Remove user';\n                        let description = 'You are sure to delete the selected user?';\n                        let templateUrl = \"/res/layout/dialog_alert.html\";\n                        let userId = user._id;\n\n                        return $q((resolve, reject) => {\n\n                            let dialog = {\n                                templateUrl: templateUrl,\n                                parent: angular.element(document.body),\n                                escapeToClose: true,\n                                clickOutsideToClose: true,\n                                controller: dialogController\n                            };\n\n                            $mdDialog.show(dialog).then(resolve, reject);\n\n                            function dialogController($scope, $mdDialog) {\n\n                                $scope.title = title;\n                                $scope.description = description;\n                                $scope.userId = userId;\n                                $scope.loading = false;\n\n                                $scope.cancel = cancel;\n                                $scope.ok = ok;\n\n                                function init() {\n\n                                }\n\n                                function cancel() {\n                                    $mdDialog.cancel();\n                                }\n\n                                function ok() {\n                                    $scope.loading = true;\n                                    $NxApi.users\n                                        .delete({\n                                            _id: userId\n                                        })\n                                        .then(() => {\n                                            $scope.loading = false;\n                                            $mdDialog.hide();\n\n\n                                        })\n                                        .catch((error) => {\n                                            console.log(error);\n                                            $scope.loading = false;\n                                        })\n\n                                }\n\n                                init();\n                            }\n\n                        });\n\n                    }\n\n                    function getUrlProfilePhoto(user) {\n                        if (user.photo && user.photo.url) {\n                            return user.photo.url\n                        }\n\n                        return '/res/drawable/ph_user.jpg'\n                    }\n\n                    init();\n\n                    $NxApi.setAfterLogin(init);\n\n                }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sNACtrl\", ['$scope', '$NxApi', '$mdToast','$location', function ($scope, $NxApi, $mdToast,$location) {\n\n            function init(){\n\n            }\n\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sCategoriesCtrl\", ['$scope', '$interval', '$NxApi', '$location'\n            , function ($scope, $interval, $NxApi, $location) {\n\n                $scope.search = '';\n                $scope.categories = [];\n                $scope.channelDetails = channelDetails;\n                $scope.customFilter = customFilter;\n\n                function init() {\n\n                    $NxApi.categories\n                        .read({})\n                        .then((channels) => {\n                            $scope.categories = channels;\n                        })\n                        .catch((error) => {\n                            console.log(error);\n\n                        })\n                }\n\n                function channelDetails(category) {\n                    $location.path('/s/ott/categories/' + category._id)\n                }\n\n                function customFilter() {\n                    return function (item) {\n\n                        if($scope.search === '') return true;\n\n                        return !item.name.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.channelEPGId.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.entryPoint.streamKey.toLowerCase().indexOf($scope.search.toLowerCase())\n                    }\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sCategoriesDetailCtrl\", ['$scope', '$interval', '$routeParams', '$NxApi', '$q', '$location', '$mdDialog', controller]);\n\n    function controller($scope, $interval, $routeParams, $NxApi, $q, $location, $mdDialog) {\n\n        $scope.isNew = $routeParams.id === \"new\";\n        $scope.categoryData = {\n            name: '',\n            descriptionShort: '',\n            descriptionLong: '',\n            enabled: false\n        };\n\n        $scope.updateCategory = updateCategory;\n        $scope.removeCategory = removeCategory;\n\n        function init() {\n            if (!$scope.isNew) {\n                $NxApi.categories\n                    .read({_id: $routeParams.id})\n                    .then((category) => {\n                        $scope.categoryData = category[0];\n                    })\n                    .catch((error) => {\n                        $location.path(\"/s/ott/categories\");\n                        $scope.$parent.toast('The category doesn\\'t exist');\n\n                    })\n            }\n\n        }\n\n        function checkForm() {\n\n            let {name, descriptionShort, descriptionLong} = $scope.categoryData;\n\n            if (name !== '' && descriptionShort !== '' && descriptionLong !== '' ) {\n                return true\n            }\n\n            $scope.$parent.toast(\"The fields cannot be empty\");\n\n            return false\n        }\n\n        function removeCategory() {\n\n            dialog_alert()\n                .then(() => {\n                    $location.path('/s/ott/categories');\n                }).catch((error) => {\n                $scope.$parent.toast(error.message)\n            })\n        }\n\n        function dialog_alert() {\n\n            let title = 'Remove Category';\n            let description = 'You are sure you want to delete the current category?';\n            let templateUrl = \"/res/layout/dialog_alert.html\";\n            let channelId = $routeParams.id;\n\n            return $q((resolve, reject) => {\n\n                let dialog = {\n                    templateUrl: templateUrl,\n                    parent: angular.element(document.body),\n                    escapeToClose: true,\n                    clickOutsideToClose: true,\n                    controller: dialogController\n                };\n\n                $mdDialog.show(dialog).then(resolve, reject);\n\n                function dialogController($scope, $mdDialog, $location) {\n\n                    $scope.title = title;\n                    $scope.description = description;\n                    $scope.channelId = channelId;\n                    $scope.loading = false;\n\n                    $scope.cancel = cancel;\n                    $scope.ok = ok;\n\n                    function init() {\n\n                    }\n\n                    function cancel() {\n                        $mdDialog.cancel();\n                    }\n\n                    function ok() {\n                        $scope.loading = true;\n                        $NxApi.categories\n                            .delete({\n                                _id: channelId\n                            })\n                            .then(() => {\n                                $mdDialog.hide();\n                            })\n                            .catch((error) => {\n                                $mdDialog.cancel(error);\n                                $scope.loading = false;\n                            })\n\n                    }\n\n                    init();\n                }\n\n            });\n\n        }\n\n        function updateCategory() {\n            if (checkForm()) {\n\n                $scope.loading = true;\n\n                if ($scope.isNew) {\n\n                    $NxApi.categories\n                        .create($scope.categoryData)\n                        .then(() => {\n                            $scope.$parent.toast('The category was created');\n                            $scope.loading = false;\n                            $location.path(\"/s/ott/categories\");\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.$parent.toast(error.message);\n                            $scope.loading = false;\n                        })\n\n                } else {\n                    $NxApi.categories\n                        .update($scope.categoryData)\n                        .then(() => {\n                            $scope.$parent.toast('The category was update');\n                            $scope.loading = false;\n                            if ($scope.channelData.poster) $scope.channelData.poster.update = false;\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.$parent.toast(error.message);\n                            $scope.loading = false;\n\n                        })\n\n                }\n\n            }\n        }\n\n        $NxApi.setAfterLogin(init);\n\n\n    }\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttChannelCtrl\", ['$scope', '$interval', '$NxApi', '$location'\n            , function ($scope, $interval, $NxApi, $location) {\n\n                $scope.search = '';\n                $scope.channels = [];\n                $scope.channelDetails = channelDetails;\n                $scope.customFilter = customFilter;\n\n                function init() {\n                    $NxApi.channels\n                        .read({})\n                        .then((channels) => {\n                            $scope.channels = channels;\n                        })\n                        .catch((error) => {\n                            console.log(error);\n\n                        })\n                }\n\n                function channelDetails(channel) {\n                    $location.path('/s/ott/channel/' + channel._id)\n                }\n\n                function customFilter() {\n                    return function (item) {\n\n                        if ($scope.search === '') return true;\n\n                        return !item.name.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.channelEPGId.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.publishing[0].streamName.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.entryPoint.streamKey.toLowerCase().indexOf($scope.search.toLowerCase())\n                    }\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttChannelDetailCtrl\", ['$scope', '$interval', '$routeParams', '$NxApi', '$q', '$location', '$mdDialog', controller]);\n\n    function controller($scope, $interval, $routeParams, $NxApi, $q, $location, $mdDialog) {\n\n        $scope.isNew = $routeParams.id === \"new\";\n        $scope.channelData = {\n            name: '',\n            descriptionShort: '',\n            channelEPGId: '',\n            descriptionLong: '',\n            poster: [],\n            notes: '',\n            enabled: false,\n            transcoder: null\n        };\n\n        $scope.uploadImage = uploadImage;\n        $scope.getUrlPoster = getUrlPoster;\n        $scope.updateChannel = updateChannel;\n        $scope.removeChannel = removeChannel;\n        $scope.restartPush = restartPush;\n\n        $scope.categories = [];\n\n        function init() {\n            $NxApi.categories\n                .read({})\n                .then((categories) => {\n                    $scope.categories = categories;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n\n            if (!$scope.isNew) {\n\n                $NxApi.channels\n                    .read({_id: $routeParams.id})\n                    .then((channel) => {\n                        $scope.channelData = channel[0];\n                    })\n                    .catch((error) => {\n                        $location.path(\"/s/ott/channel\");\n                        $scope.$parent.toast('The channel not exist');\n                    })\n            }\n\n        }\n\n        function getUrlPoster(channel) {\n            if (channel && channel.poster && channel.poster.length) {\n                return {'background-image': 'url(' + channel.poster[0].url + ')'}\n            }\n\n            return {'background-image': 'url(/res/drawable/ph_noimage.png)'}\n        }\n\n        function _getImage() {\n            return $q((resolve, reject) => {\n                let file = document.createElement('input');\n                let maxSize = 500; //kb\n                file.type = 'file';\n                file.click();\n\n                file.addEventListener('change', function () {\n\n                    if (file.files[0].size / 1000 > maxSize) {\n                        reject(`The image can not be larger than ${maxSize}kb`)\n                    }\n\n                    let reader = new FileReader();\n\n                    reader.onloadend = function () {\n                        resolve(reader.result)\n                    };\n\n                    reader.readAsDataURL(file.files[0]);\n                })\n            })\n        }\n\n        function uploadImage() {\n            _getImage().then((img) => {\n                $scope.channelData.poster = [{\n                    update: true,\n                    url: img\n                }];\n            }).catch((error) => {\n                $scope.$parent.toast(error);\n            })\n        }\n\n        function checkForm() {\n\n            let {name, descriptionShort, channelEPGId, descriptionLong, poster} = $scope.channelData;\n\n            if (name !== '' && descriptionShort !== '' && channelEPGId !== '' && descriptionLong !== '' && poster.length !== 0) {\n                return true\n            }\n\n            $scope.$parent.toast(\"The fields cannot be empty\");\n\n            return false\n        }\n\n        function removeChannel() {\n\n            dialog_alert()\n                .then(() => {\n                    $location.path('/s/ott/channel');\n                })\n                .catch((error) => {\n                    $scope.$parent.toast(error.message)\n                })\n        }\n\n        function restartPush() {\n\n            let channelId = $routeParams.id;\n            $scope.loading = true;\n            $NxApi.channels.restartPush({id: channelId})\n                .then(() => {\n                    $scope.$parent.toast(\"Channel push restarted.\");\n                    $scope.loading = false;\n                })\n                .catch(() => {\n                    $scope.$parent.toast(\"Something happened. Channel push couldn't be restart.\");\n                    $scope.loading = false;\n                })\n\n        }\n\n        function dialog_alert() {\n\n            let title = 'Remove Channel';\n            let description = 'You are sure to delete the current Channel?';\n            let templateUrl = \"/res/layout/dialog_alert.html\";\n            let channelId = $routeParams.id;\n\n            return $q((resolve, reject) => {\n\n                let dialog = {\n                    templateUrl: templateUrl,\n                    parent: angular.element(document.body),\n                    escapeToClose: true,\n                    clickOutsideToClose: true,\n                    controller: dialogController\n                };\n\n                $mdDialog.show(dialog).then(resolve, reject);\n\n                function dialogController($scope, $mdDialog, $location) {\n\n                    $scope.title = title;\n                    $scope.description = description;\n                    $scope.channelId = channelId;\n                    $scope.loading = false;\n\n                    $scope.cancel = cancel;\n                    $scope.ok = ok;\n\n                    function init() {\n\n                    }\n\n                    function cancel() {\n                        $mdDialog.cancel();\n                    }\n\n                    function ok() {\n                        $scope.loading = true;\n                        $NxApi.channels\n                            .delete({\n                                _id: channelId\n                            })\n                            .then(() => {\n                                $mdDialog.hide();\n                            })\n                            .catch((error) => {\n                                $mdDialog.cancel(error);\n                                $scope.loading = false;\n                            })\n\n                    }\n\n                    init();\n                }\n\n            });\n\n        }\n\n        function updateChannel() {\n            if (checkForm()) {\n\n                $scope.loading = true;\n\n                if ($scope.isNew) {\n\n                    $NxApi.channels\n                        .create($scope.channelData)\n                        .then(() => {\n                            $scope.$parent.toast('The channel was created');\n                            $scope.loading = false;\n                            $location.path(\"/s/ott/channel\");\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.$parent.toast(error.message);\n                            $scope.loading = false;\n                        })\n\n                } else {\n                    $NxApi.channels\n                        .update($scope.channelData)\n                        .then(() => {\n                            $scope.$parent.toast('Channel updated');\n                            $scope.loading = false;\n                            if ($scope.channelData.poster) $scope.channelData.poster.update = false;\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.$parent.toast(error.message);\n                            $scope.loading = false;\n\n                        })\n\n                }\n\n            }\n        }\n\n        $NxApi.setAfterLogin(init);\n\n\n    }\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttConfigCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', function ($scope, $NxApi, $mdToast, $location) {\n\n            $scope.ottConfigurations = {};\n\n            $scope.save = save;\n\n            function save() {\n                $scope.loading = true;\n\n                $NxApi.ottConfigurations.update($scope.ottConfigurations).then(data => {\n\n                    $scope.loading = false;\n                    $scope.$parent.toast('The OTT Configurations was update');\n                }).catch((error) => {\n                    console.log(error);\n                    $scope.$parent.toast(error.message);\n                    $scope.loading = false;\n\n                })\n            }\n\n            function init() {\n\n                $NxApi.ottConfigurations.read().then(({ottConfigurations}) => {\n                    $scope.ottConfigurations = ottConfigurations;\n                })\n\n            }\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttEPGMonitorCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', function ($scope, $NxApi, $mdToast, $location) {\n\n            $scope.channels = [];\n            $scope.programmes = [];\n            $scope.loading = true;\n            $scope.order = 'channelEPGId';\n\n            $scope.sortBy = sortBy;\n            $scope.getIconChannel = getIconChannel;\n\n            function init() {\n\n                $NxApi.programmes.read({}).then((programmes) => {\n\n                    $scope.programmes = programmes;\n\n                    $NxApi.programmes.channels({}).then((channelsEPGId) => {\n\n                        $NxApi.channels.read({channelEPGId: channelsEPGId}).then((channels) => {\n\n                            $scope.channels = channels;\n                            $scope.loading = false;\n                        })\n                    });\n                })\n\n            }\n\n            function sortBy(order){\n                $scope.order = order;\n            }\n\n            function getIconChannel(channelEPGId) {\n                let value = '/res/drawable/ph_noimage.png';\n                let out = false;\n                for (let channel of $scope.channels) {\n\n                    if (out) break;\n\n                    if (channelEPGId === parseInt(channel.channelEPGId)) {\n                        out = true;\n                        value = channel.poster[0].url;\n                    }\n                }\n\n                return value\n            }\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sPrivateCloudCtrl\", ['$scope', '$interval', '$NxApi', '$location', '$routeParams'\n            , function ($scope, $interval, $NxApi, $location, $routeParams) {\n\n                $scope.loading = true;\n                $scope.privateCloudConfig = {};\n\n                $scope.entryPointItems = entryPointItems;\n                $scope.transcoderItems = transcoderItems;\n                $scope.edgeserverItems = edgeserverItems;\n                $scope.packagerItems = packagerItems;\n                $scope.openServer = openServer;\n\n                function init() {\n\n                    $NxApi.privateCloud\n                        .getConfig()\n                        .then((privateCloudConfig) => {\n                            $scope.privateCloudConfig = privateCloudConfig;\n                        })\n                        .catch((error) => {\n\n                        })\n\n\n                }\n\n                function entryPointItems(server) {\n\n                    if (!server) return [];\n\n                    if (typeof server.resumeItems === \"undefined\") {\n                        server.resumeItems = [];\n\n                        server.loading = true;\n\n                        $NxApi.privateCloud\n                            .getEntrypointCondition(server.ip)\n                            .then((privateCloudConfig) => {\n\n\n                                server.loading = false;\n                                server.resumeItems = [\n                                    {\n                                        label: \"Up Time\",\n                                        data: formatUptime(privateCloudConfig.serverStats.uptime.uptime)\n                                    },\n                                    {\n                                        label: \"Incoming Feeds\",\n                                        data: privateCloudConfig.entryPointTasks.length + \" channels\"\n                                    },\n                                    {\n                                        label: \"CPU Load\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"I/O Waits\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"Disk Reading\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                                    },\n                                    {\n                                        label: \"Disk Writing\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                                    }\n                                ];\n                            })\n                            .catch((error) => {\n                                console.error(error);\n\n                            })\n\n                    }\n\n\n                    return server.resumeItems;\n                }\n\n                function transcoderItems(server) {\n\n                    if (!server) return [];\n\n                    if (typeof server.resumeItems === \"undefined\") {\n                        server.resumeItems = [];\n                        server.loading = true;\n\n\n                        $NxApi.privateCloud\n                            .getTranscoderCondition(server.ip)\n                            .then((privateCloudConfig) => {\n\n                                server.loading = false;\n\n                                let gpu_enc = 0,\n                                    gpu_dec = 0,\n                                    gpu_mem = 0;\n\n                                for (let task of privateCloudConfig.transcoderTasks) {\n\n                                    if (task.gpu) {\n                                        gpu_enc += task.gpu.enc;\n                                        gpu_dec += task.gpu.dec;\n                                        gpu_mem += task.gpu.fb;\n                                    }\n\n                                }\n\n                                server.resumeItems = [\n                                    {\n                                        label: \"Up Time\",\n                                        data: formatUptime(privateCloudConfig.serverStats.uptime.uptime)\n                                    },\n                                    {\n                                        label: \"Transcoding tasks\",\n                                        data: privateCloudConfig.transcoderTasks.length + \" tasks\"\n                                    },\n                                    {\n                                        label: \"CPU Load\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"GPU Encoding\",\n                                        data: Math.round(100 * gpu_enc) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"GPU Decoding\",\n                                        data: Math.round(100 * gpu_dec) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"GPU Memory\",\n                                        data: Math.round(100 * gpu_mem) / 100 + \" MB\"\n                                    },\n                                    {\n                                        label: \"I/O Waits\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"Disk Reading\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                                    },\n                                    {\n                                        label: \"Disk Writing\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                                    }\n                                ];\n                            })\n                            .catch((error) => {\n                                console.error(error);\n                            })\n\n                    }\n\n\n                    return server.resumeItems;\n                }\n\n                function edgeserverItems() {\n                    return [];\n                }\n\n                function packagerItems(server) {\n\n\n                    if (!server) return [];\n\n                    if (typeof server.resumeItems === \"undefined\") {\n                        server.resumeItems = [];\n\n                        server.loading = true;\n\n                        $NxApi.privateCloud\n                            .getPackagerCondition(server.ip)\n                            .then((privateCloudConfig) => {\n\n                                server.loading = false;\n                                server.resumeItems = [\n                                    {\n                                        label: \"Up Time\",\n                                        data: formatUptime(privateCloudConfig.serverStats.uptime.uptime)\n                                    },\n                                    {\n                                        label: \"CPU Load\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"I/O Waits\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"Disk Reading\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                                    },\n                                    {\n                                        label: \"Disk Writing\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                                    },\n                                    {\n                                        label: \"Nginx CPU Load\",\n                                        data: Math.round(100 * privateCloudConfig.packagerStats.serverStats.nginx.cpu) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"Nginx Mem\",\n                                        data: Math.round(100 * privateCloudConfig.packagerStats.serverStats.nginx.mem / 1024) / 100 + \" kB/s\"\n                                    }\n\n                                ];\n                            })\n                            .catch((error) => {\n                                console.error(error);\n\n                            })\n\n                    }\n\n                    return server.resumeItems;\n                }\n\n                function openServer(server) {\n                    $location.path(`/s/infra/private-cloud/${server.role}/${server.ip}`)\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n\n    angular.module('NxStudio')\n        .controller(\"sPrivateCloudDetailCtrl\", ['$scope', '$interval', '$NxApi', '$location', '$routeParams', '$mdDialog'\n            , function ($scope, $interval, $NxApi, $location, $routeParams, $mdDialog) {\n\n                let mServer = null;\n\n                $scope.role = $routeParams.role;\n                $scope.ip = $routeParams.ip;\n                $scope.privateCloudConfig = null;\n                $scope.templateURL = null;\n                $scope.server = null;\n                $scope.channels = [];\n\n                $scope.transcoderItems = transcoderItems;\n                $scope.getChannel = getChannel;\n                $scope.getTranscoder = getTranscoder;\n                $scope.getPackager = getPackager;\n                $scope.restartEntrypoint = restartEntrypoint;\n                $scope.restartTranscoder = restartTranscoder;\n                $scope.testEntrypointInput = testEntrypointInput;\n                $scope.testTxInput = testTxInput;\n                $scope.testTxStream = testTxStream;\n                $scope.openTranscoder = openTranscoder;\n                $scope.openPackager = openPackager;\n                $scope.openChannel = openChannel;\n                $scope.formatUptime = formatUptime;\n                $scope.gpuResume = gpuResume;\n\n                function init() {\n\n                    $NxApi.channels.read({}).then(channels => {\n                        $scope.channels = channels;\n                    });\n\n                    $NxApi.privateCloud\n                        .getConfig()\n                        .then((privateCloudConfig) => {\n\n                            $scope.privateCloudConfig = privateCloudConfig;\n\n                            for (let server of $scope.privateCloudConfig[$scope.role]) {\n                                if (server.ip === $scope.ip) {\n                                    $scope.server = server;\n                                    mServer = server;\n                                }\n                            }\n\n                            switch ($routeParams.role) {\n                                case \"entrypoint\": {\n                                    $NxApi.privateCloud.getEntrypointCondition($routeParams.ip).then(initEntrypoint);\n                                    break;\n                                }\n\n                                case \"transcoder\": {\n                                    $NxApi.privateCloud.getTranscoderCondition($routeParams.ip).then(initTranscoder);\n                                    break;\n                                }\n\n                                case \"packager\": {\n                                    $NxApi.privateCloud.getPackagerCondition($routeParams.ip).then(initPackager);\n                                    break;\n                                }\n\n                                case \"edgeserver\": {\n                                    $NxApi.privateCloud.getEdgeserverCondition($routeParams.ip).then(initEdgeserver);\n                                    break;\n                                }\n                            }\n\n                        })\n                        .catch((error) => {\n\n                        })\n\n\n                }\n\n                function getChannel(hash) {\n                    for (let channel of $scope.channels) {\n                        if (channel.entryPoint.streamKey === hash || channel.publishing[0].streamName === hash) {\n                            return channel;\n                        }\n                    }\n                    return null\n                }\n\n                function getTranscoder(ip) {\n                    for (let t of $scope.privateCloudConfig.transcoder) {\n                        if (t.ip === ip || t.ip2 === ip)\n                            return t;\n                    }\n                    return null;\n                }\n\n                function getPackager(ip) {\n                    for (let t of $scope.privateCloudConfig.packager) {\n                        if (t.ip === ip || t.ip2 === ip)\n                            return t;\n                    }\n                    return null;\n                }\n\n                function getEntrypoint(ip) {\n                    for (let t of $scope.privateCloudConfig.entrypoint) {\n                        if (t.ip === ip || t.ip2 === ip)\n                            return t;\n                    }\n                    return null;\n                }\n\n                function transcoderItems() {\n                    if ($scope.server && $scope.server.resumeItems) {\n                        return $scope.server.resumeItems;\n                    } else {\n                        return [];\n                    }\n                }\n\n                function restartEntrypoint(task, $event) {\n                    let confirm = $mdDialog.confirm()\n                        .title(`Restarting ${getChannel(task.inStream).name}.`)\n                        .textContent(`Confirm you want to restart de connection between the \n                        Entrypoint and the Transcoder for the channel ${getChannel(task.inStream).name}.`)\n                        .ariaLabel('Restarting Entrypoint')\n                        .targetEvent($event)\n                        .ok('Restart Connection')\n                        .cancel('Cancel');\n\n                    $mdDialog.show(confirm).then(function () {\n\n\n                        $NxApi.privateCloud.killPid({\n                            role: \"entrypoint\",\n                            ip: mServer.ip,\n                            pid: task.pid\n                        }).then(result => {\n                            console.log(result);\n                            init();\n                        })\n\n\n                    }, function () {\n\n                    });\n                }\n\n                function restartTranscoder(task, $event) {\n                    let confirm = $mdDialog.confirm()\n                        .title(`Restarting ${getChannel(task.hash).name}.`)\n                        .textContent(`Confirm you want to restart de connection between the \n                        Entrypoint and the Transcoder for the channel ${getChannel(task.hash).name}.`)\n                        .ariaLabel('Restarting Entrypoint')\n                        .targetEvent($event)\n                        .ok('Restart Connection')\n                        .cancel('Cancel');\n\n                    $mdDialog.show(confirm).then(function () {\n\n\n                        $NxApi.privateCloud.killPid({\n                            role: \"transcoder\",\n                            ip: mServer.ip,\n                            pid: task.pid\n                        }).then(result => {\n                            console.log(result);\n                            init();\n                        })\n\n\n                    }, function () {\n\n                    });\n                }\n\n                function initEntrypoint(serverCondition) {\n                    $scope.templateURL = \"/res/layout/view_s_private_cloud_entrypoint.html\";\n\n                    $scope.serverCondition = serverCondition;\n\n                    $scope.server.resumeItems = [\n                        {\n                            label: \"Up Time\",\n                            data: formatUptime(serverCondition.serverStats.uptime.uptime)\n                        },\n                        {\n                            label: \"Incoming Feeds\",\n                            data: serverCondition.entryPointTasks.length + \" channels\"\n                        },\n                        {\n                            label: \"CPU Load\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                        },\n                        {\n                            label: \"I/O Waits\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                        },\n                        {\n                            label: \"Disk Reading\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                        },\n                        {\n                            label: \"Disk Writing\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                        }\n                    ];\n\n                }\n\n                function initTranscoder(serverCondition) {\n                    $scope.templateURL = \"/res/layout/view_s_private_cloud_transcoder.html\";\n\n                    $scope.serverCondition = serverCondition;\n\n                    let gpu_enc = 0,\n                        gpu_dec = 0,\n                        gpu_mem = 0;\n\n                    for (let task of serverCondition.transcoderTasks) {\n\n                        if (task.gpu) {\n                            gpu_enc += task.gpu.enc;\n                            gpu_dec += task.gpu.dec;\n                            gpu_mem += task.gpu.fb;\n                        }\n\n                    }\n\n                    $scope.server.resumeItems = [\n                        {\n                            label: \"Up Time\",\n                            data: formatUptime(serverCondition.serverStats.uptime.uptime)\n                        },\n                        {\n                            label: \"Transcoding tasks\",\n                            data: serverCondition.transcoderTasks.length + \" tasks\"\n                        },\n                        {\n                            label: \"CPU Load\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                        },\n                        {\n                            label: \"GPU Encoding\",\n                            data: Math.round(100 * gpu_enc) / 100 + \" %\"\n                        },\n                        {\n                            label: \"GPU Decoding\",\n                            data: Math.round(100 * gpu_dec) / 100 + \" %\"\n                        },\n                        {\n                            label: \"GPU Memory\",\n                            data: Math.round(100 * gpu_mem) / 100 + \" MB\"\n                        },\n                        {\n                            label: \"I/O Waits\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                        },\n                        {\n                            label: \"Disk Reading\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                        },\n                        {\n                            label: \"Disk Writing\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                        }\n                    ];\n                }\n\n                function initPackager(serverCondition) {\n                    $scope.templateURL = \"/res/layout/view_s_private_cloud_packager.html\";\n\n                    $scope.serverCondition = serverCondition;\n\n                    $scope.server.resumeItems = [\n                        {\n                            label: \"Up Time\",\n                            data: formatUptime(serverCondition.serverStats.uptime.uptime)\n                        },\n                        {\n                            label: \"CPU Load\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                        },\n                        {\n                            label: \"I/O Waits\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                        },\n                        {\n                            label: \"Disk Reading\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                        },\n                        {\n                            label: \"Disk Writing\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                        },\n                        {\n                            label: \"Nginx CPU Load\",\n                            data: Math.round(100 * serverCondition.packagerStats.serverStats.nginx.cpu) / 100 + \" %\"\n                        },\n                        {\n                            label: \"Nginx Mem\",\n                            data: Math.round(100 * serverCondition.packagerStats.serverStats.nginx.mem / 1024) / 100 + \" kB/s\"\n                        }\n                    ];\n                }\n\n                function initEdgeserver(serverCondition) {\n\n                }\n\n                function openTranscoder(task) {\n                    $location.path(`s/infra/private-cloud/transcoder/${getTranscoder(task.targetServer).ip}`)\n                }\n\n                function openPackager(task) {\n                    $location.path(`s/infra/private-cloud/packager/${getPackager(task.target.server).ip}`)\n                }\n\n                function openChannel(task) {\n                    if (task.hash) {\n                        $location.path(`s/ott/channel/${getChannel(task.hash)._id}`)\n\n                    } else {\n                        $location.path(`s/ott/channel/${getChannel(task.inStream)._id}`)\n                    }\n                }\n\n                function testTxInput(task, event) {\n\n                    streamingTestDialog({\n                        protocol: \"rtmp\",\n                        host: getTranscoder(task.targetServer).ip,\n                        port: task.targetPort,\n                        app: task.targetApp,\n                        streamname: task.outStream\n                    }, task, event)\n                }\n\n                function testTxStream(task, event) {\n\n                    console.log(task);\n\n                    let streams = [];\n\n                    let targetServer = getPackager(task.target.server).ip;\n\n                    for (let o of  task.target.outs) {\n                        streams.push({\n                            protocol: \"rtmp\",\n                            host: targetServer,\n                            port: task.target.port,\n                            app: task.target.app,\n                            streamname: o.stream\n                        })\n                    }\n\n                    streamingTestDialog(streams, task, event)\n                }\n\n                function testEntrypointInput(task, event) {\n\n                    streamingTestDialog({\n                        protocol: \"rtmp\",\n                        host: mServer.ip,\n                        port: task.sourcePort,\n                        app: task.sourceApp,\n                        streamname: task.inStream\n                    }, task, event);\n                }\n\n                function streamingTestDialog(pSource, task, event) {\n\n                    let source;\n\n                    if (Array.isArray(pSource)) {\n                        source = pSource[0];\n                    } else {\n                        source = pSource;\n                    }\n\n                    let dialog = {\n                        controller: DialogController,\n                        templateUrl: \"/res/layout/dialog_private_cloud_stream_inspector.html\",\n                        target: event,\n                        clickOutsideToClose: true\n                    };\n\n                    $mdDialog.show(dialog);\n\n                    function DialogController($scope) {\n\n                        let protocol = source.protocol,\n                            host = source.host,\n                            port = source.port,\n                            app = source.app,\n                            streamname = source.streamname;\n\n                        $scope.busy = false;\n\n                        $scope.rtmpTestingSource = `${protocol}://${host}:${port}/${app}/${streamname}`;\n\n                        $scope.doMediaInfo = doMediaInfo;\n                        $scope.doSnapshot = doSnapshot;\n                        $scope.doPlayback = doPlayback;\n\n                        function doPlayback() {\n                            let element = document.getElementById(\"dialog-result-display\");\n\n                            let serverPart = `rtmp://${source.host}/${source.app}`,\n                                streamname = source.streamname;\n\n                            element.innerHTML = `<object type=\"application/x-shockwave-flash\" id=\"VideoPlayer\" data=\"/lib/JarisFLVPlayer.swf\" width=\"640px\" height=\"360px\"><param name=\"menu\" value=\"false\"><param name=\"scale\" value=\"noScale\"><param name=\"allowFullscreen\" value=\"true\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"bgcolor\" value=\"#000000\"><param name=\"quality\" value=\"high\"><param name=\"wmode\" value=\"opaque\"><param name=\"flashvars\" value=\"source=${streamname}&amp;type=video&amp;streamtype=rtmp&amp;controltype=1&amp;duration=3600&amp;aspectratio=auto&amp;autostart=true&amp;hardwarescaling=true&amp;controls=true&amp;darkcolor=000000&amp;brightcolor=4c4c4c&amp;controlcolor=FFFFFF&amp;hovercolor=67A8C1&amp;seekcolor=D3D3D3&amp;jsapi=flase&amp;server=${serverPart}\"></object>`\n\n                        }\n\n                        function doSnapshot() {\n\n                            let element = document.getElementById(\"dialog-result-display\");\n\n                            let video = document.createElement(\"video\");\n\n                            let id = (Date.now()).toString(32);\n\n                            element.innerHTML = \"\";\n\n                            console.log(`http://200.2.125.60:10888/api/snapshot/${encodeURIComponent($scope.rtmpTestingSource)}/play.mp4`);\n\n                            video.id = id;\n                            video.controls = \"true\";\n                            video.autoplay = \"true\";\n                            video.className = \"video-js vjs-default-skin vjs-big-play-centered video-container\";\n                            video.src = `http://200.2.125.60:10888/api/snapshot/${encodeURIComponent($scope.rtmpTestingSource)}/play.mp4`;\n\n                            element.append(video)\n\n                            videojs(id);\n\n                        }\n\n                        function doMediaInfo() {\n                            let element = document.getElementById(\"dialog-result-display\");\n\n                            $scope.busy = true;\n                            $NxApi.privateCloud.mediainfo($scope.rtmpTestingSource, \"text\").then(response => {\n                                    $scope.busy = false;\n                                    let pre = document.createElement(\"pre\");\n\n                                    pre.innerText = response.text;\n                                    pre.style.background = \"#353535\";\n                                    pre.style.color = \"#ddd\";\n                                    pre.style.fontWeight = \"800\";\n                                    pre.style.padding = \"#10px\";\n                                    pre.style.borderRadius = \"5px\";\n\n                                    element.innerHTML = \"\";\n                                    element.style.display = \"block\";\n                                    element.appendChild(pre);\n                                }\n                            )\n\n                        }\n\n                    }\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n\n    function gpuResume(task) {\n        if (task.gpu) {\n            return `${Math.round(10 * task.gpu.dec) / 10}%, ${Math.round(10 * task.gpu.enc) / 10}%, ${Math.round(task.gpu.mem * 10) / 10}%`;\n        } else {\n            return \"-\";\n        }\n    }\n\n    function formatUptime(timeInSec) {\n\n        let str = \"\";\n        let rst = timeInSec;\n\n        const DAY = 86400;\n        const HOUR = 3600;\n        const MINUTE = 60;\n\n        if (rst > DAY) {\n            str += Math.floor(rst / DAY) + \"d \";\n            rst -= Math.floor(rst / DAY) * DAY\n        }\n\n        if (rst > HOUR) {\n            str += Math.floor(rst / HOUR) + \"h \";\n            rst -= Math.floor(rst / HOUR) * HOUR\n        }\n\n        if (rst > MINUTE) {\n            str += Math.floor(rst / MINUTE) + \"m\";\n            rst -= Math.floor(rst / MINUTE) * MINUTE\n        }\n\n\n        return str;\n\n    }\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttProductsCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location','$q','$mdDialog',\n                function ($scope, $NxApi, $mdToast, $location,$q,$mdDialog) {\n\n            $scope.products = [];\n            $scope.loading = true;\n\n            $scope.details = details;\n            $scope.shortDescription = shortDescription;\n            $scope.remove = remove;\n\n            function init() {\n                _updateTable();\n\n            }\n\n            function details(product) {\n                $location.path('/s/ott/products/' + product._id)\n            }\n\n            function shortDescription(text){\n                return typeof text !== 'undefined' ? text.substring(0,20) + \"...\"  : '';\n            }\n\n            function dialog_alert(product) {\n\n                let title = 'Remove package';\n                let description = 'You are sure to delete the selected package?';\n                let templateUrl = \"/res/layout/dialog_alert.html\";\n                let productId = product._id;\n\n                return $q((resolve, reject) => {\n\n                    let dialog = {\n                        templateUrl: templateUrl,\n                        parent: angular.element(document.body),\n                        escapeToClose: true,\n                        clickOutsideToClose: true,\n                        controller: dialogController\n                    };\n\n                    $mdDialog.show(dialog).then(resolve, reject);\n\n                    function dialogController($scope, $mdDialog) {\n\n                        $scope.title = title;\n                        $scope.description = description;\n                        $scope.productId = productId;\n                        $scope.loading = false;\n\n                        $scope.cancel = cancel;\n                        $scope.ok = ok;\n\n                        function init() {\n\n                        }\n\n                        function cancel() {\n                            $mdDialog.cancel();\n                        }\n\n                        function ok() {\n                            $scope.loading = true;\n                            $NxApi.products\n                                .delete({\n                                    _id: productId\n                                })\n                                .then(() => {\n                                    $scope.loading = false;\n                                    $mdDialog.hide();\n\n\n                                })\n                                .catch((error) => {\n                                    console.log(error);\n                                    $scope.loading = false;\n                                })\n\n                        }\n\n                        init();\n                    }\n\n                });\n\n            }\n\n            function remove(product){\n                dialog_alert(product).then(()=>{\n                    $scope.$parent.toast('Package removed');\n                    _updateTable();\n                })\n            }\n\n            function _updateTable(){\n                $scope.loading = true;\n                $NxApi.products.read({}).then((products) => {\n                    $scope.products = products;\n\n                    for(let i=0;i<products.length;i++){\n\n                        let product = products[i];\n\n                        $NxApi.channels.read({\n                            _id:product.channels\n                        }).then((channels) => {\n                            product.channels = channels;\n                            $scope.loading = false;\n                        });\n                    }\n\n                });\n            }\n\n            $NxApi.setAfterLogin(init);\n\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttProductsDetailCtrl\",\n            ['$scope', '$interval', '$routeParams', '$NxApi', '$NxDialogs','$location','$q','$mdDialog', controller]);\n\n\n    function controller($scope, $interval, $routeParams, $NxApi, $NxDialogs, $location,$q,$mdDialog) {\n\n        $scope.isNew = $routeParams.id === \"new\";\n\n        $scope.productData = {\n            name:'',\n            description:'',\n            channels: [],\n            notes:''\n        };\n\n        $scope.addChannel = addChannel;\n        $scope.clearAllChannels = clearAllChannels;\n        $scope.removeChannel = removeChannel;\n        $scope.update = update;\n        $scope.remove = remove;\n\n        function init() {\n            if(!$scope.isNew){\n                $NxApi.products.read({\n                    _id:$routeParams.id\n                }).then((products)=>{\n\n                    let product = products[0];\n\n                    $NxApi.channels.read({\n                        _id:product.channels\n                    }).then((channels)=>{\n\n                        $scope.productData = {\n                            id: product._id,\n                            name: product.name,\n                            description:product.description,\n                            notes:product.notes,\n                            channels: channels\n                        };\n\n                    });\n\n\n\n\n                });\n            }\n\n\n        }\n\n        function addChannel() {\n            $NxDialogs.showChannelSelector().then((channel) => {\n                for (let item of $scope.productData.channels) {\n                    if (item._id === channel._id) {\n                        return;\n                    }\n                }\n\n                $scope.productData.channels.push(channel);\n            })\n        }\n\n        function clearAllChannels() {\n            $scope.productData.channels = [];\n        }\n\n        function removeChannel(channel) {\n\n            console.log(channel);\n\n            for (let i in $scope.productData.channels) {\n\n                let item = $scope.productData.channels[i];\n\n                if (item._id === channel._id) {\n                    $scope.productData.channels.splice(i, 1);\n                }\n            }\n        }\n\n        function update(){\n\n            if(_checkFields()){\n\n                if($scope.isNew){\n                    $scope.loading = true;\n                    $NxApi.products.create({\n                        ...$scope.productData,\n                        channels:$scope.productData.channels.map((item)=>item._id)\n                    }).then(()=>{\n                        $scope.$parent.toast('The product was created');\n                        $scope.loading = false;\n                        $location.path(\"/s/ott/products\");\n                    }).catch((error) => {\n                        console.log(error);\n                        $scope.$parent.toast(error.message);\n                        $scope.loading = false;\n\n                    });\n                }else{\n                    $scope.productData[\"_id\"] = $routeParams.id;\n                    $scope.loading = true;\n                    $NxApi.products.update({\n                        ...$scope.productData,\n                        channels:$scope.productData.channels.map((item)=>item._id)\n                    }).then(()=>{\n                        $scope.$parent.toast('The product was update');\n                        $scope.loading = false;\n\n                    }).catch((error) => {\n                        console.log(error);\n                        $scope.$parent.toast(error.message);\n                        $scope.loading = false;\n\n                    });\n                }\n\n            }else{\n                $scope.$parent.toast(\"The fields cannot be empty\");\n            }\n\n        }\n\n        function dialog_alert() {\n\n            let title = 'Remove package';\n            let description = 'You are sure to delete the selected package?';\n            let templateUrl = \"/res/layout/dialog_alert.html\";\n            let productId = $routeParams.id;\n\n            return $q((resolve, reject) => {\n\n                let dialog = {\n                    templateUrl: templateUrl,\n                    parent: angular.element(document.body),\n                    escapeToClose: true,\n                    clickOutsideToClose: true,\n                    controller: dialogController\n                };\n\n                $mdDialog.show(dialog).then(resolve, reject);\n\n                function dialogController($scope, $mdDialog) {\n\n                    $scope.title = title;\n                    $scope.description = description;\n                    $scope.productId = productId;\n                    $scope.loading = false;\n\n                    $scope.cancel = cancel;\n                    $scope.ok = ok;\n\n                    function init() {\n\n                    }\n\n                    function cancel() {\n                        $mdDialog.cancel();\n                    }\n\n                    function ok() {\n                        $scope.loading = true;\n                        $NxApi.products\n                            .delete({\n                                _id: productId\n                            })\n                            .then(() => {\n                                $scope.loading = false;\n                                $mdDialog.hide();\n\n\n                            })\n                            .catch((error) => {\n                                console.log(error);\n                                $mdDialog.cancel(error);\n                                $scope.loading = false;\n                            })\n\n                    }\n\n                    init();\n                }\n\n            });\n\n        }\n\n        function remove(){\n\n            dialog_alert().then(()=>{\n                $scope.$parent.toast('Package removed');\n                $scope.loading = false;\n                $mdDialog.hide();\n                $location.path('/s/ott/products');\n            }).catch((error) => {\n                console.log(error);\n                $scope.$parent.toast(error.message);\n                $scope.loading = false;\n\n            });\n        }\n\n        function _checkFields(){\n            return $scope.productData.name !== '' && $scope.productData.description !== '' && $scope.productData.channels.length !== 0\n        }\n\n        $NxApi.setAfterLogin(init);\n\n    }\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttSubscribersCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', '$timeout',\n            function ($scope, $NxApi, $mdToast, $location, $timeout) {\n\n                $scope.subscribers = {\n                    getItemAtIndex: function (i) {\n                        return null;\n                    },\n                    getLength: function () {\n                        return 0;\n                    }\n                };\n\n                $scope.sortedBy = sortedBy;\n                $scope.sortBy = sortBy;\n\n                let sortVars = {\n                    by: \"id\",\n                    order: 1\n                };\n\n                let subscribers = [];\n                let products = [];\n\n                $scope.loading = true;\n                $scope.details = details;\n\n                $scope.productName = function (id) {\n                    return products.find(element => element._id === id).name;\n                };\n\n                function init() {\n\n                    $NxApi.products.read({}).then((result) => {\n                        products = result;\n                    });\n\n                    $NxApi.subscribers.read().then((data) => {\n\n                        subscribers = data.subscribers;\n\n\n                        sortSubscribers();\n\n                        $scope.subscribers = {\n                            getItemAtIndex: function (i) {\n                                return subscribers[i];\n                            },\n                            getLength: function () {\n                                return subscribers.length;\n                            }\n                        };\n\n                        $scope.$watch(\"search\", (newValue) => {\n                            if(!newValue || newValue === \"\"){\n                                subscribers = data.subscribers;\n                            }else{\n                                subscribers = [];\n\n                                for(let subscriber of data.subscribers){\n\n                                    if( subscriber.cid.toString().includes(newValue) ||\n                                        subscriber.email.toLowerCase().includes(newValue.toLowerCase())){\n                                        subscribers.push(subscriber)\n                                    }\n\n                                }\n\n                            }\n                        });\n\n                        $scope.loading = false;\n\n                    }).catch((e) => {\n                        console.error(e);\n                    })\n                }\n\n                function details(subscriber) {\n                    $location.path('/s/ott/subscribers/' + subscriber._id)\n                }\n\n                function sortedBy(field, order) {\n                    return order === sortVars.order && field === sortVars.by;\n                }\n\n                function sortBy(field){\n\n                    if(sortVars.by === field){\n                        sortVars.order = (sortVars.order + 1) % 2; // Toggle\n                    }else{\n                        sortVars.by = field;\n                        sortVars.order = 0;\n                    }\n\n                    sortSubscribers();\n\n                }\n\n                function sortSubscribers(){\n                    let field = sortVars.by;\n                    switch (field) {\n                        case \"id\":{\n                            subscribers.sort((a,b)=>{\n                                if(sortVars.order === 0){\n                                    return a._id > b._id?1:-1\n                                }else{\n                                    return a._id < b._id?1:-1\n                                }\n                            });\n                            break;\n                        }\n                        case \"packages\":{\n                            break;\n                        }\n                        case \"email\":{\n                            subscribers.sort((a,b)=>{\n                                if(sortVars.order === 0){\n                                    return a.email > b.email?1:-1\n                                }else{\n                                    return a.email < b.email?1:-1\n                                }\n                            });\n                            break;\n                        }\n                        case \"creationd\":{\n                            subscribers.sort((a,b)=>{\n                                if(sortVars.order === 0){\n                                    return a.creationDate > b.creationDate?1:-1\n                                }else{\n                                    return a.creationDate < b.creationDate?1:-1\n                                }\n                            });\n                            break;\n                        }\n                        case \"lastud\":{\n                            subscribers.sort((a,b)=>{\n                                if(sortVars.order === 0){\n                                    return a.lastUpdate > b.lastUpdate?1:-1\n                                }else{\n                                    return a.lastUpdate < b.lastUpdate?1:-1\n                                }\n                            });\n                            break;\n                        }\n                        case \"detail\":{\n                        }\n                    }\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttSubscribersDetailCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location', '$routeParams','$timeout',\n                function ($scope, $NxApi, $mdToast, $location, $routeParams,$timeout) {\n\n                    $scope.menssage = '';\n                    $scope.loading = false;\n                    $scope.promise = null;\n\n                    $scope.checkPassword = checkPassword;\n\n                    function init() {\n\n                        let subscriberId = $routeParams.id;\n\n                        $NxApi.subscribers.read({\n                            id: subscriberId,\n                            includeUpdateHistory: true\n                        }).then(({subscribers}) => {\n                            $scope.subscriber = subscribers[0];\n\n\n                            $NxApi.products.read({\n                                _id:$scope.subscriber.products\n                            }).then((products)=>{\n                                $scope.subscriber.products = products;\n                            })\n\n\n                        }).catch((e) => {\n                            console.error(e);\n                        })\n\n                    }\n\n                    function checkPassword() {\n                        $scope.menssage = '';\n                        $scope.loading = true;\n                        $NxApi.subscribers.checkSubscriberCredentials({\n                            email: $scope.subscriber.email,\n                            password: $scope.password\n                        }).then((data) => {\n                            $scope.menssage = data;\n                            $scope.backgroundAlert = {\n                                background: '#c9ffc9'\n                            };\n                            $timeout.cancel($scope.promise);\n                            $scope.promise = $timeout(()=>$scope.menssage = '',3000);\n\n                        }).catch((error) => {\n                            $scope.menssage = error;\n                            $timeout.cancel($scope.promise);\n                            $scope.promise = $timeout(()=>$scope.menssage = '',3000);\n                            $scope.backgroundAlert = {\n                                background: 'tomato'\n                            };\n                        }).finally(()=>{\n                            $scope.loading = false;\n                        })\n                    }\n\n                    $NxApi.setAfterLogin(init);\n\n                }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sUserProfileCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', '$q', '$mdDialog', function ($scope, $NxApi, $mdToast, $location, $q, $mdDialog) {\n\n            $scope.userData = {};\n            $scope.loading = false;\n\n            $scope.updateUser = updateUser;\n            $scope.uploadImage = uploadImage;\n            $scope.dialog_changePassword = dialog_changePassword;\n\n\n            function init() {\n\n                let user = $NxApi.getUser();\n\n                if (user) {\n                    $scope.userData = {\n                        _id: user._id,\n                        firstName: user.firstName,\n                        lastName: user.lastName,\n                        email: user.email,\n                        account: user.account,\n                        photo: {\n                            url: user && user.photo && user.photo.url ? user.photo.url : \"/res/drawable/ph_user.jpg\",\n                            update: false\n                        }\n                    };\n                }\n\n\n            }\n\n            function checkForm() {\n\n                let {firstName, lastName} = $scope.userData;\n\n                if (firstName !== '' && lastName !== '') {\n                    return true\n                }\n\n                toast(\"The fields cannot be empty\");\n\n                return false\n            }\n\n            function toast(msg) {\n                $mdToast.show(\n                    $mdToast.simple()\n                        .textContent(msg)\n                        .hideDelay(5000))\n                    .then(function () {\n                    }).catch(function () {\n                });\n            }\n\n            function updateUser() {\n\n                if (checkForm()) {\n\n                    let data = {\n                        _id: $scope.userData._id,\n                        firstName: $scope.userData.firstName,\n                        lastName: $scope.userData.lastName,\n                        photo: $scope.userData.photo\n                    };\n\n                    $scope.loading = true;\n\n                    $NxApi.users\n                        .update(data)\n                        .then(() => {\n                            toast('The user was update');\n                            $scope.loading = false;\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.loading = false;\n                        })\n                }\n\n            }\n\n            function _getImage() {\n                return $q((resolve, reject) => {\n                    let file = document.createElement('input');\n                    let maxSize = 500; //kb\n                    file.type = 'file';\n                    file.click();\n\n                    file.addEventListener('change', function () {\n\n                        if (file.files[0].size / 1000 > maxSize) {\n                            reject(`The image can not be larger than ${maxSize}kb`)\n                        }\n\n                        let reader = new FileReader();\n\n                        reader.onloadend = function () {\n                            resolve(reader.result)\n                        };\n\n                        reader.readAsDataURL(file.files[0]);\n                    })\n                })\n            }\n\n            function uploadImage() {\n                _getImage().then((img) => {\n                    $scope.userData.photo.update = true;\n                    $scope.userData.photo.url = img;\n                }).catch((error) => {\n                    toast(error);\n                })\n            }\n\n            function dialog_changePassword() {\n\n                let title = 'Change Password';\n                let templateUrl = \"/res/layout/dialog_change_password.html\";\n                let userId = $scope.userData._id;\n\n                return $q((resolve, reject) => {\n\n                    let dialog = {\n                        templateUrl: templateUrl,\n                        parent: angular.element(document.body),\n                        escapeToClose: true,\n                        clickOutsideToClose: true,\n                        controller: dialogController\n                    };\n\n                    $mdDialog.show(dialog).then(resolve, reject);\n\n                    function dialogController($scope, $mdDialog) {\n\n                        $scope.title = title;\n                        $scope.userId = userId;\n                        $scope.newPassword = '';\n                        $scope.newPasswordVerify = '';\n                        $scope.loading = false;\n\n                        $scope.cancel = cancel;\n                        $scope.save = save;\n                        $scope.verifyPassword = verifyPassword;\n\n                        function init() {\n\n                        }\n\n                        function cancel() {\n                            $mdDialog.cancel();\n                        }\n\n                        function verifyPassword() {\n\n                            return ($scope.newPassword === '' && $scope.newPasswordVerify === '') || $scope.newPassword !== $scope.newPasswordVerify\n                        }\n\n                        function save() {\n                            $scope.loading = true;\n                            $NxApi.users\n                                .update({\n                                    _id: userId,\n                                    password: $scope.newPassword\n                                })\n                                .then(() => {\n                                    toast('The password was update');\n                                    $scope.loading = false;\n                                    $mdDialog.hide();\n\n                                })\n                                .catch((error) => {\n                                    console.log(error);\n                                    $scope.loading = false;\n                                })\n\n                        }\n\n                        init();\n                    }\n\n                });\n\n            }\n\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","(function () {\n    angular.module('NxStudio')\n        .directive(\"nxChannel\", function () {\n            return {\n                restrict: 'E',\n                require: '?ngModel',\n                templateUrl: \"/res/layout/directive_channel.html\",\n                link: link,\n                controller: [\"$scope\", controller]\n            }\n        });\n\n\n    function link(scope, element, attributes, ngModel) {\n\n        scope.channel = scope.item;\n\n        let chart_data = [];\n        let char_labels = [];\n\n        for(let i in scope.channel.stats){\n            chart_data.push(scope.channel.stats[i].concurrency);\n            char_labels.push(scope.channel.stats[i].timestamp);\n        }\n\n        let ctx = element[0].getElementsByTagName(\"canvas\")[0];\n        ctx.height = 100;\n        let myBarChart = new Chart(ctx, {\n            \"type\": \"bar\",\n            \"data\": {\n                \"labels\": char_labels,\n                \"datasets\": [\n                    {\n                        \"label\": \"Concurrency\",\n                        \"data\": chart_data,\n                        \"fill\": true,\n                        \"backgroundColor\": '#42516E',\n                        \"borderWidth\": 0\n                    }]\n            },\n            \"options\": {\n                layout: {\n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0\n                    }\n                },\n                legend: {\n                    display: false,\n                    labels: {\n                        fontColor: 'rgb(255, 99, 132)'\n                    }\n                },\n                title: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false,\n                    display: false,\n                },\n                scales: {\n                    xAxes: [{\n                        stacked: true,\n                        display: false,\n                    }],\n                    yAxes: [{\n                        display: false,\n                        stacked: true\n                    }]\n                }\n            }\n        });\n\n    }\n\n    function controller(scope) {\n\n    }\n\n\n})();\n","export default function ContentCtrl($scope, $timeout, Chart, cleanUp, $NxApi, randomColor) {\n\n    $scope.templateUrl = \"/res/layout/view_s_ott_statistics_content.html\";\n\n    $scope.summary = {};\n\n    cleanUp = (_) => {\n        // Clean data on new section fill\n        $scope.summary = null;\n        $scope.filters.dates.onDateChanged = () => {\n        }\n        $scope.filters.onParameterChanged = () => {\n        }        \n    };\n\n    $scope.filters.dates.onDateChanged = () => {\n        getData().then(drawChart);\n    };\n\n    $scope.filters.onParameterChanged = () => {\n        getData().then(drawChart);\n    };    \n\n    $timeout(() => {\n        getData().then(drawChart);\n    }, 0);\n\n    function getData() {\n        return new Promise((resolve, reject) => {\n\n            $scope.summary = {\n                ios: 0,\n                android: 0,\n                androidTv: 0,\n                browser: 0\n            };\n\n            $NxApi.statistics.report({\n                from: $scope.filters.dates.start.getTime(),\n                until: $scope.filters.dates.end.getTime(),\n                ...$scope.filters.parameters\n            }).then((data) => {\n\n                let channelsTotals = [];\n\n                let chartData = {\n                    date: [],\n                    channels: {}\n                };\n\n                for (let item of data) {\n                    for (let channel of item.perChannel) {\n                        if (!channelsTotals[channel.channelId]) {\n                            channelsTotals[channel.channelId] = 0;\n                        }\n                        channelsTotals[channel.channelId] += channel.playTime;\n                    }\n                }\n\n                let sorted = [];\n\n                for (let id in channelsTotals) {\n                    sorted.push({\n                        id: id,\n                        playTime: channelsTotals[id]\n                    })\n                }\n\n                sorted.sort((a, b) => {\n                    return b.playTime - a.playTime;\n                });\n\n                let topChannels = sorted.slice(0, 20);\n\n                chartData.channels = {};\n\n                for (let channel of topChannels) {\n                    chartData.channels[channel.id] = [];\n                }\n\n                for (let item of data) {\n                    chartData.date.push(item.date);\n\n                    for (let channel of topChannels) {\n                        let match = item.perChannel.find(it => it.channelId === channel.id);\n\n                        let value = 0;\n\n                        if (match) {\n                            value = Math.round(match.concurrency);\n                        }\n\n                        chartData.channels[channel.id].push(value);\n                    }\n\n                }\n\n                addChannelNames({chartData, channelsTotals})\n                    .then(resolve)\n                    .catch(reject)\n            });\n\n        });\n    }\n\n    function addChannelNames(results) {\n        results.channelsIndex = {};\n        return new Promise((resolve, reject) => {\n            $NxApi.channels.read({namesOnly: true}).then((channels) => {\n                for (let channel of channels) {\n                    results.channelsIndex[channel._id] = channel;\n                }\n\n                resolve(results)\n\n            }).catch(reject);\n        });\n    }\n\n    function drawChart(data) {\n\n        let dataSet = [];\n\n        let char_labels = data.chartData.date;\n\n        for (let id in data.chartData.channels) {\n\n            let color = randomColor();\n\n            dataSet.push({\n                label: data.channelsIndex[id].name,\n                data: data.chartData.channels[id],\n                backgroundColor: color,\n                pointRadius: 0,\n                borderWidth: 1,\n                fill: true\n            });\n\n        }\n\n        let ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n        document.getElementById(\"sb-chart\").removeChild(ctx);\n        document.getElementById(\"sb-chart\").appendChild(document.createElement(\"canvas\"));\n        ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n\n        ctx.height = 125;\n\n        const config = {\n            type: 'line',\n            data: {\n                labels: char_labels,\n                datasets: dataSet\n            },\n            options: {\n                responsive: true,\n                interaction: {\n                    mode: 'index',\n                    intersect: false,\n                },\n                plugins: {\n                    legend: {\n                        position: \"right\",\n                        display: true,\n                        labels: {\n                            fontColor: 'black'\n                        }\n                    }\n                },\n                title: {\n                    display: false\n                },\n                tooltip: {\n                    mode: 'index'\n                },\n                scales: {\n                    x: {\n                        stacked: true,\n                        type: 'time'\n                    },\n                    y: {\n                        stacked: true\n                    },\n                    xAxes: [{\n                        categoryPercentage: 1.0,\n                        barPercentage: 1.0\n                    }]\n                }\n            }\n        };\n\n        let myBarChart = new Chart(ctx, config);\n        /*\n        let myBarChart = new Chart(ctx, {\n            type: \"bar\",\n            data: {\n                labels: char_labels,\n                datasets: dataSet\n            },\n            options: {\n                layout: {\n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0\n                    }\n                },\n                responsive: true,\n\n                scales: {\n                    xAxes: [{\n                        stacked: true,\n                        display: true,\n                    }],\n                    yAxes: [{\n                        display: true,\n                        stacked: true\n                    }]\n                }\n            }\n        });\n         */\n    }\n\n\n}","export default function AudienceCtrl($scope, $timeout, Chart, cleanUp, $NxApi) {\n\n  $scope.templateUrl = \"/res/layout/view_s_ott_statistics_viewing.html\";\n\n  $scope.summary = {\n      concurrency: 0,\n      uniqueUsers: 0,\n      avgPTPD: 0\n  };\n\n  cleanUp = (_) => {\n      // Clean data on new section fill\n      $scope.summary = null;\n      $scope.filters.dates.onDateChanged = () => {\n      }\n      $scope.filters.onParameterChanged = () => {\n      }                        \n  };\n\n  $scope.filters.dates.onDateChanged = () => {\n      getData().then(drawChart);\n  };\n  \n  $scope.filters.onParameterChanged = () => {\n      getData().then(drawChart);\n  };                    \n\n  $timeout(() => {\n      getData().then(drawChart);\n  }, 0);\n\n  function drawChart(data) {\n\n      let char_labels = data.date;\n      let chart_data_unique = data.uniqueUsers;\n      let chart_data_avgPTPD = data.avgPTPD;\n\n      let ctx = document.getElementById(\"sb-chart-1\").getElementsByTagName(\"canvas\")[0];\n      document.getElementById(\"sb-chart-1\").removeChild(ctx);\n      document.getElementById(\"sb-chart-1\").appendChild(document.createElement(\"canvas\"));\n      ctx = document.getElementById(\"sb-chart-1\").getElementsByTagName(\"canvas\")[0];\n\n      ctx.height = 125;\n      let myBarChart = new Chart(ctx, {\n          \"type\": \"line\",\n          \"data\": {\n              \"labels\": char_labels,\n              \"datasets\": [\n                  {\n                      \"label\": \"Unique Users\",\n                      \"data\": chart_data_unique,\n                      \"fill\": true,\n                      \"backgroundColor\": 'rgba(57,133,0,0.67)',\n                      \"borderWidth\": 0\n                  }]\n          },\n          \"options\": {\n              layout: {\n                  padding: {\n                      left: 0,\n                      right: 0,\n                      top: 0,\n                      bottom: 0\n                  }\n              },\n              legend: {\n                  position: \"bottom\",\n                  display: false,\n                  labels: {\n                      fontColor: 'black'\n                  }\n              },\n              title: {\n                  display: false\n              },\n              tooltips: {\n                  enabled: true,\n                  display: false,\n              },\n              scales: {\n                x: {\n                    stacked: false,\n                    display: true,\n                    type: 'time'\n                },\n                y: {\n                    display: true,\n                    stacked: false,\n                    ticks: {\n                        beginAtZero: true\n                    }\n                },\n              }\n          }\n      });\n\n\n      let ctx2 = document.getElementById(\"sb-chart-2\").getElementsByTagName(\"canvas\")[0];\n      document.getElementById(\"sb-chart-2\").removeChild(ctx2);\n      document.getElementById(\"sb-chart-2\").appendChild(document.createElement(\"canvas\"));\n      ctx2 = document.getElementById(\"sb-chart-2\").getElementsByTagName(\"canvas\")[0];\n\n      ctx2.height = 125;\n      let myBarChar2t = new Chart(ctx2, {\n          \"type\": \"line\",\n          \"data\": {\n              \"labels\": char_labels,\n              \"datasets\": [\n                  {\n                      \"label\": \"Average Playing Time per Subscriber\",\n                      \"data\": chart_data_avgPTPD,\n                      \"fill\": true,\n                      \"backgroundColor\": 'rgba(154,1,16,0.67)',\n                      \"borderWidth\": 0\n                  }]\n          },\n          \"options\": {\n              layout: {\n                  padding: {\n                      left: 0,\n                      right: 0,\n                      top: 0,\n                      bottom: 0\n                  }\n              },\n              legend: {\n                  position: \"bottom\",\n                  display: true,\n                  labels: {\n                      fontColor: 'black'\n                  }\n              },\n              title: {\n                  display: false\n              },\n              tooltips: {\n                  enabled: true,\n                  display: false,\n              },\n              scales: {\n                x: {\n                    stacked: false,\n                    display: true,\n                    type: 'time'\n                },\n                y: {\n                    display: true,\n                    stacked: false,\n                    ticks: {\n                        beginAtZero: true\n                    }\n                },\n              }              \n          }\n      });\n\n\n  }\n\n  function getData() {\n      return new Promise((resolve, reject) => {\n\n          $scope.summary = {\n              concurrency: 0,\n              uniqueUsers: 0,\n              avgPTPD: 0\n          };\n\n          let result = {\n              date: [],\n              uniqueUsers: [],\n              avgPTPD: []\n          };\n\n          $NxApi.statistics.dailyPlay({\n              from: $scope.filters.dates.start.getTime(),\n              until: $scope.filters.dates.end.getTime(),\n              ...$scope.filters.parameters,\n          }).then((data) => {\n\n              // let uidx = [];\n              const uidx = new Set();\n\n              for (let item of data) {\n\n                  let date = new Date(item.date);\n                  let avgPlayTime = 0;\n\n                  //result.date.push(`${date.getDate()}/${date.getMonth() + 1}`);\n                  result.date.push(date);\n                  //result.uniqueUsers.push(item.peaks.uniqueUsers);\n                  result.uniqueUsers.push(item.numberOfSubscribers);\n                  //result.avgPTPD.push(Math.round(item.avgPerSub.playingTime / 60000));\n                  avgPlayTime = item.playTime / item.numberOfSubscribers;\n                  result.avgPTPD.push(Math.round(avgPlayTime / 60000));\n\n                  // if (item.avgPerSub.playingTime !== 0) {\n                  //     $scope.summary.avgPTPD += item.avgPerSub.playingTime;\n                  // } else {\n                  //     $scope.summary.avgPTPD = item.avgPerSub.playingTime;\n                  // }\n\n                  // Conver to minutes in html layout\n                  $scope.summary.avgPTPD += avgPlayTime;\n\n                  // for (let s in item.subscribers) {\n                  //     uidx[s] = 1;\n                  // }\n\n                  for (let s in item.sessions) {\n                      uidx.add(s);\n                  }                  \n\n              }\n\n              // for (let id in uidx) {\n              //    $scope.summary.uniqueUsers++;\n              // }\n\n              $scope.summary.uniqueUsers = uidx.size;\n              $scope.summary.avgPTPD /= data.length;\n\n              resolve(result);\n          });\n\n      });\n  }\n\n}","export default function DevicesCtrl($scope, $timeout, Chart, cleanUp, $NxApi) {\n\n    $scope.templateUrl = \"/res/layout/view_s_ott_statistics_devices.html\";\n\n    $scope.summary = {\n        ios: 0,\n        android: 0,\n        androidTv: 0,\n        browser: 0\n    };\n\n    cleanUp = (_) => {\n        // Clean data on new section fill\n        $scope.summary = null;\n        $scope.filters.dates.onDateChanged = () => {\n        }\n        $scope.filters.onParameterChanged = () => {\n        }                        \n    };\n\n    $scope.filters.dates.onDateChanged = () => {\n        getData().then(drawChart);\n    };\n    \n    $scope.filters.onParameterChanged = () => {\n        getData().then(drawChart);\n    };                    \n\n    $timeout(() => {\n        getData().then(drawChart);\n    }, 0);\n\n    function getData() {\n        return new Promise((resolve, reject) => {\n\n            $scope.summary = {\n                ios: 0,\n                android: 0,\n                androidTv: 0,\n                browser: 0\n            };\n\n            $NxApi.statistics.devices({\n                from: $scope.filters.dates.start.getTime(),\n                until: $scope.filters.dates.end.getTime(),\n                ...$scope.filters.parameters,\n            }).then((data) => {\n\n                const DB_DEVICE_KEY = {\n                    \"ANDROID\": \"android\",\n                    \"ANDROID_TV\": \"android_tv\",\n                    \"IOS\": \"ios\",\n                    \"BROWSER\": \"browser\"\n                }\n\n                let result = {\n                    date: [],\n                    ios: [],\n                    android: [],\n                    androidTv: [],\n                    browser: []\n                };\n\n                let acumDevices = {};\n\n                for (let item of data) {\n\n                    let date = new Date(item.date);\n\n                    if (!acumDevices[date]) {\n                      acumDevices[date] = {};\n                    }\n\n                    acumDevices[date][item.device] = item.numberOfSubscribers;\n\n                }\n\n                // TODO: Podria no recorrer en orden las key\n                // (como este caso la key son fechas parece no ser un problema)\n                // Anlizar posibilidad de utilizar Map\n                for (const dateKey in acumDevices) {\n                    \n                    const date = new Date(dateKey);\n                    const androidKey = acumDevices[dateKey][DB_DEVICE_KEY.ANDROID];\n                    const androidTvKey = acumDevices[dateKey][DB_DEVICE_KEY.ANDROID_TV];\n                    const iosKey = acumDevices[dateKey][DB_DEVICE_KEY.IOS];\n                    const browserKey = acumDevices[dateKey][DB_DEVICE_KEY.BROWSER];\n\n                    // console.log(`date: ${date} | android: ${androidKey} | android_tv: ${androidTvKey} |\n                    // ios: ${iosKey} | browser: ${browserKey}`);\n\n                    result.date.push(date);\n                    \n                    result.android.push(androidKey ?? 0);\n                    $scope.summary.android += androidKey ?? 0;\n                \n                    result.androidTv.push(androidTvKey ?? 0);\n                    $scope.summary.androidTv += androidTvKey ?? 0;\n\n                    result.ios.push(iosKey ?? 0);\n                    $scope.summary.ios += iosKey ?? 0;\n\n                    result.browser.push(browserKey ?? 0);\n                    $scope.summary.browser += browserKey ?? 0;\n\n                }\n\n                let tnm = ($scope.summary.ios +\n                    $scope.summary.android +\n                    $scope.summary.androidTv +\n                    $scope.summary.browser) / 100;\n\n                $scope.summary.ios /= tnm;\n                $scope.summary.android /= tnm;\n                $scope.summary.androidTv /= tnm;\n                $scope.summary.browser /= tnm;\n            \n                resolve(result);\n            });\n\n        });\n    }\n\n    function drawChart(data) {\n\n        let char_labels = data.date;\n\n        let chart_data_iOs = data.ios;\n        let chart_data_and = data.android;\n        let chart_data_box = data.androidTv;\n        let chart_data_browser = data.browser;\n\n        let ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n        document.getElementById(\"sb-chart\").removeChild(ctx);\n        document.getElementById(\"sb-chart\").appendChild(document.createElement(\"canvas\"));\n        ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n\n        ctx.height = 125;\n        let myBarChart = new Chart(ctx, {\n            \"type\": \"line\",\n            \"data\": {\n                \"labels\": char_labels,\n                \"datasets\": [\n                    {\n                        \"label\": \"Android\",\n                        \"data\": chart_data_and,\n                        \"fill\": true,\n                        \"backgroundColor\": 'rgba(47,110,0,0.67)',\n                        \"borderWidth\": 0\n                    }, {\n                        \"label\": \"TV Box\",\n                        \"data\": chart_data_box,\n                        \"fill\": true,\n                        \"backgroundColor\": 'rgba(0,77,160,0.67)',\n                        \"borderWidth\": 0\n                    },\n                    {\n                        \"label\": \"iOs\",\n                        \"data\": chart_data_iOs,\n                        \"fill\": true,\n                        \"backgroundColor\": 'rgba(0,0,0,0.99)',\n                        \"borderWidth\": 0\n                    },\n                    {\n                        \"label\": \"Browser\",\n                        \"data\": chart_data_browser,\n                        \"fill\": true,\n                        \"backgroundColor\": 'rgba(203,83,35,0.67)',\n                        \"borderWidth\": 0\n                    }]\n            },\n            \"options\": {\n                layout: {\n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0\n                    }\n                },\n                legend: {\n                    position: \"bottom\",\n                    display: true,\n                    labels: {\n                        fontColor: 'black'\n                    }\n                },\n                title: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: true,\n                    display: false,\n                },\n                scales: {\n                    x: {\n                        stacked: false,\n                        display: true,\n                        type: 'time'\n                    },\n                    y: {\n                        stacked: false,\n                        display: true\n                    },\n\n                }\n            }\n        });\n    }\n\n}","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n\nimport ContentCtrl from \"./stats/statsContentCtrl\"\nimport AudienceCtrl from \"./stats/statsAudienceCtrl\"\nimport DevicesCtrl from \"./stats/statsDevicesCtrl\"\n\n(function () {\n\n    const parameterAvilable = {\n        aggregation: \"aggregation\"\n    };\n    const parameterDefault = {\n        aggregation: \"auto\"\n    };\n\n    let  nextColor = 0;\n\n    angular.module('NxStudio')\n        .controller(\"sOttStatisticsCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', '$mdDialog', '$timeout',\n            function ($scope, $NxApi, $mdToast, $location, $mdDialog, $timeout) {\n\n                $scope.sectionName = \"Choose a section\";\n                $scope.filters = {\n                    active: false,\n                    changeDates: changeDates,\n                    changeParameters: changeParameters,\n                    dates: setDatesToLastWeek(),\n                    parameters: {},\n                    onDateChanged: () => {\n                    },\n                    onParameterChanged: () => {\n                    }\n                };\n\n                $scope.sections = [\n                    {\n                        name: \"Subscribers\",\n                        icon: \"/res/drawable/ic_users.svg\",\n                        controller: SubscribersCtrl\n                    }, {\n                        name: \"Audience\",\n                        icon: \"/res/drawable/ic_viewing.svg\",\n                        controller: AudienceCtrl\n                    }, {\n                        name: \"Content\",\n                        icon: \"/res/drawable/ic_show.svg\",\n                        controller: ContentCtrl\n                    }, {\n                        name: \"Devices\",\n                        icon: \"/res/drawable/ic_devices.svg\",\n                        controller: DevicesCtrl\n                    }\n                ];\n\n                $scope.startSection = startSection;\n\n                let cleanUp = (_) => {\n                };\n\n                function init() {\n                    startSection($scope.sections[0]);\n                }\n\n                function changeDates() {\n\n                    let masterScope = $scope;\n\n                    $mdDialog.show({\n                        templateUrl: \"/res/layout/fragment_dialog_date_rage.html\",\n                        controller: ($scope, $mdDialog) => {\n\n                            $scope.cancel = function () {\n                                $mdDialog.hide()\n                            };\n\n                            $scope.save = function () {\n\n                                masterScope.filters.dates.start = $scope.ctrl.startDate;\n                                masterScope.filters.dates.end = $scope.ctrl.endDate;\n\n                                if (typeof masterScope.filters.dates.onDateChanged === \"function\") {\n                                    masterScope.filters.dates.onDateChanged();\n                                }\n                                $mdDialog.hide()\n                            };\n\n                            $scope.ctrl = {\n                                startDate: new Date(masterScope.filters.dates.start),\n                                endDate: new Date(masterScope.filters.dates.end)\n                            };\n\n                        }\n                    })\n                }\n\n                function changeParameters() {\n\n                    let masterScope = $scope;\n\n                    $mdDialog.show({\n                        templateUrl: \"/res/layout/fragment_dialog_filter.html\",\n                        controller: ($scope, $mdDialog) => {\n\n                            $scope.cancel = function () {\n                                $mdDialog.hide()\n                            };\n\n                            $scope.save = function () {\n                                masterScope.filters.parameters = {}\n                                if ($scope.ctrl.aggregation !== parameterDefault[\"aggregation\"]) {\n                                    masterScope.filters.parameters[parameterAvilable[\"aggregation\"]] = $scope.ctrl.aggregation\n                                }\n                                if (typeof masterScope.filters.onParameterChanged === \"function\") {\n                                    masterScope.filters.onParameterChanged();\n                                }\n                                $mdDialog.hide()\n                                masterScope.filters.active = Object.entries(masterScope.filters.parameters).length !== 0 ? true : false\n                            };\n\n                            $scope.ctrl = {\n                                aggregation: masterScope.filters.parameters[parameterAvilable[\"aggregation\"]] || parameterDefault[\"aggregation\"]\n                            };\n\n                        }\n                    })\n                }\n\n                function startSection(section) {\n\n                    if (typeof section.controller === \"function\") {\n                        cleanUp();\n                        $scope.currentSection = section;\n                        section.controller($scope, $timeout, Chart, cleanUp,$NxApi, randomColor) ;\n                    }\n\n                }\n\n                function SubscribersCtrl() {\n\n                    $scope.templateUrl = \"/res/layout/view_s_ott_statistics_subscribers.html\";\n\n                    $scope.summary = {\n                        new: 0,\n                        deletion: 0,\n                        active: 0\n                    };\n\n                    cleanUp = (_) => {\n                        // Clean data on new section fill\n                        $scope.summary = null;\n                        $scope.filters.dates.onDateChanged = () => {\n                        }\n                        $scope.filters.onParameterChanged = () => {\n                        }\n                    };\n\n                    $scope.filters.dates.onDateChanged = () => {\n                        getData().then(drawChart);\n\n                    };\n\n                    $scope.filters.onParameterChanged = () => {\n                        getData().then(drawChart);\n\n                    };                    \n\n                    $timeout(() => {\n                        getData().then(drawChart);\n                    }, 0);\n\n                    function drawChart(data) {\n\n                        let char_labels = data.date;\n                        let chart_data_active = data.active;\n                        let chart_data_new = data.new;\n                        let chart_data_del = data.deletions;\n\n                        let ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n                        document.getElementById(\"sb-chart\").removeChild(ctx);\n                        document.getElementById(\"sb-chart\").appendChild(document.createElement(\"canvas\"));\n                        ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n\n                        ctx.height = 125;\n                        let myBarChart = new Chart(ctx, {\n                            \"type\": \"line\",\n                            \"data\": {\n                                \"labels\": char_labels,\n                                \"datasets\": [\n                                    {\n                                        \"label\": \"Unsubscription\",\n                                        \"data\": chart_data_del,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(154,1,16,0.67)',\n                                        \"borderWidth\": 0\n                                    }, {\n                                        \"label\": \"New Subscribers\",\n                                        \"data\": chart_data_new,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(57,133,0,0.67)',\n                                        \"borderWidth\": 0\n                                    },\n                                    {\n                                        \"label\": \"Active Subscribers\",\n                                        \"data\": chart_data_active,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(0,77,160,0.67)',\n                                        \"borderWidth\": 0\n                                    }]\n                            },\n                            \"options\": {\n                                layout: {\n                                    padding: {\n                                        left: 0,\n                                        right: 0,\n                                        top: 0,\n                                        bottom: 0\n                                    }\n                                },\n                                legend: {\n                                    position: \"bottom\",\n                                    display: true,\n                                    labels: {\n                                        fontColor: 'black'\n                                    }\n                                },\n                                title: {\n                                    display: false\n                                },\n                                tooltips: {\n                                    enabled: true,\n                                    display: false,\n                                },\n                                scales: {\n                                    xAxes: [{\n                                        stacked: false,\n                                        display: true,\n                                    }],\n                                    yAxes: [{\n                                        display: true,\n                                        stacked: false\n                                    }]\n                                }\n                            }\n                        });\n                    }\n\n                    function getData() {\n                        return new Promise((resolve, reject) => {\n\n                            $scope.summary = {\n                                new: 0,\n                                deletion: 0,\n                                active: 0\n                            };\n\n                            $NxApi.statistics.subscribers({\n                                from: $scope.filters.dates.start.getTime(),\n                                until: $scope.filters.dates.end.getTime()\n                            }).then((data) => {\n\n                                let result = {\n                                    date: [],\n                                    active: [],\n                                    new: [],\n                                    deletions: []\n                                };\n\n                                for (let item of data) {\n\n                                    let date = new Date(item.date);\n\n                                    result.date.push(`${date.getDate()}/${date.getMonth() + 1}`);\n                                    result.active.push(item.active.total);\n                                    result.new.push(item.installs.total);\n                                    result.deletions.push(item.uninstalls.total);\n\n                                    $scope.summary.new += item.installs.total;\n                                    $scope.summary.deletion += item.uninstalls.total;\n\n                                }\n\n                                $scope.summary.active = result.active[result.active.length - 1];\n\n                                resolve(result);\n\n                            })\n\n                        });\n                    }\n\n                }\n                \n\n                function setDatesToLastWeek() {\n                    const DELTA = 604800000;\n                    let result = {};\n\n                    result.start = new Date();\n                    result.start.setTime(result.start.getTime() - DELTA);\n                    result.start.setHours(0, 0, 0, 0);\n\n                    result.end = new Date();\n                    result.end.setHours(0, 0, 0, 0);\n\n                    return result;\n                }\n\n\n                function randomColor() {\n                    let colors =\n                        [\n                            \"#068f23\", \"#8a2d65\", \"#ed8052\",\n                            \"#4ea032\", \"#568ea8\", \"#d43d51\",\n                            \"#77b143\", \"#e2604f\", \"#bed36c\",\n                            \"#9cc256\", \"#864780\", \"#f49f5b\",\n                            \"#dfe584\", \"#8f0b80\", \"#1b94ad\",\n                            \"#b03317\", \"#1e6dff\", \"#205b1c\",\n                            \"#ffab31\", \"#126eb4\", \"#d03cc0\",\n                        ];\n                    if (!nextColor) nextColor = 0;\n                    return colors[nextColor++ % colors.length];\n                }\n\n                // End of code\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n})();"],"sourceRoot":""}