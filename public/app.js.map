{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/javascript/controller_home.js","webpack:///./public/javascript/controller_login.js","webpack:///./public/javascript/controller_main.js","webpack:///./public/javascript/controller_s_account_settings.js","webpack:///./public/javascript/controller_s_account_settings_user.js","webpack:///./public/javascript/controller_s_account_settings_users.js","webpack:///./public/javascript/controller_s_n_a.js","webpack:///./public/javascript/controller_s_ott_categories.js","webpack:///./public/javascript/controller_s_ott_category_detail.js","webpack:///./public/javascript/controller_s_ott_channel.js","webpack:///./public/javascript/controller_s_ott_channel_detail.js","webpack:///./public/javascript/controller_s_ott_config.js","webpack:///./public/javascript/controller_s_ott_epg_monitor.js","webpack:///./public/javascript/controller_s_ott_private_cloud.js","webpack:///./public/javascript/controller_s_ott_products.js","webpack:///./public/javascript/controller_s_ott_products_detail.js","webpack:///./public/javascript/controller_s_ott_statistics.js","webpack:///./public/javascript/controller_s_ott_subscribers.js","webpack:///./public/javascript/controller_s_ott_subscribers_detail.js","webpack:///./public/javascript/controller_s_user_profile.js","webpack:///./public/javascript/directive_channel.js","webpack:///./public/javascript/module_nx_studio.js","webpack:///./public/javascript/service_nx_api.js","webpack:///./public/javascript/service_nx_dialogs.js","webpack:///./public/javascript/service_nx_nav_panel_and_main_bar.js","webpack:///./public/javascript/stats/statsContentCtrl.js"],"names":["angular","$scope","toast","$NxApi","window","$mdToast","$event","checkLogin","init","$NxNav","user","$location","item","localStorage","$NxDialogs","console","name","description","$q","file","document","maxSize","reject","reader","resolve","logo","services","_getImage","url","img","_id","user_id","$routeParams","users","permission","firstName","lastName","email","password","user_permissions","users_permissions","USER_ADMIN","PRIVATE_CLOUD_ADMIN","PRODUCTS_WRITE","PRODUCTS_READ","CHANNELS_WRITE","CHANNELS_READ","STATS_ACCESS","SUBSCRIBERS_READ","value","state","data","permissions","userId","dialog","parent","controller","$mdDialog","newPassword","account","dialog_alert","_updateTable","category","descriptionShort","descriptionLong","channelId","enabled","error","id","channel","channelEPGId","poster","notes","transcoder","ottConfigurations","parseInt","out","channelsEPGId","Math","task","str","rst","DAY","HOUR","MINUTE","server","label","formatUptime","privateCloudConfig","gpu_enc","gpu_dec","gpu_mem","mServer","t","serverCondition","streamingTestDialog","protocol","host","port","app","streamname","inStream","element","serverPart","source","pre","response","video","Date","encodeURIComponent","videojs","Array","pSource","templateUrl","target","clickOutsideToClose","confirm","getChannel","role","ip","pid","getTranscoder","outStream","streams","targetServer","getPackager","o","stream","productId","product","products","channels","i","text","nextColor","section","cleanUp","colors","masterScope","startDate","endDate","dates","result","parameters","onDateChanged","icon","char_labels","chart_data_active","chart_data_new","chart_data_del","ctx","layout","padding","left","right","top","bottom","legend","position","labels","fontColor","title","display","tooltips","scales","xAxes","yAxes","stacked","new","deletion","active","from","until","date","deletions","getData","$timeout","chart_data_unique","chart_data_avgPTPD","myBarChart","ticks","beginAtZero","ctx2","uniqueUsers","avgPTPD","uidx","concurrency","ContentCtrl","ios","android","androidTv","browser","tnm","chart_data_iOs","chart_data_and","chart_data_box","chart_data_browser","startSection","field","sortVars","subscribers","a","b","getItemAtIndex","getLength","order","sortSubscribers","by","subscriber","newValue","background","subscriberId","includeUpdateHistory","photo","update","scope","chart_data","restrict","require","link","$routeProvider","$locationProvider","$rootScope","HOST","$http","getURI","headers","session","token","success","GET_ACCOUNT","afterLoginCallback","getAccount","preSuccess","callback","content","checkSubscriberCredentials","code","message","error_dsc","Subscribers","params","Account","delete","Users","programmes","Programmes","restartPush","channelsDelegation","categories","categoriesDelegation","privateCloud","serverIp","media","format","killPid","privateCloudDelegation","Products","avProfiles","AvProfiles","OttConfigurations","statistics","report","StatisticsDelegation","cancel","solve","showAdd","showAddDelegation","showChannelSelector","showChannelSelectorDelegation","mainBar","hidden","navPanel","loadRootLevel","items","iconURL","path","channelsTotals","chartData","sorted","playTime","topChannels","match","it","addChannelNames","results","namesOnly","dataSet","color","backgroundColor","pointRadius","borderWidth","fill","type","datasets","options","interaction","mode","intersect","plugins","tooltip","x","y","categoryPercentage","barPercentage"],"mappings":"mBAIA,uCAGA,8BACA,0CAGA,uCACA,UADA,CAEA,IAFA,CAGA,UAHA,EAaA,MANA,iFAMA,CAHA,WAGA,eACA,CAxBA,wBAiFA,MArDA,8BAqDA,CAlDA,sCAkDA,CA/CA,oDACA,mCADA,EAEA,oCAA0C,aAA1C,CAA0C,UAA1C,EAEA,CA2CA,CAxCA,wCACA,8CADA,EAEA,kDAAwD,cAAxD,EAFA,CAIA,4CAAiD,QAAjD,EACA,CAmCA,CA5BA,2CAEA,GADA,MACA,GADA,gCACA,sBACA,wEACA,2BAGA,GAFA,yBAEA,CADA,oCAAyC,aAAzC,CAAyC,WAAzC,EACA,gGAAgH,iBAAqB,CAArI,CAAqI,IAArI,CAAqI,IAArI,CAAqI,GAArI,GACA,SACA,CAmBA,CAhBA,uCACA,qCACA,WAA2B,wBAA4B,CADvD,CAEA,WAAiC,aAAe,CAFhD,CAIA,MADA,yCACA,OACA,CAUA,CAPA,gDAAsD,4DAA+D,CAOrH,CAJA,wBAIA,6C;;2FCtEA,CAAC,UAAY,CACTA,iDAC4B,UAD5BA,WAC4B,CAE5B,UAAuC,CAGtC,CAL2B,CAD5BA,CADJ,I;;4FCAA,CAAC,UAAY,CACTA,kDAC6B,mDAAuD,iDAAsD,CAsBlI,qBAAsB,CACdC,6BAAJ,EAAqCA,4BADnB,CAEdC,mDAFc,CAIdC,aAAaF,iBAAbE,MAAqCF,iBAArCE,eAAqE,UAAU,CAC3EC,mBADJD,SAES,UAAW,CAChBD,wEAHJC,EAMP,CAED,mBAAoB,CAChBE,cACIA,6CADJA,GACIA,CADJA,OAIU,UAAY,CAJtBA,SAKa,UAAY,CALzBA,EAOH,CApCDJ,gBAUA,gBAA0B,CACtB,OAAIK,cADkB,EAElBC,YAEP,CApBiI,CAOlIN,kBAPkI,WAWlI,UAAgB,CAEf,CA+BDO,EA7CRR,CAC6B,CAD7BA,CADJ,I;;2FCAA,CAAC,UAAY,CACTA,iDAC4B,gEACpB,4DAAkE,CAI9DC,gBAAkBQ,OAAlBR,QAJ8D,CAK9DA,eAAiBQ,OAL6C,QAS9DR,mBA4BA,UAAuB,CACnB,GAAMS,MAAOP,OAAb,OAAaA,EAAb,CADmB,MAGfO,OAAQA,KAARA,OAAsBA,WAA1B,GAHmB,CAIRA,WAAP,GAJe,CAMf,2BAEP,CA7C6D,CAU9DT,gBAqCA,UAAoB,CAChB,GAAMS,MAAOP,OAAb,OAAaA,EAAb,CADgB,MAGhB,KAHgB,CAILO,mBAAuBA,KAA9B,QAJY,CAMZ,KAEP,CAvD6D,CAW9DT,iBA8CA,cAAyB,CACrBU,eAAeC,KAAfD,KACH,CA3D6D,CAY9DV,sBAiDA,UAA0B,CACtB,MAAOQ,iBAAP,cACH,CA/D6D,CAa9DR,cAoDA,UAAkB,CACdY,oBADc,CAEdT,wBACH,CApE6D,CAc9DH,qBAwDA,UAAyB,CACrBU,iCACH,CAxE6D,CAe9DV,qBA2DA,gBAA+B,CAC3Ba,0BACH,CA5E6D,CAgB9Db,OAhB8D,KAgB9DA,CA8DA,aAAoB,CAChBI,cACIA,6CADJA,GACIA,CADJA,OAIU,UAAY,CAJtBA,SAKa,UAAY,CALzBA,EAOH,CAtF6D,CAoB9D,UAAgB,CAEZF,oBAAoB,UAAM,CAEtB,QAAIQ,mBAFkB,EAGlBA,mBAHRR,SAQS,WAAO,CACZY,gBADY,CAEZJ,wBAVJR,EAaH,CAsDDK,EA3FZR,CAC4B,CAD5BA,CADJ,I;;yGCAA,CAAC,UAAY,CACTA,6DAEQ,+CACI,6CAAkD,CAoCtD,mBAAoB,CAChBK,cACIA,6CADJA,GACIA,CADJA,OAIU,UAAY,CAJtBA,SAKa,UAAY,CALzBA,EAOH,CAED,oBAAqB,oBAESJ,OAFT,6EAIbe,WAAJ,EAAmBC,cAJF,GAQjBf,mCARiB,IAWpB,CAED,oBAAqB,CACjB,MAAOgB,IAAG,wBAAqB,IACvBC,MAAOC,uBAAX,OAAWA,CADgB,CAEvBC,QAFuB,IAG3BF,gBAH2B,CAI3BA,YAJ2B,CAM3BA,+BAAgC,UAAY,CAEpCA,uBAAJ,OAFwC,EAGpCG,OAAM,mDAANA,IAAM,CAANA,CAHoC,CAMxC,GAAIC,QAAS,GAAb,YAEAA,iBAAmB,UAAY,CAC3BC,QAAQD,OAARC,OADJD,CARwC,CAYxCA,qBAAqBJ,WAArBI,CAAqBJ,CAArBI,CAZJJ,EANJ,CAAOD,CAqBV,CA/EDjB,cAAgB,CACZwB,KADY,GAEZT,KAFY,GAGZC,YAHY,GAIZS,SAAU,EAJE,CAFsC,CAStDzB,qBAuBA,UAAwB,CACpBU,2CACH,CAlCqD,CAUtDV,qBAoFA,UAAwB,CACpB,WADoB,GAGhBA,iBAHgB,CAKhBE,sBACYF,OADZE,aAEU,UAAM,CACRD,+BADQ,CAERD,iBAFQ,CAGLA,YAAH,KAHQ,GAGcA,2BAHd,CAFhBE,SAQW,eAAW,CACdY,kBADc,CAEdd,iBAVRE,EALgB,CAmBvB,CAjHqD,CAWtDF,mBAwEA,UAAuB,CACnB0B,iBAAiB,aAAS,CACtB1B,mBAAqB,WAEjB2B,IAAIC,GAFa,CADzBF,SAKS,eAAW,CAChBzB,YANJyB,EAQH,CA5FqD,CAmHtDxB,qBAtGA,UAAgB,CACZ,GAAIO,MAAOP,OAAX,OAAWA,EAAX,CAEA,IAHY,EAIRA,kBAAkBO,KAAlBP,cAAqC,iBAAa,mHAG9CF,cAAgB,CACZ6B,IADY,IAEZd,KAFY,KAGZS,KAHY,KAIZR,YAJY,YAKZS,iBALY,CAHpBvB,EAaP,CAqFDA,CAtHRH,CAEQ,CAFRA,CADJ,I;;8GCAA,CAAC,UAAY,CACTA,iEAEQ,0EACI,oEAA4E,CA2DxE,eAAgB,CACZ,GAAI,CAACC,OAAL,MAAmB,CACf,GAAI8B,SAAUC,aAAd,QAEA,OAHe,EAIX7B,kBAAkB,CAAC2B,IAAKC,OAAN,CAAlB5B,OAAuC,cAAa,IAAX8B,OAAW,KAAXA,KAAW,CAChDhC,YAAcgC,MAAdhC,CAAcgC,CADkC,iFAEhD,cAASC,UAAT,WAAuBjC,OAAvB,iBAAuBA,CAAvB,eAAuBA,GAAvB,yFAASiC,UAAT,CAAiD,WAAjD,CACQjC,iCAAiCiC,WAArC,KAAIjC,CADR,GAEQiC,mBAFR,CAFgD,yLAApD/B,EAUP,CACJ,CAED,mBAAoB,CAChBE,cACIA,6CADJA,GACIA,CADJA,OAIU,UAAY,CAJtBA,SAKa,UAAY,CALzBA,EAOH,CAED,oBAAqB,kBAE2BJ,OAF3B,6HAIjB,GACI,iCACAkC,YADA,aAEA,iBAFA,IAGAC,WAHA,aAIA,cAJA,EADJ,EAMOC,QANP,EASI,IAAIpC,OAAJ,MAKI,SAJA,GAAIqC,wBAAJ,EAAgCA,WAAhC,CACI,QAXZ,CAoBA,MAFApC,oCAEA,GACH,CAiED,0BAA2B,IACnBqC,kBAAJ,EADuB,gFAEvB,eAASL,UAAT,YAAuBjC,OAAvB,iBAAuBA,CAAvB,eAAuBA,GAAvB,6FAASiC,UAAT,CAAiD,YAAjD,CACQA,WAAJ,KADJ,EAC0BK,sBAAsBL,WAAtBK,MAHH,gMAKvB,uBACH,CAwID,oBAAqB,CACjB,MAAOrB,IAAG,wBAAqB,IACvBC,MAAOC,uBAAX,OAAWA,CADgB,CAEvBC,QAFuB,IAG3BF,gBAH2B,CAI3BA,YAJ2B,CAM3BA,+BAAgC,UAAY,CAEpCA,uBAAJ,OAFwC,EAGpCG,OAAM,mDAANA,IAAM,CAANA,CAHoC,CAMxC,GAAIC,QAAS,GAAb,YAEAA,iBAAmB,UAAY,CAC3BC,QAAQD,OAARC,OADJD,CARwC,CAYxCA,qBAAqBJ,WAArBI,CAAqBJ,CAArBI,CAZJJ,EANJ,CAAOD,CAqBV,CAnVD,GAAMsB,mBAAoB,CACtBC,WADsB,aAEtBC,oBAFsB,qBAGtBC,eAHsB,iBAItBC,cAJsB,gBAKtBC,eALsB,iBAMtBC,cANsB,gBAOtBC,aAPsB,eAQtBC,iBAAkB,kBARI,CAA1B,CAWA/C,kBAAe+B,uBAbyD,CAcxE/B,cAdwE,CAexEA,qBAfwE,CAgBxEA,yBAA2B,CACvB,CACIgD,MAAOT,kBADX,cAEIU,QAFJ,CADuB,CAKvB,CACID,MAAOT,kBADX,eAEIU,QAFJ,CALuB,CASvB,CACID,MAAOT,kBADX,cAEIU,QAFJ,CATuB,CAavB,CACID,MAAOT,kBADX,eAEIU,QAFJ,CAbuB,CAiBvB,CACID,MAAOT,kBADX,aAEIU,QAFJ,CAjBuB,CAqBvB,CACID,MAAOT,kBADX,iBAEIU,QAFJ,CArBuB,CAyBvB,CACID,MAAOT,kBADX,WAEIU,QAFJ,CAzBuB,CA6BvB,CACID,MAAOT,kBADX,oBAEIU,QAFJ,CA7BuB,CAhB6C,CAkDxEjD,iBAlDwE,CAoDxEA,kBA8DA,UAAsB,CAElB,eAAiB,CAEbA,iBAFa,CAIb,GAAIkD,MAAO,CACPrB,IAAK7B,YADE,IAEPkC,UAAWlC,YAFJ,UAGPmC,SAAUnC,YAHH,SAIPmD,YAJO,kBAKPf,MAAOpC,YAAYoC,KALZ,CAAX,CAQGpC,YAAH,KAZa,GAaTkD,WAAgBlD,YAAhBkD,KAbS,EAgBTlD,OAAJ,KAhBa,EAkBTkD,cAAgBlD,YAAhBkD,QAlBS,CAoBThD,+BAEU,UAAM,CACRD,4BADQ,CAERD,iBAFQ,CAGRU,2CALRR,SAQW,eAAW,CACdY,kBADc,CAEdd,iBAVRE,EApBS,EAmCTA,+BAEU,UAAM,CACRD,4BADQ,CAERD,iBAFQ,CAGLA,YAAH,KAHQ,GAGcA,2BAHd,CAFhBE,SAQW,eAAW,CACdY,kBADc,CAEdd,iBAVRE,EAcP,CAEJ,CAvKuE,CAqDxEF,mBAkSA,UAAuB,CACnB0B,iBAAiB,aAAS,CACtB1B,kBAAoB,WAEhB2B,IAAIC,GAFY,CADxBF,SAKS,eAAW,CAChBzB,YANJyB,EAQH,CAhWuE,CAsDxE1B,0BAmHA,cAAkC,OAC1BS,aAAcA,WAAlB,GAD8B,CAEnBA,WAAP,GAF0B,CAK9B,2BACH,CA/KuE,CAuDxET,6BAkIA,UAAiC,IAIzBoD,QAASpD,YAAb,GAJ6B,CAM7B,MAAOiB,IAAG,wBAAqB,CAE3B,GAAIoC,QAAS,aALjB,yCAKiB,CAETC,OAAQvD,gBAAgBoB,SAFf,IAEDpB,CAFC,yCAKTwD,WAKJ,0BAA6C,CAEzCvD,aAlBR,gBAgBiD,CAGzCA,oBAHyC,CAIzCA,qBAJyC,CAKzCA,2BALyC,CAMzCA,iBANyC,CAQzCA,cAQA,UAAkB,CACdwD,kBACH,CAlBwC,CASzCxD,YAgBA,UAAgB,CACZA,iBADY,CAEZE,oBACY,CACJ2B,IADI,OAEJQ,SAAUrC,OAAOyD,WAFb,CADZvD,OAKU,UAAM,CACRD,gCADQ,CAERD,iBAFQ,CAGRwD,gBARRtD,SAWW,eAAW,CACdY,kBADc,CAEdd,iBAbRE,EAgBH,CA3CwC,CAUzCF,sBAUA,UAA0B,CAEtB,MAAQA,yBAAD,EAA8BA,2BAA7BA,EAAiEA,qBAAuBA,OAAhG,iBACH,CAvBwC,CAYzC,UAAgB,CAEf,CA+BDO,EACH,CAxDY,CAAb,CAQAiD,2CAVJ,CAAOvC,CA8DV,CA7PuE,CAwDxEjB,oBAuMA,UAAwB,IAKhBoD,QAASpD,YAAb,GALoB,CAOpB,MAAOiB,IAAG,wBAAqB,CAE3B,GAAIoC,QAAS,aALjB,+BAKiB,CAETC,OAAQvD,gBAAgBoB,SAFf,IAEDpB,CAFC,yCAKTwD,WAKJ,0BAA6C,CAEzCvD,aAnBR,aAiBiD,CAGzCA,mBAnBR,0CAgBiD,CAIzCA,oBAJyC,CAKzCA,iBALyC,CAOzCA,cAOA,UAAkB,CACdwD,kBACH,CAhBwC,CAQzCxD,UAUA,UAAc,CACVA,iBADU,CAEVE,oBACY,CACJ2B,IAAKuB,MADD,CADZlD,OAIU,UAAM,CACRD,qBADQ,CAERD,iBAFQ,CAGRwD,gBAHQ,CAIR9C,2CARRR,SAWW,eAAW,CACdY,kBADc,CAEdd,iBAbRE,EAgBH,CApCwC,CAUzC,UAAgB,CAEf,CA0BDK,EACH,CAjDY,CAAb,CAQAiD,2CAVJ,CAAOvC,CAuDV,CA7TuE,CAyDxEjB,iBAySA,cAAwB,CACpBE,mBAAmBO,KAAnBP,MAA8BO,oBAA9BP,eAAiE,UAAI,CACjEC,mBADJD,EAGH,CAtWuE,CAwWxEK,MAxWwE,CA0WxEL,0BA7WhBH,CAEQ,CAFRA,CADJ,I;;+GCAA,CAAC,UAAY,CACTA,kEAEQ,2DACI,uDAA8D,CAW1D,eAAgB,CACZ,GAAIU,MAAOP,OAAX,OAAWA,EAAX,CAEA,IAHY,EAKRA,kBAAkBO,KAAlBP,cAAqC,iBAAa,CAC9CF,mBAAqB0D,QAArB1D,IAD8C,CAE9CE,kBAAkB,CAACwD,QAASjD,KAAKiD,OAAf,CAAlBxD,OAAgD,cAAa,IAAX8B,OAAW,KAAXA,KAAW,CACzDhC,kBADyD,CAEzDA,iBAFJE,EAFJA,EAUP,CAED,uBAAwB,CACpB,GAAIO,MAAOP,OAAX,OAAWA,EAAX,CAEA,IAHoB,EAKhBA,kBAAkBO,KAAlBP,cAAqC,iBAAa,CAC9CF,mBAAqB0D,QAArB1D,IAD8C,CAE9CE,kBAAkB,CAACwD,QAASjD,KAAKiD,OAAf,CAAlBxD,OAAgD,eAAa,IAAX8B,OAAW,MAAXA,KAAW,CACzDhC,kBADJE,EAFJA,EAQP,CAmBD,mBAAoB,CAChBE,cACIA,6CADJA,GACIA,CADJA,OAIU,UAAY,CAJtBA,SAKa,UAAY,CALzBA,EAOH,CAED,2BAA4B,IAKpBgD,QAAS3C,KAAb,GALwB,CAOxB,MAAOQ,IAAG,wBAAqB,CAE3B,GAAIoC,QAAS,aALjB,+BAKiB,CAETC,OAAQvD,gBAAgBoB,SAFf,IAEDpB,CAFC,yCAKTwD,WAKJ,0BAA6C,CAEzCvD,aAnBR,aAiBiD,CAGzCA,mBAnBR,2CAgBiD,CAIzCA,oBAJyC,CAKzCA,iBALyC,CAOzCA,cAOA,UAAkB,CACdwD,kBACH,CAhBwC,CAQzCxD,UAUA,UAAc,CACVA,iBADU,CAEVE,oBACY,CACJ2B,IAAKuB,MADD,CADZlD,OAIU,UAAM,CACRF,iBADQ,CAERwD,gBANRtD,SAUW,eAAW,CACdY,kBADc,CAEdd,iBAZRE,EAeH,CAnCwC,CAUzC,UAAgB,CAEf,CAyBDK,EACH,CAhDY,CAAb,CAQAiD,2CAVJ,CAAOvC,CAsDV,CAjIDjB,eAF0D,CAG1DA,qBAH0D,CAI1DA,iBAJ0D,CAM1DA,0BA+HA,cAAkC,OAC1BS,aAAcA,WAAlB,GAD8B,CAEnBA,WAAP,GAF0B,CAK9B,2BACH,CA3IyD,CAO1DT,mBAwCA,cAA2B,CACvBU,eAAe,6BAA+BD,KAA9CC,IACH,CAjDyD,CAQ1DV,eAmCA,UAAmB,CACfU,+CACH,CA7CyD,CAS1DV,kBA0CA,cAA0B,CAEtB2D,wBAAwB,UAAM,CAC1B1D,qBAD0B,CAE1B2D,cAFJD,EAKH,CA1DyD,CA6I1DpD,MA7I0D,CA+I1DL,0BAlJhBH,CAEQ,CAFRA,CADJ,I;;4FCAA,CAAC,UAAY,CACTA,gDAC2B,0CAA6C,uBAA8C,CAO9GG,qBALA,UAAe,CAEd,CAGDA,CARRH,CAC2B,CAD3BA,CADJ,I;;uGCAA,CAAC,UAAY,CACTA,wDACmC,2CACzB,2CAAgD,CAE9CC,gBAF8C,CAG9CA,oBAH8C,CAI9CA,sBAgBA,kBAAkC,CAC9BU,eAAe,qBAAuBmD,SAAtCnD,IACH,CAtB6C,CAK9CV,oBAmBA,UAAwB,CACpB,MAAO,eAAgB,OAEnB,EAAGA,gBAFgB,EAIZ,CAACW,gCAAgCX,cAAjC,WAAiCA,EAAhCW,CAAD,EACH,CAACA,wCAAwCX,cADtC,WACsCA,EAAxCW,CADE,EAEH,CAACA,gDAAgDX,cAFrD,WAEqDA,EAAhDW,CANT,CAQH,CAjC6C,CAmC9CT,qBA5BA,UAAgB,CAEZA,gCAEU,kBAAc,CAChBF,0BAHRE,SAKW,eAAW,CACdY,kBANRZ,EASH,CAiBDA,CArCZH,CACmC,CADnCA,CADJ,I;;4GCAA,CAAC,UAAY,CACTA,8DACyC,+DADzCA,WACyC,CAEzC,qEAAuF,CA6BnF,oBAAqB,0BAE+BC,OAF/B,8JAIbe,aAAe+C,mBAAf/C,EAAJ,EAA8CgD,kBAJ7B,GAQjB/D,kDARiB,IAWpB,CAYD,uBAAwB,IAKhBgE,WAAYjC,aAAhB,EALoB,CAOpB,MAAOd,IAAG,wBAAqB,CAE3B,GAAIoC,QAAS,aALjB,+BAKiB,CAETC,OAAQvD,gBAAgBoB,SAFf,IAEDpB,CAFC,yCAKTwD,WAKJ,0BAAwD,CAEpDvD,aAnBR,iBAiB4D,CAGpDA,mBAnBR,uDAgB4D,CAIpDA,0BAJoD,CAKpDA,iBALoD,CAOpDA,cAOA,UAAkB,CACdwD,kBACH,CAhBmD,CAQpDxD,UAUA,UAAc,CACVA,iBADU,CAEVE,yBACY,CACJ2B,IAAKmC,SADD,CADZ9D,OAIU,UAAM,CACRsD,gBALRtD,SAOW,eAAW,CACdsD,uBADc,CAEdxD,iBATRE,EAYH,CAhCmD,CAUpD,UAAgB,CAEf,CAsBDK,EACH,CA7CY,CAAb,CAQAiD,2CAVJ,CAAOvC,CAmDV,CA5GDjB,kBAAe+B,kBAFoE,CAGnF/B,oBAAsB,CAClBe,KADkB,GAElB+C,iBAFkB,GAGlBC,gBAHkB,GAIlBE,UAJkB,CAH6D,CAUnFjE,sBAsGA,UAA0B,CACtB,WADsB,GAGlBA,iBAHkB,CAKdA,OAAJ,KALkB,CAOdE,yBACYF,OADZE,mBAEU,UAAM,CACRF,gDADQ,CAERA,iBAFQ,CAGRU,mCALRR,SAQW,eAAW,CACdY,kBADc,CAEdd,qBAAqBkE,MAArBlE,QAFc,CAGdA,iBAXRE,EAPc,CAsBdA,yBACYF,OADZE,mBAEU,UAAM,CACRF,+CADQ,CAERA,iBAFQ,CAGJA,mBAAJ,MAHQ,GAGuBA,mCAHvB,CAFhBE,SAQW,eAAW,CACdY,kBADc,CAEdd,qBAAqBkE,MAArBlE,QAFc,CAGdA,iBAXRE,EAtBc,CAwCzB,CAxJkF,CAWnFF,sBA+BA,UAA0B,CAEtB2D,oBACU,UAAM,CACRjD,mCAFRiD,SAGa,eAAW,CACpB3D,qBAAqBkE,MAArBlE,QAJJ2D,EAMH,CAlDkF,CA0JnFzD,qBA7IA,UAAgB,CACPF,OAAL,KADY,EAERE,uBACU,CAAC2B,IAAKE,aAAaoC,EAAnB,CADVjE,OAEU,kBAAc,CAChBF,oBAAsB6D,SAAtB7D,CAAsB6D,CAH9B3D,SAKW,UAAW,CACdQ,mCADc,CAEdV,mDAPRE,EAYP,CA+HDA,CAGH,CA/JwC,CADzCH,CADJ,I;;oGCAA,CAAC,UAAY,CACTA,wDACmC,2CACzB,2CAAgD,CAE9CC,gBAF8C,CAG9CA,kBAH8C,CAI9CA,sBAeA,iBAAiC,CAC7BU,eAAe,kBAAoB0D,QAAnC1D,IACH,CArB6C,CAK9CV,oBAkBA,UAAwB,CACpB,MAAO,eAAgB,OAEnB,EAAIA,gBAFe,EAIZ,CAACW,gCAAgCX,cAAjC,WAAiCA,EAAhCW,CAAD,EACH,CAACA,wCAAwCX,cADtC,WACsCA,EAAxCW,CADE,EAEH,CAACA,oDAAoDX,cAFlD,WAEkDA,EAApDW,CAFE,EAGH,CAACA,gDAAgDX,cAHrD,WAGqDA,EAAhDW,CAPT,CASH,CAjC6C,CAmC9CT,qBA5BA,UAAgB,CACZA,8BAEU,kBAAc,CAChBF,wBAHRE,SAKW,eAAW,CACdY,kBANRZ,EASH,CAkBDA,CArCZH,CACmC,CADnCA,CADJ,I;;2GCAA,CAAC,UAAY,CACTA,8DACyC,+DADzCA,WACyC,CAEzC,qEAAuF,CAuDnF,oBAAqB,CACjB,MAAOkB,IAAG,wBAAqB,IACvBC,MAAOC,uBAAX,OAAWA,CADgB,CAEvBC,QAFuB,IAG3BF,gBAH2B,CAI3BA,YAJ2B,CAM3BA,+BAAgC,UAAY,CAEpCA,uBAAJ,OAFwC,EAGpCG,OAAM,mDAANA,IAAM,CAANA,CAHoC,CAMxC,GAAIC,QAAS,GAAb,YAEAA,iBAAmB,UAAY,CAC3BC,QAAQD,OAARC,OADJD,CARwC,CAYxCA,qBAAqBJ,WAArBI,CAAqBJ,CAArBI,CAZJJ,EANJ,CAAOD,CAqBV,CAaD,oBAAqB,yBAEqDjB,OAFrD,0OAIbe,aAAe+C,mBAAf/C,IAA0CsD,eAA1CtD,IAAiEgD,kBAAjEhD,EAAJ,CAA+FuD,gBAJ9E,GAQjBtE,kDARiB,IAWpB,CA6BD,uBAAwB,IAKhBgE,WAAYjC,aAAhB,EALoB,CAOpB,MAAOd,IAAG,wBAAqB,CAE3B,GAAIoC,QAAS,aALjB,+BAKiB,CAETC,OAAQvD,gBAAgBoB,SAFf,IAEDpB,CAFC,yCAKTwD,WAKJ,0BAAwD,CAEpDvD,aAnBR,gBAiB4D,CAGpDA,mBAnBR,6CAgB4D,CAIpDA,0BAJoD,CAKpDA,iBALoD,CAOpDA,cAOA,UAAkB,CACdwD,kBACH,CAhBmD,CAQpDxD,UAUA,UAAc,CACVA,iBADU,CAEVE,uBACY,CACJ2B,IAAKmC,SADD,CADZ9D,OAIU,UAAM,CACRsD,gBALRtD,SAOW,eAAW,CACdsD,uBADc,CAEdxD,iBATRE,EAYH,CAhCmD,CAUpD,UAAgB,CAEf,CAsBDK,EACH,CA7CY,CAAb,CAQAiD,2CAVJ,CAAOvC,CAmDV,CA1LDjB,kBAAe+B,kBAFoE,CAGnF/B,mBAAqB,CACjBe,KADiB,GAEjB+C,iBAFiB,GAGjBO,aAHiB,GAIjBN,gBAJiB,GAKjBO,OALiB,GAMjBC,MANiB,cAQjBC,WAAY,IARK,CAH8D,CAcnFxE,mBAiEA,UAAuB,CACnB0B,iBAAiB,aAAS,CACtB1B,0BAA4B,CAAC,WAEzB2B,IAAKC,GAFoB,CAAD,CADhCF,SAKS,eAAW,CAChB1B,2BANJ0B,EAQH,CAxFkF,CAenF1B,oBAgCA,iBAA+B,OACvBoE,UAAWA,QAAXA,QAA6BA,eAAjC,MAD2B,CAEhB,CAAC,mBAAoB,OAASA,kBAAT,IAAiC,GAAtD,CAFgB,CAKpB,CAAC,mBAAoB,mCAArB,CACV,CArDkF,CAgBnFpE,qBA8KA,UAAyB,CACrB,WADqB,GAGjBA,iBAHiB,CAKbA,OAAJ,KALiB,CAObE,uBACYF,OADZE,kBAEU,UAAM,CACRF,+CADQ,CAERA,iBAFQ,CAGRU,gCALRR,SAQW,eAAW,CACdY,kBADc,CAEdd,qBAAqBkE,MAArBlE,QAFc,CAGdA,iBAXRE,EAPa,CAsBbA,uBACYF,OADZE,kBAEU,UAAM,CACRF,uCADQ,CAERA,iBAFQ,CAGJA,mBAAJ,MAHQ,GAGuBA,mCAHvB,CAFhBE,SAQW,eAAW,CACdY,kBADc,CAEdd,qBAAqBkE,MAArBlE,QAFc,CAGdA,iBAXRE,EAtBa,CAwCxB,CAtOkF,CAiBnFF,qBAsFA,UAAyB,CAErB2D,oBACU,UAAM,CACRjD,gCAFRiD,SAIW,eAAW,CACd3D,qBAAqBkE,MAArBlE,QALR2D,EAOH,CAhHkF,CAkBnF3D,mBAgGA,UAAuB,CAEnB,GAAIgE,WAAYjC,aAAhB,GACA/B,iBAHmB,CAInBE,4BAA4B,CAACiE,GAAIH,SAAL,CAA5B9D,OACU,UAAM,CACRF,+CADQ,CAERA,iBAHRE,SAKW,UAAM,CACTF,8EADS,CAETA,iBAPRE,EAUH,CAhIkF,CAoBnFF,oBApBmF,CAwOnFE,qBAlNA,UAAgB,CACZA,gCAEU,oBAAgB,CAClBF,4BAHRE,SAKW,eAAW,CACdY,kBANRZ,EADY,CAUPF,OAAL,KAVY,EAYRE,qBACU,CAAC2B,IAAKE,aAAaoC,EAAnB,CADVjE,OAEU,iBAAa,CACfF,mBAAqBoE,QAArBpE,CAAqBoE,CAH7BlE,SAKW,UAAW,CACdQ,gCADc,CAEdV,6CAPRE,EAWP,CA2LDA,CAGH,CA7OwC,CADzCH,CADJ,I;;mGCAA,CAAC,UAAY,CACTA,uDACkC,0CAA8C,uBAA+C,CAEvHC,2BAFuH,CAIvHA,YAEA,UAAgB,CACZA,iBADY,CAGZE,gCAAgCF,OAAhCE,wBAA+D,UAAQ,CAEnEF,iBAFmE,CAGnEA,yDAHJE,SAIS,eAAW,CAChBY,kBADgB,CAEhBd,qBAAqBkE,MAArBlE,QAFgB,CAGhBA,iBAPJE,EAUH,CAnBsH,CA6BvHA,qBARA,UAAgB,CAEZA,qCAAqC,cAAyB,IAAvBuE,mBAAuB,KAAvBA,iBAAuB,CAC1DzE,0CADJE,EAIH,CAEDA,CA9BRH,CACkC,CADlCA,CADJ,I;;wGCAA,CAAC,UAAY,CACTA,2DACsC,0CAA8C,uBAA+C,CAE3HC,kBAF2H,CAG3HA,oBAH2H,CAI3HA,iBAJ2H,CAK3HA,2BAL2H,CAO3HA,cAqBA,eAAsB,CAClBA,kBACH,CA9B0H,CAQ3HA,sBAwBA,sBAAsC,IAC9BgD,OAAJ,8BADkC,CAElC,MAFkC,6EAGlC,cAASoB,OAAT,WAAoBpE,OAApB,QAAoBA,CAApB,eAAoBA,GAApB,8DAASoE,OAAT,CAAqC,WAArC,EAEI,GAFJ,+BAIQC,eAAiBK,SAASN,QAA9B,YAAqBM,CAJzB,GAKQC,MALR,CAMQ3B,MAAQoB,kBAARpB,GANR,CAHkC,yLAalC,YACH,CA9C0H,CAgD3H9C,qBAtCA,UAAgB,CAEZA,gCAAgC,oBAAgB,CAE5CF,4BAF4C,CAI5CE,oCAAoC,uBAAmB,CAEnDA,qBAAqB,CAACmE,aAAcO,aAAf,CAArB1E,OAAyD,kBAAc,CAEnEF,wBAFmE,CAGnEA,iBAHJE,EAFJA,EAJJA,EAcH,CAsBDA,CAjDRH,CACsC,CADtCA,CADJ,I;;yHCsD8C8E,U,CAtD9C,CAAC,UAAY,CAurBT,wBAAyB,OACjBC,MAAJ,GADqB,CAEjB,UAAUD,WAAW,GAAKC,SAAhBD,KAAV,iBAAkDA,WAAW,GAAKC,SAAhBD,KAAlD,iBAA0FA,aAAWC,aAAXD,EAA1F,OAFiB,CAIjB,GAEP,CAED,gCAAiC,gBAUlBA,UAVkB,CAEzBE,IAAJ,EAF6B,CAGzBC,IAAJ,SAH6B,CAKvBC,IAAN,KAL6B,CAMvBC,KAAN,IAN6B,CAOvBC,OAAN,EAP6B,CAyB7B,MAhBIH,KAAJ,GAgBA,GAfID,KAAOF,WAAWG,IAAXH,KAAPE,IAeJ,CAdIC,KAAOH,WAAWG,IAAXH,KAAPG,GAcJ,EAXIA,IAAJ,IAWA,GAVID,KAAOF,WAAWG,IAAXH,MAAPE,IAUJ,CATIC,KAAOH,WAAWG,IAAXH,MAAPG,IASJ,EANIA,IAAJ,MAMA,GALID,KAAOF,WAAWG,IAAXH,QAAPE,GAKJ,CAJIC,KAAOH,WAAWG,IAAXH,QAAPG,MAIJ,KAEH,CAztBDjF,0DACqC,0DAC3B,2CAA8D,CAE5DC,iBAF4D,CAG5DA,4BAH4D,CAK5DA,uBAoBA,gBAAiC,OAE7B,OAF6B,EAI7B,WAAI,QAAOoF,QAAP,WAJyB,GAKzBA,qBALyB,CAOzBA,iBAPyB,CASzBlF,2CAC4BkF,OAD5BlF,SAEU,4BAAwB,CAG1BkF,iBAH0B,CAI1BA,mBAAqB,CACjB,CACIC,MADJ,UAEInC,KAAMoC,aAAaC,sCAAD,MAAZD,CAFV,CADiB,CAKjB,CACID,MADJ,iBAEInC,KAAMqC,0CAA4C,WAFtD,CALiB,CASjB,CACIF,MADJ,WAEInC,KAAM2B,WAAW,IAAMU,+CAAjBV,WAA+E,IAFzF,CATiB,CAajB,CACIQ,MADJ,YAEInC,KAAM2B,WAAW,IAAMU,+CAAjBV,YAAgF,IAF1F,CAbiB,CAiBjB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMU,wDAAjBV,eAA4F,OAFtG,CAjBiB,CAqBjB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMU,wDAAjBV,gBAA6F,OAFvG,CArBiB,CAN7B3E,SAiCW,eAAW,CACdY,oBAlCRZ,EATyB,EAkDtBkF,OAAP,WAlD6B,EAEhB,EAiDhB,CA5E2D,CAM5DpF,uBAwEA,gBAAiC,OAE7B,OAF6B,EAI7B,WAAI,QAAOoF,QAAP,WAJyB,GAKzBA,qBALyB,CAMzBA,iBANyB,CASzBlF,2CAC4BkF,OAD5BlF,SAEU,4BAAwB,CAE1BkF,iBAF0B,IAItBI,SAAJ,CAJ0B,CAKtBC,QADJ,CAJ0B,CAMtBC,QAFJ,CAJ0B,6EAQ1B,cAASZ,IAAT,WAAiBS,mBAAjB,eAAiBA,CAAjB,eAAiBA,GAAjB,yFAAST,IAAT,CAAqD,WAArD,CAEQA,KAAJ,GAFJ,GAGQU,SAAWV,SAAXU,GAHR,CAIQC,SAAWX,SAAXW,GAJR,CAKQC,SAAWZ,SAAXY,EALR,CAR0B,yLAkB1BN,mBAAqB,CACjB,CACIC,MADJ,UAEInC,KAAMoC,aAAaC,sCAAD,MAAZD,CAFV,CADiB,CAKjB,CACID,MADJ,oBAEInC,KAAMqC,0CAA4C,QAFtD,CALiB,CASjB,CACIF,MADJ,WAEInC,KAAM2B,WAAW,IAAMU,+CAAjBV,WAA+E,IAFzF,CATiB,CAajB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAXA,aAAkC,IAF5C,CAbiB,CAiBjB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAXA,aAAkC,IAF5C,CAjBiB,CAqBjB,CACIQ,MADJ,aAEInC,KAAM2B,WAAW,IAAXA,aAAkC,KAF5C,CArBiB,CAyBjB,CACIQ,MADJ,YAEInC,KAAM2B,WAAW,IAAMU,+CAAjBV,YAAgF,IAF1F,CAzBiB,CA6BjB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMU,wDAAjBV,eAA4F,OAFtG,CA7BiB,CAiCjB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMU,wDAAjBV,gBAA6F,OAFvG,CAjCiB,CApB7B3E,SA2DW,eAAW,CACdY,oBA5DRZ,EATyB,EA2EtBkF,OAAP,WA3E6B,EAEhB,EA0EhB,CA1J2D,CAO5DpF,uBAqJA,UAA2B,CACvB,QACH,CA9J2D,CAQ5DA,qBAwJA,gBAA+B,OAG3B,OAH2B,EAK3B,WAAI,QAAOoF,QAAP,WALuB,GAMvBA,qBANuB,CAQvBA,iBARuB,CAUvBlF,yCAC0BkF,OAD1BlF,SAEU,4BAAwB,CAE1BkF,iBAF0B,CAG1BA,mBAAqB,CACjB,CACIC,MADJ,UAEInC,KAAMoC,aAAaC,sCAAD,MAAZD,CAFV,CADiB,CAKjB,CACID,MADJ,WAEInC,KAAM2B,WAAW,IAAMU,+CAAjBV,WAA+E,IAFzF,CALiB,CASjB,CACIQ,MADJ,YAEInC,KAAM2B,WAAW,IAAMU,+CAAjBV,YAAgF,IAF1F,CATiB,CAajB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMU,wDAAjBV,eAA4F,OAFtG,CAbiB,CAiBjB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMU,wDAAjBV,gBAA6F,OAFvG,CAjBiB,CAqBjB,CACIQ,MADJ,iBAEInC,KAAM2B,WAAW,IAAMU,mDAAjBV,SAAiF,IAF3F,CArBiB,CAyBjB,CACIQ,MADJ,YAEInC,KAAM2B,WAAW,IAAMU,mDAAN,IAAXV,UAAwF,OAFlG,CAzBiB,CAL7B3E,SAqCW,eAAW,CACdY,oBAtCRZ,EAVuB,EAsDpBkF,OAAP,WAtD2B,EAGd,EAoDhB,CAvN2D,CAS5DpF,kBAgNA,gBAA4B,CACxBU,gDAAyC0E,OAAzC1E,iBAAwD0E,OAAxD1E,IACH,CA3N2D,CA6N5DR,qBAlNA,UAAgB,CAEZA,qCAEU,4BAAwB,CAC1BF,4CAHRE,SAKW,UAAW,CALtBA,EAUH,CAsMDA,CA/NZH,CACqC,CADrCA,CADS,CAoOTA,gEAC2C,sEACjC,kEAAyE,CA0BvE,eAAgB,CAEZG,8BAA8B,kBAAY,CACtCF,wBADJE,EAFY,CAMZA,qCAEU,4BAAwB,CAE1BF,4CAF0B,oFAI1B,eAASoF,MAAT,YAAmBpF,0BAA0BA,OAA7C,IAAmBA,EAAnB,eAAmBA,GAAnB,6FAASoF,MAAT,CAA2D,YAA3D,CACQA,YAAcpF,OAAlB,EADJ,GAEQA,oBAFR,CAGQ2F,cAHR,CAJ0B,gMAW1B,OAAQ5D,aAAR,MACI,iBAAmB,CACf7B,2CAA2C6B,aAA3C7B,wBADe,CAEf,KACH,CAED,iBAAmB,CACfA,2CAA2C6B,aAA3C7B,wBADe,CAEf,KACH,CAED,eAAiB,CACbA,yCAAyC6B,aAAzC7B,sBADa,CAEb,KACH,CAED,iBAAmB,CACfA,2CAA2C6B,aAA3C7B,wBADe,CAEf,KACH,CAnBL,CAbRA,SAoCW,UAAW,CApCtBA,EAyCH,CAED,yBAA0B,oFACtB,eAASkE,OAAT,YAAoBpE,OAApB,QAAoBA,CAApB,eAAoBA,GAApB,6FACI,GADKoE,OACL,CADiC,YACjC,CAAIA,qCAAyCA,mCAA7C,KACI,cAHc,gMAMtB,WACH,CAED,0BAA2B,oFACvB,eAASwB,CAAT,YAAc5F,0BAAd,UAAcA,CAAd,eAAcA,GAAd,6FACI,GADK4F,CACL,CADgD,YAChD,CAAIA,WAAeA,QAAnB,GACI,QAHe,gMAKvB,WACH,CAED,wBAAyB,oFACrB,eAASA,CAAT,YAAc5F,0BAAd,QAAcA,CAAd,eAAcA,GAAd,6FACI,GADK4F,CACL,CAD8C,YAC9C,CAAIA,WAAeA,QAAnB,GACI,QAHa,gMAKrB,WACH,CA0ED,wCAAyC,CACrC5F,qEADqC,CAGrCA,sCAHqC,CAKrCA,0BAA4B,CACxB,CACIqF,MADJ,UAEInC,KAAMoC,aAAaO,mCAAD,MAAZP,CAFV,CADwB,CAKxB,CACID,MADJ,iBAEInC,KAAM2C,uCAAyC,WAFnD,CALwB,CASxB,CACIR,MADJ,WAEInC,KAAM2B,WAAW,IAAMgB,4CAAjBhB,WAA4E,IAFtF,CATwB,CAaxB,CACIQ,MADJ,YAEInC,KAAM2B,WAAW,IAAMgB,4CAAjBhB,YAA6E,IAFvF,CAbwB,CAiBxB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMgB,qDAAjBhB,eAAyF,OAFnG,CAjBwB,CAqBxB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMgB,qDAAjBhB,gBAA0F,OAFpG,CArBwB,CA2B/B,CAED,wCAAyC,CACrC7E,qEADqC,CAGrCA,sCAHqC,IAKjCwF,SAAJ,CALqC,CAMjCC,QADJ,CALqC,CAOjCC,QAFJ,CALqC,gFASrC,eAASZ,IAAT,YAAiBe,gBAAjB,eAAiBA,CAAjB,eAAiBA,GAAjB,6FAASf,IAAT,CAAkD,YAAlD,CAEQA,KAAJ,GAFJ,GAGQU,SAAWV,SAAXU,GAHR,CAIQC,SAAWX,SAAXW,GAJR,CAKQC,SAAWZ,SAAXY,EALR,CATqC,gMAmBrC1F,0BAA4B,CACxB,CACIqF,MADJ,UAEInC,KAAMoC,aAAaO,mCAAD,MAAZP,CAFV,CADwB,CAKxB,CACID,MADJ,oBAEInC,KAAM2C,uCAAyC,QAFnD,CALwB,CASxB,CACIR,MADJ,WAEInC,KAAM2B,WAAW,IAAMgB,4CAAjBhB,WAA4E,IAFtF,CATwB,CAaxB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAXA,aAAkC,IAF5C,CAbwB,CAiBxB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAXA,aAAkC,IAF5C,CAjBwB,CAqBxB,CACIQ,MADJ,aAEInC,KAAM2B,WAAW,IAAXA,aAAkC,KAF5C,CArBwB,CAyBxB,CACIQ,MADJ,YAEInC,KAAM2B,WAAW,IAAMgB,4CAAjBhB,YAA6E,IAFvF,CAzBwB,CA6BxB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMgB,qDAAjBhB,eAAyF,OAFnG,CA7BwB,CAiCxB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMgB,qDAAjBhB,gBAA0F,OAFpG,CAjCwB,CAsC/B,CAED,sCAAuC,CACnC7E,mEADmC,CAGnCA,sCAHmC,CAKnCA,0BAA4B,CACxB,CACIqF,MADJ,UAEInC,KAAMoC,aAAaO,mCAAD,MAAZP,CAFV,CADwB,CAKxB,CACID,MADJ,WAEInC,KAAM2B,WAAW,IAAMgB,4CAAjBhB,WAA4E,IAFtF,CALwB,CASxB,CACIQ,MADJ,YAEInC,KAAM2B,WAAW,IAAMgB,4CAAjBhB,YAA6E,IAFvF,CATwB,CAaxB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMgB,qDAAjBhB,eAAyF,OAFnG,CAbwB,CAiBxB,CACIQ,MADJ,eAEInC,KAAM2B,WAAW,IAAMgB,qDAAjBhB,gBAA0F,OAFpG,CAjBwB,CAqBxB,CACIQ,MADJ,iBAEInC,KAAM2B,WAAW,IAAMgB,gDAAjBhB,SAA8E,IAFxF,CArBwB,CAyBxB,CACIQ,MADJ,YAEInC,KAAM2B,WAAW,IAAMgB,gDAAN,IAAXhB,UAAqF,OAF/F,CAzBwB,CA8B/B,CAED,yBAAyC,CAExC,CAmDD,wCAA0C,CAEtCiB,oBAAoB,CAChBC,SADgB,OAEhBC,KAAML,QAFU,GAGhBM,KAAMnB,KAHU,WAIhBoB,IAAKpB,KAJW,UAKhBqB,WAAYrB,KAAKsB,QALD,CAApBN,CAAmB,IAAnBA,OAOH,CAED,gDAAmD,CAmB/C,iCAAkC,CAgB9B,qBAAsB,IACdO,SAAUlF,wBAAd,uBAAcA,CADI,CAGdmF,WAAU,iBAAaC,OAAb,iBAA4BA,OAA1C,GAAc,CAHI,CAIdJ,WAAaI,OADjB,UAHkB,CAMlBF,2xBAEH,CAtBD,GAAIN,UAAWQ,OAAf,SACIP,KAAOO,OADX,KAEIN,KAAOM,OAFX,KAGIL,IAAMK,OAHV,IAIIJ,WAAaI,OAJjB,WAMAvG,cAR8B,CAU9BA,uHAV8B,CAY9BA,mBAsCA,UAAuB,CACnB,GAAIqG,SAAUlF,wBAAd,uBAAcA,CAAd,CAEAnB,cAHmB,CAInBE,8BAA8BF,OAA9BE,+BAAqE,kBAAY,CACzEF,cADyE,CAEzE,GAAIwG,KAAMrF,uBAAV,KAAUA,CAAV,CAEAqF,cAAgBC,SAAhBD,IAJyE,CAKzEA,8BALyE,CAMzEA,sBANyE,CAOzEA,0BAPyE,CAQzEA,yBARyE,CASzEA,4BATyE,CAWzEH,oBAXyE,CAYzEA,6BAZyE,CAazEA,wBAbRnG,EAiBH,CAvE6B,CAa9BF,kBAaA,UAAsB,IAEdqG,SAAUlF,wBAAd,uBAAcA,CAFI,CAIduF,MAAQvF,uBAAZ,OAAYA,CAJM,CAMdgD,GAAMwC,KAAD,GAACA,GAAD,QAACA,CAAV,EAAUA,CANQ,CAQlBN,oBARkB,CAUlBvF,6DAAsD8F,mBAAmB5G,OAAzEc,iBAAsD8F,CAAtD9F,cAVkB,CAYlB4F,WAZkB,CAalBA,qBAbkB,CAclBA,qBAdkB,CAelBA,iFAfkB,CAgBlBA,2DAAsDE,mBAAmB5G,OAAzE0G,iBAAsDE,CAAtDF,aAhBkB,CAkBlBL,qBAlBkB,CAoBlBQ,WAEH,CAhD6B,CAc9B7G,4BA2DH,CA1FD,WAEI8G,cAAJ,OAAIA,CAFJ,CAGaC,QAATR,CAASQ,CAHb,CAKIR,OALJ,CAeA/C,eAPa,CACTD,WADS,iBAETyD,YAFS,yDAGTC,OAHS,MAITC,sBAJS,CAOb1D,CA4EH,CAzcD,GAAImC,SAAJ,KAEA3F,YAAc+B,aAAd/B,IAJuE,CAKvEA,UAAY+B,aAAZ/B,EALuE,CAMvEA,8BANuE,CAOvEA,uBAPuE,CAQvEA,kBARuE,CASvEA,kBATuE,CAWvEA,uBAiGA,UAA2B,OACnBA,gBAAiBA,cAArB,WADuB,CAEZA,cAAP,WAFmB,CAInB,EAEP,CAlHsE,CAYvEA,4BAZuE,CAavEA,kCAbuE,CAcvEA,8BAduE,CAevEA,yBAqGA,qBAAyC,CACrC,GAAImH,SAAU3D,+CACW4D,WAAWtC,KAAXsC,UADX5D,+JAGsC4D,WAAWtC,KAAXsC,UAHtC5D,kGAAd,QAAcA,CAAd,CASAA,6BAA6B,UAAY,CAGrCtD,4BAA4B,CACxBmH,KADwB,aAExBC,GAAI3B,QAFoB,GAGxB4B,IAAKzC,KAAKyC,GAHc,CAA5BrH,OAIQ,gBAAU,CACdY,mBADc,CAEdP,MANJL,EAHJsD,EAaG,UAAY,CAbfA,EAgBH,CA9IsE,CAgBvExD,yBAgIA,qBAAyC,CACrC,GAAImH,SAAU3D,+CACW4D,WAAWtC,KAAXsC,MADX5D,+JAGsC4D,WAAWtC,KAAXsC,MAHtC5D,kGAAd,QAAcA,CAAd,CASAA,6BAA6B,UAAY,CAGrCtD,4BAA4B,CACxBmH,KADwB,aAExBC,GAAI3B,QAFoB,GAGxB4B,IAAKzC,KAAKyC,GAHc,CAA5BrH,OAIQ,gBAAU,CACdY,mBADc,CAEdP,MANJL,EAHJsD,EAaG,UAAY,CAbfA,EAgBH,CA1KsE,CAiBvExD,8CAjBuE,CAkBvEA,mBAiTA,oBAAkC,CAE9B8F,oBAAoB,CAChBC,SADgB,OAEhBC,KAAMwB,cAAc1C,KAAd0C,cAFU,GAGhBvB,KAAMnB,KAHU,WAIhBoB,IAAKpB,KAJW,UAKhBqB,WAAYrB,KAAK2C,SALD,CAApB3B,CAAmB,IAAnBA,OAOH,CA5UsE,CAmBvE9F,oBA2TA,oBAAmC,CAE/Bc,iBAF+B,IAI3B4G,SAAJ,EAJ+B,CAM3BC,aAAeC,YAAY9C,YAAZ8C,QAAnB,EAN+B,gFAQ/B,eAASC,CAAT,YAAe/C,YAAf,IAAeA,CAAf,eAAeA,GAAf,6FAAS+C,CAAT,CAAiC,YAAjC,CACIH,aAAa,CACT3B,SADS,OAETC,KAFS,aAGTC,KAAMnB,YAHG,KAIToB,IAAKpB,YAJI,IAKTqB,WAAY0B,EAAEC,MALL,CAAbJ,CAT2B,gMAkB/B5B,oBAAmB,OAAnBA,CAAmB,IAAnBA,OACH,CAjWsE,CAoBvE9F,sBA8RA,cAA8B,CAC1BU,0DAAmD8G,cAAc1C,KAAd0C,cAAnD9G,IACH,CApTsE,CAqBvEV,oBAiSA,cAA4B,CACxBU,wDAAiDkH,YAAY9C,YAAZ8C,QAAjDlH,IACH,CAxTsE,CAsBvEV,mBAoSA,cAA2B,CACnB8E,KAAJ,IADuB,CAEnBpE,uCAAgC0G,WAAWtC,KAAXsC,MAAhC1G,KAFmB,CAKnBA,uCAAgC0G,WAAWtC,KAAXsC,UAAhC1G,KAEP,CAjUsE,CAuBvEV,gCAvBuE,CAwBvEA,0BAxBuE,CA6cvEE,0BA/cZH,CAC2C,CAD3CA,CApOJ,I;;qGCAA,CAAC,UAAY,CACTA,yDAEQ,2DACI,uDAA4D,CAsBhE,8BAA+B,IAKvBgI,WAAYC,QAAhB,GAL2B,CAO3B,MAAO/G,IAAG,wBAAqB,CAE3B,GAAIoC,QAAS,aALjB,+BAKiB,CAETC,OAAQvD,gBAAgBoB,SAFf,IAEDpB,CAFC,yCAKTwD,WAKJ,0BAA6C,CAEzCvD,aAnBR,gBAiBiD,CAGzCA,mBAnBR,8CAgBiD,CAIzCA,0BAJyC,CAKzCA,iBALyC,CAOzCA,cAOA,UAAkB,CACdwD,kBACH,CAhBwC,CAQzCxD,UAUA,UAAc,CACVA,iBADU,CAEVE,uBACY,CACJ2B,IAAKkG,SADD,CADZ7H,OAIU,UAAM,CACRF,iBADQ,CAERwD,gBANRtD,SAUW,eAAW,CACdY,kBADc,CAEdd,iBAZRE,EAeH,CAnCwC,CAUzC,UAAgB,CAEf,CAyBDK,EACH,CAhDY,CAAb,CAQAiD,2CAVJ,CAAOvC,CAsDV,CASD,uBAAuB,CACnBjB,iBADmB,CAEnBE,8BAA8B,kBAAc,CACxCF,wBADwC,CAGxC,OAHwC,mBAKpC,GAAIgI,SAAUC,SAAd,CAAcA,CAAd,CAEA/H,qBAAqB,CACjB2B,IAAImG,QAAQE,QADK,CAArBhI,OAEQ,kBAAc,CAClB8H,yBADkB,CAElBhI,iBAJJE,EAPoC,CAGxC,CAAQiI,EAAR,EAAYA,EAAEF,SAAd,WAAkC,MAA1BE,CAA0B,CAHtCjI,EAgBH,CA5GDF,kBAFgE,CAGhEA,iBAHgE,CAKhEA,eASA,iBAA0B,CACtBU,eAAe,mBAAqBsH,QAApCtH,IACH,CAhB+D,CAMhEV,wBAYA,cAA+B,CAC3B,MAAO,yBAAP,EAAO,CAA8BoI,qBAA9B,KACV,CApB+D,CAOhEpI,cA8EA,iBAAwB,CACpB2D,2BAA2B,UAAI,CAC3B3D,uCAD2B,CAE3B4D,cAFJD,EAIH,CA1F+D,CAgHhEzD,qBAvGA,UAAgB,CACZ0D,cAEH,CAoGD1D,CAnHRH,CAEQ,CAFRA,CADJ,I;;wrBCAA,CAAC,UAAY,CACTA,+DAEQ,4EAFRA,WAEQ,CAGR,gFAAiG,CAyH7F,uBAAwB,IAKhBgI,WAAYhG,aAAhB,EALoB,CAOpB,MAAOd,IAAG,wBAAqB,CAE3B,GAAIoC,QAAS,aALjB,+BAKiB,CAETC,OAAQvD,gBAAgBoB,SAFf,IAEDpB,CAFC,yCAKTwD,WAKJ,0BAA6C,CAEzCvD,aAnBR,gBAiBiD,CAGzCA,mBAnBR,8CAgBiD,CAIzCA,0BAJyC,CAKzCA,iBALyC,CAOzCA,cAOA,UAAkB,CACdwD,kBACH,CAhBwC,CAQzCxD,UAUA,UAAc,CACVA,iBADU,CAEVE,uBACY,CACJ2B,IAAKkG,SADD,CADZ7H,OAIU,UAAM,CACRF,iBADQ,CAERwD,gBANRtD,SAUW,eAAW,CACdY,kBADc,CAEd0C,uBAFc,CAGdxD,iBAbRE,EAgBH,CApCwC,CAUzC,UAAgB,CAEf,CA0BDK,EACH,CAjDY,CAAb,CAQAiD,2CAVJ,CAAOvC,CAuDV,CAiBD,uBAAuB,CACnB,MAAOjB,gCAAkCA,iCAAlCA,EAAP,CAAkFA,qCACrF,CAxMDA,kBAAe+B,kBAF8E,CAI7F/B,mBAAqB,CACjBe,KADiB,GAEjBC,YAFiB,GAGjBkH,SAHiB,GAIjB3D,MAAM,EAJW,CAJwE,CAW7FvE,kBAqCA,UAAsB,CAClBa,sCAAsC,iBAAa,iFAC/C,cAASF,IAAT,WAAiBX,mBAAjB,QAAiBA,CAAjB,eAAiBA,GAAjB,yFACI,GADKW,IACL,CAD0C,WAC1C,CAAIA,WAAayD,QAAjB,IACI,MAHuC,yLAO/CpE,yCAPJa,EASH,CA1D4F,CAY7Fb,wBAgDA,UAA4B,CACxBA,8BACH,CA9D4F,CAa7FA,qBAmDA,iBAAgC,CAI5B,IAAK,GAAL,KAFAc,qBAEA,CAAcd,mBAAd,SAA2C,CAEvC,GAAIW,MAAOX,4BAAX,CAAWA,CAAX,CAEIW,WAAayD,QAAjB,GAJuC,EAKnCpE,uCAEP,CACJ,CA5E4F,CAc7FA,cAgEA,UAAiB,CAEb,cAFa,CAINA,OAAH,KAJS,EAKLA,iBALK,CAMLE,wCACOF,OADPE,aAEIgI,SAAS,gCAAgC,qBAAQvH,MAAR,GAAhC,EAFbT,SAGQ,UAAI,CACRF,+CADQ,CAERA,iBAFQ,CAGRU,iCANJR,SAOS,eAAW,CAChBY,kBADgB,CAEhBd,qBAAqBkE,MAArBlE,QAFgB,CAGhBA,iBAVJE,EANK,GAoBLF,uBAA4B+B,aAA5B/B,EApBK,CAqBLA,iBArBK,CAsBLE,wCACOF,OADPE,aAEIgI,SAAS,gCAAgC,qBAAQvH,MAAR,GAAhC,EAFbT,SAGQ,UAAI,CACRF,8CADQ,CAERA,iBALJE,SAOS,eAAW,CAChBY,kBADgB,CAEhBd,qBAAqBkE,MAArBlE,QAFgB,CAGhBA,iBAVJE,EAtBK,EAsCTF,kDAGP,CAvH4F,CAe7FA,cA0KA,UAAiB,CAEb2D,oBAAoB,UAAI,CACpB3D,uCADoB,CAEpBA,iBAFoB,CAGpBwD,gBAHoB,CAIpB9C,iCAJJiD,SAKS,eAAW,CAChB7C,kBADgB,CAEhBd,qBAAqBkE,MAArBlE,QAFgB,CAGhBA,iBARJ2D,EAWH,CAtM4F,CA4M7FzD,qBA3LA,UAAgB,CACRF,OAAJ,KADY,EAERE,qBAAqB,CACjB2B,IAAIE,aAAaoC,EADA,CAArBjE,OAEQ,kBAAY,CAEhB,GAAI8H,SAAUC,SAAd,CAAcA,CAAd,CAEA/H,qBAAqB,CACjB2B,IAAImG,QAAQE,QADK,CAArBhI,OAEQ,kBAAY,CAEhBF,mBAAqB,CACjBmE,GAAI6D,QADa,IAEjBjH,KAAMiH,QAFW,KAGjBhH,YAAYgH,QAHK,YAIjBzD,MAAMyD,QAJW,MAKjBE,SAAUA,QALO,CAJzBhI,EANJA,EA2BP,CA8JDA,CAEH,CAjNO,CAFRH,CADJ,I;;8JCZA,0C,CAAA,6JAeA,CAAC,UAAY,CAET,GAAKsI,WAAL,EAEAtI,2DACsC,iEAC9B,6DAAoE,CA8EhE,8BAA+B,CAE3B,UAAI,QAAOuI,SAAP,UAFuB,GAGvBC,SAHuB,CAIvBvI,6BAJuB,CAKvBsI,oEALuB,CAQ9B,CAiiBD,sBAAuB,CACnB,GAAIE,QACA,yMADJ,SACI,CADJ,CAWA,MADA,UACA,GADgBH,WAChB,EAAOG,OAAOH,YAAcG,OAA5B,MAAOA,CAnoBqD,CAEhExI,qCAFgE,CAGhEA,eAAiB,uBAuCjB,UAAuB,CAEnB,GAAIyI,aAAJ,OAEAjF,eAAe,CACXwD,YADW,6CAEXzD,WAAY,0BAAuB,CAE/BvD,cAAgB,UAAY,CACxBwD,gBADJxD,CAF+B,CAM/BA,YAAc,UAAY,CAEtByI,gCAAkCzI,YAAlCyI,SAFsB,CAGtBA,8BAAgCzI,YAAhCyI,OAHsB,CAKtB,UAAI,QAAOA,2BAAP,aALkB,EAMlBA,yCANkB,CAQtBjF,gBARJxD,CAN+B,CAiB/BA,YAAc,CACV0I,UAAW,SAASD,0BADV,KACC,CADD,CAEVE,QAAS,SAASF,0BAAT,IAFC,CAKjB,CAxBU,CAAfjF,CA0BH,CArEgB,kBAuEjB,UAA4B,CACxBxD,wBACH,CAzEgB,CAIb4I,MAimBJ,UAA8B,IAEtBC,QAAJ,EAF0B,CAW1B,MAPAA,cAAe,GAAfA,KAOA,CANAA,qBAAqBA,aAArBA,OAAqBA,GAJrB,MAIAA,CAMA,CALAA,8BAKA,CAHAA,WAAa,GAAbA,KAGA,CAFAA,4BAEA,OACH,CAjnBgB,GAKbC,WALa,GAMbC,cAAe,UAAM,CACpB,CAPY,CAH+C,CAahE/I,gBAAkB,CACd,CACIe,KADJ,cAEIiI,KAFJ,6BAGIzF,WAuER,UAA2B,CA0BvB,wBAAyB,IAEjB0F,aAAc/F,KAAlB,IAFqB,CAGjBgG,kBAAoBhG,KAAxB,MAHqB,CAIjBiG,eAAiBjG,KAArB,GAJqB,CAKjBkG,eAAiBlG,KAArB,SALqB,CAOjBmG,IAAMlI,mEAAV,CAAUA,CAPW,CAQrBA,oDARqB,CASrBA,gDAAgDA,uBAAhDA,QAAgDA,CAAhDA,CATqB,CAUrBkI,IAAMlI,mEAANkI,CAAMlI,CAVe,CAYrBkI,cAZqB,CAaJ,cAAe,CAC5B,KAD4B,OAE5B,KAAQ,CACJ,OADI,YAEJ,SAAY,CACR,CACI,MADJ,iBAEI,KAFJ,uBAII,gBAJJ,sBAKI,YAAe,CALnB,CADQ,CAOL,CACC,MADD,kBAEC,KAFD,uBAIC,gBAJD,sBAKC,YAAe,CALhB,CAPK,CAcR,CACI,MADJ,qBAEI,KAFJ,0BAII,gBAJJ,sBAKI,YAAe,CALnB,CAdQ,CAFR,CAFoB,CA0B5B,QAAW,CACPC,OAAQ,CACJC,QAAS,CACLC,KADK,EAELC,MAFK,EAGLC,IAHK,EAILC,OAAQ,CAJH,CADL,CADD,CASPC,OAAQ,CACJC,SADI,oBAGJC,OAAQ,CACJC,UAAW,OADP,CAHJ,CATD,CAgBPC,MAAO,CACHC,UADG,CAhBA,CAmBPC,SAAU,YAEND,UAFM,CAnBH,CAuBPE,OAAQ,CACJC,MAAO,CAAC,YAEJH,UAFI,CAAD,CADH,CAKJI,MAAO,CAAC,YAEJC,UAFI,CAAD,CALH,CAvBD,CA1BiB,CAAf,CA6DpB,CAED,kBAAmB,CACf,MAAO,aAAY,iBAAqB,CAEpCtK,eAAiB,CACbuK,IADa,EAEbC,SAFa,EAGbC,OAAQ,CAHK,CAFmB,CAQpCvK,8BAA8B,CAC1BwK,KAAM1K,2BADoB,OACpBA,EADoB,CAE1B2K,MAAO3K,kCAFmB,CAA9BE,OAGQ,cAAU,IAEV2I,QAAS,CACT+B,KADS,GAETH,OAFS,GAGTF,IAHS,GAITM,UAAW,EAJF,CAFC,6EASd,wIAAuB,IAAdlK,MAAc,YAEfiK,KAAO,SAASjK,KAApB,IAAW,CAFQ,CAInBkI,2BAAoB+B,KAApB/B,OAAoB+B,EAApB/B,aAAsC+B,gBAAtC/B,GAJmB,CAKnBA,mBAAmBlI,YAAnBkI,MALmB,CAMnBA,gBAAgBlI,cAAhBkI,MANmB,CAOnBA,sBAAsBlI,gBAAtBkI,MAPmB,CASnB7I,oBAAsBW,cAAtBX,KATmB,CAUnBA,yBAA2BW,gBAA3BX,KAEH,CArBa,yLAuBdA,sBAAwB6I,cAAcA,qBAAtC7I,CAAwB6I,CAvBV,CAyBdtH,eA5BJrB,EARJ,CAAO,CAyCV,CA9IDF,uEAFuB,CAIvBA,eAAiB,CACbuK,IADa,EAEbC,SAFa,EAGbC,OAAQ,CAHK,CAJM,CAUvBlC,QAAU,UAAO,CAEbvI,mBAFa,CAGbA,mCAAqC,UAAM,CAA3CA,CAHJuI,CAVuB,CAiBvBvI,mCAAqC,UAAM,CACvC8K,yBADJ9K,CAjBuB,CAsBvB+K,SAAS,UAAM,CACXD,yBADI,CAARC,GA4HH,CA5NG,CADc,CAKX,CACChK,KADD,WAECiI,KAFD,+BAGCzF,WAuNR,UAAwB,CAyBpB,wBAAyB,IAEjB0F,aAAc/F,KAAlB,IAFqB,CAGjB8H,kBAAoB9H,KAAxB,WAHqB,CAIjB+H,mBAAqB/H,KAAzB,OAJqB,CAMjBmG,IAAMlI,qEAAV,CAAUA,CANW,CAOrBA,sDAPqB,CAQrBA,kDAAkDA,uBAAlDA,QAAkDA,CAAlDA,CARqB,CASrBkI,IAAMlI,qEAANkI,CAAMlI,CATe,CAWrBkI,cAXqB,IAYjB6B,YAAa,cAAe,CAC5B,KAD4B,OAE5B,KAAQ,CACJ,OADI,YAEJ,SAAY,CACR,CACI,MADJ,eAEI,KAFJ,0BAII,gBAJJ,sBAKI,YAAe,CALnB,CADQ,CAFR,CAFoB,CAa5B,QAAW,CACP5B,OAAQ,CACJC,QAAS,CACLC,KADK,EAELC,MAFK,EAGLC,IAHK,EAILC,OAAQ,CAJH,CADL,CADD,CASPC,OAAQ,CACJC,SADI,oBAGJC,OAAQ,CACJC,UAAW,OADP,CAHJ,CATD,CAgBPC,MAAO,CACHC,UADG,CAhBA,CAmBPC,SAAU,YAEND,UAFM,CAnBH,CAuBPE,OAAQ,CACJC,MAAO,CAAC,YAEJH,UAFI,CAAD,CADH,CAKJI,MAAO,CAAC,uBAGJc,MAAO,CACHC,cADG,CAHH,CAAD,CALH,CAvBD,CAbiB,CAAf,CAZI,CAiEjBC,KAAOlK,qEAAX,CAAWA,CAjEU,CAkErBA,uDAlEqB,CAmErBA,kDAAkDA,uBAAlDA,QAAkDA,CAAlDA,CAnEqB,CAoErBkK,KAAOlK,qEAAPkK,CAAOlK,CApEc,CAsErBkK,eAtEqB,CAuEH,eAAgB,CAC9B,KAD8B,OAE9B,KAAQ,CACJ,OADI,YAEJ,SAAY,CACR,CACI,MADJ,sCAEI,KAFJ,2BAII,gBAJJ,sBAKI,YAAe,CALnB,CADQ,CAFR,CAFsB,CAa9B,QAAW,CACP/B,OAAQ,CACJC,QAAS,CACLC,KADK,EAELC,MAFK,EAGLC,IAHK,EAILC,OAAQ,CAJH,CADL,CADD,CASPC,OAAQ,CACJC,SADI,oBAGJC,OAAQ,CACJC,UAAW,OADP,CAHJ,CATD,CAgBPC,MAAO,CACHC,UADG,CAhBA,CAmBPC,SAAU,YAEND,UAFM,CAnBH,CAuBPE,OAAQ,CACJC,MAAO,CAAC,YAEJH,UAFI,CAAD,CADH,CAKJI,MAAO,CAAC,uBAGJc,MAAO,CACHC,cADG,CAHH,CAAD,CALH,CAvBD,CAbmB,CAAhB,CAqDrB,CAED,kBAAmB,CACf,MAAO,aAAY,iBAAqB,CAEpCpL,eAAiB,CACbsL,YADa,EAEbC,QAAS,CAFI,CAFmB,CAOpC,GAAI1C,QAAS,CACT+B,KADS,GAETU,YAFS,GAGTC,QAAS,EAHA,CAAb,CAMArL,4BAA4B,CACxBwK,KAAM1K,2BADkB,OAClBA,EADkB,CAExB2K,MAAO3K,kCAFiB,CAA5BE,OAGQ,cAAU,IAEVsL,MAAJ,EAFc,gFAId,8IAAuB,IAAd7K,MAAc,aAEfiK,KAAO,SAASjK,KAApB,IAAW,CAFQ,CAcnB,IAAK,GAAL,KAVAkI,4BAAoB+B,KAApB/B,OAAoB+B,EAApB/B,aAAsC+B,gBAAtC/B,GAUA,CATAA,wBAAwBlI,WAAxBkI,YASA,CARAA,oBAAoBhE,WAAWlE,2BAA/BkI,GAAoBhE,CAApBgE,CAQA,CANA,CAAIlI,6BAMJ,CAHIX,uBAAyBW,eAAzBX,WAGJ,CALIA,wBAA0BW,eAA1BX,WAKJ,CAAcW,KAAd,YACI6K,SAGP,CAtBa,gMAwBd,IAAK,GAAL,YACIxL,6BAGJA,wBAA0BkD,KAA1BlD,MA5Bc,CA8BduB,eAjCJrB,EAbJ,CAAO,CAkDV,CAxMDF,mEAFoB,CAIpBA,eAAiB,CACbyL,YADa,EAEbH,YAFa,EAGbC,QAAS,CAHI,CAJG,CAUpBhD,QAAU,UAAO,CAEbvI,mBAFa,CAGbA,mCAAqC,UAAM,CAA3CA,CAHJuI,CAVoB,CAiBpBvI,mCAAqC,UAAM,CACvC8K,yBADJ9K,CAjBoB,CAqBpB+K,SAAS,UAAM,CACXD,yBADI,CAARC,GAuLH,CAtaM,CALW,CASX,CACChK,KADD,UAECiI,KAFD,4BAGCzF,WAAYmI,+DAHb,CATW,CAaX,CACC3K,KADD,UAECiI,KAFD,+BAGCzF,WA+ZR,UAAuB,CA0BnB,kBAAmB,CACf,MAAO,aAAY,iBAAqB,CAEpCvD,eAAiB,CACb2L,IADa,EAEbC,QAFa,EAGbC,UAHa,EAIbC,QAAS,CAJI,CAFmB,CASpC5L,4BAA4B,CACxBwK,KAAM1K,2BADkB,OAClBA,EADkB,CAExB2K,MAAO3K,kCAFiB,CAA5BE,OAGQ,cAAU,IAEV2I,QAAS,CACT+B,KADS,GAETe,IAFS,GAGTC,QAHS,GAITC,UAJS,GAKTC,QAAS,EALA,CAFC,gFAUd,eAASnL,IAAT,gIAAuB,CAAdA,IAAc,cAEnBX,oBAAsBW,aAAtBX,GAFmB,CAGnBA,wBAA0BW,aAA1BX,OAHmB,CAInBA,0BAA4BW,aAA5BX,SAJmB,CAKnBA,wBAA0BW,aAA1BX,OALmB,CAQnB,GAAI4K,MAAO,SAASjK,KAApB,IAAW,CAAX,CAEAkI,2BAAoB+B,KAApB/B,OAAoB+B,EAApB/B,aAAsC+B,gBAAtC/B,GAVmB,CAYnBA,gBAAgBlI,aAAhBkI,IAZmB,CAanBA,oBAAoBlI,aAApBkI,QAbmB,CAcnBA,sBAAsBlI,aAAtBkI,UAdmB,CAenBA,oBAAoBlI,aAApBkI,QAEH,CA3Ba,gMA6Bd,GAAIkD,KAAM,CAAC/L,mBACPA,eADOA,QAEPA,eAFOA,UAGPA,eAHM,SAAV,IAKAA,uBAlCc,CAmCdA,2BAnCc,CAoCdA,6BApCc,CAqCdA,2BArCc,CAuCduB,eA1CJrB,EATJ,CAAO,CAuDV,CAED,wBAAyB,IAEjB+I,aAAc/F,KAAlB,IAFqB,CAIjB8I,eAAiB9I,KAArB,GAJqB,CAKjB+I,eAAiB/I,KAArB,OALqB,CAMjBgJ,eAAiBhJ,KAArB,SANqB,CAOjBiJ,mBAAqBjJ,KAAzB,OAPqB,CASjBmG,IAAMlI,mEAAV,CAAUA,CATW,CAUrBA,oDAVqB,CAWrBA,gDAAgDA,uBAAhDA,QAAgDA,CAAhDA,CAXqB,CAYrBkI,IAAMlI,mEAANkI,CAAMlI,CAZe,CAcrBkI,cAdqB,CAeJ,cAAe,CAC5B,KAD4B,OAE5B,KAAQ,CACJ,OADI,YAEJ,SAAY,CACR,CACI,MADJ,UAEI,KAFJ,uBAII,gBAJJ,sBAKI,YAAe,CALnB,CADQ,CAOL,CACC,MADD,SAEC,KAFD,uBAIC,gBAJD,sBAKC,YAAe,CALhB,CAPK,CAcR,CACI,MADJ,MAEI,KAFJ,uBAII,gBAJJ,mBAKI,YAAe,CALnB,CAdQ,CAqBR,CACI,MADJ,UAEI,KAFJ,2BAII,gBAJJ,uBAKI,YAAe,CALnB,CArBQ,CAFR,CAFoB,CAiC5B,QAAW,CACPC,OAAQ,CACJC,QAAS,CACLC,KADK,EAELC,MAFK,EAGLC,IAHK,EAILC,OAAQ,CAJH,CADL,CADD,CASPC,OAAQ,CACJC,SADI,oBAGJC,OAAQ,CACJC,UAAW,OADP,CAHJ,CATD,CAgBPC,MAAO,CACHC,UADG,CAhBA,CAmBPC,SAAU,YAEND,UAFM,CAnBH,CAuBPE,OAAQ,CACJC,MAAO,CAAC,YAEJH,UAFI,CAAD,CADH,CAKJI,MAAO,CAAC,YAEJC,UAFI,CAAD,CALH,CAvBD,CAjCiB,CAAf,CAoEpB,CArKDtK,mEAFmB,CAInBA,eAAiB,CACb2L,IADa,EAEbC,QAFa,EAGbC,UAHa,EAIbC,QAAS,CAJI,CAJE,CAWnBvD,QAAU,UAAO,CAEbvI,mBAFa,CAGbA,mCAAqC,UAAM,CAA3CA,CAHJuI,CAXmB,CAkBnBvI,mCAAqC,UAAM,CACvC8K,yBADJ9K,CAlBmB,CAsBnB+K,SAAS,UAAM,CACXD,yBADI,CAARC,GAoJH,CA5kBM,CAbW,CAb8C,CAiChE/K,gCAjCgE,CAmChE,GAAIuI,SAAU,UAAO,CAArB,EAqmBArI,qBAlmBA,UAAgB,CACZkM,aAAapM,gBAAboM,CAAapM,CAAboM,CACH,CAgmBDlM,CA1oBZH,CACsC,CADtCA,CAJJ,I;;wGCHA,CAAC,UAAY,CACTA,4DACuC,qDAC/B,0CAAyD,CAiGrD,0BAA0B,CACtB,GAAIsM,OAAQC,SAAZ,GACA,cACI,SAAU,CACNC,iBAAiB,aAAO,OACpB,EAAGD,iBADiB,CAETE,MAAQC,EAARD,MAAgB,CAAvB,CAFgB,CAITA,MAAQC,EAARD,MAAgB,CAAvB,CAJRD,EADM,CAQN,KACH,CACD,eACI,MAEJ,YAAa,CACTA,iBAAiB,aAAO,OACpB,EAAGD,iBADiB,CAETE,QAAUC,EAAVD,QAAoB,CAA3B,CAFgB,CAITA,QAAUC,EAAVD,QAAoB,CAA3B,CAJRD,EADS,CAQT,KACH,CACD,gBAAiB,CACbA,iBAAiB,aAAO,OACpB,EAAGD,iBADiB,CAETE,eAAiBC,EAAjBD,eAAkC,CAAzC,CAFgB,CAITA,eAAiBC,EAAjBD,eAAkC,CAAzC,CAJRD,EADa,CAQb,KACH,CACD,aAAc,CACVA,iBAAiB,aAAO,OACpB,EAAGD,iBADiB,CAETE,aAAeC,EAAfD,aAA8B,CAArC,CAFgB,CAITA,aAAeC,EAAfD,aAA8B,CAArC,CAJRD,EADU,CAQV,KACH,CACD,aA5CJ,CA+CH,CAhJDvM,mBAAqB,CACjB0M,eAAgB,UAAa,CACzB,WAFa,EAIjBC,UAAW,UAAY,CACnB,QACH,CANgB,CAFgC,CAWrD3M,gBAqEA,qBAAgC,CAC5B,MAAO4M,SAAUN,SAAVM,OAA4BP,QAAUC,SAA7C,EACH,CAlFoD,CAYrDtM,cAwEA,eAAsB,CAEfsM,cAAH,KAFkB,CAGdA,eAAiB,CAACA,eAAD,GADI,CAFP,EAKdA,iBALc,CAMdA,gBANc,EASlBO,iBAEH,CA/FoD,IAcjDP,UAAW,CACXQ,GADW,KAEXF,MAAO,CAFI,CAdsC,CAmBjDL,YAAJ,EAnBqD,CAoBjDtE,SAAJ,EApBqD,CAsBrDjI,iBAtBqD,CAuBrDA,eAqDA,oBAA6B,CACzBU,eAAe,sBAAwBqM,WAAvCrM,IACH,CA9EoD,CAyBrDV,mBAAqB,YAAc,CAC/B,MAAO,eAAc,iBAAO,OAAIqG,eAAJ,EAArB,GAAP,IADJrG,CAzBqD,CAoJrDE,qBAvHA,UAAgB,CAEZA,8BAA8B,gBAAY,CACtC+H,eADJ/H,EAFY,CAMZA,+BAA+B,cAAU,CAErCqM,YAAcrJ,KAAdqJ,WAFqC,CAKrCM,iBALqC,CAOrC7M,mBAAqB,CACjB0M,eAAgB,WAAa,CACzB,MAAOH,aAAP,CAAOA,CAFM,EAIjBI,UAAW,UAAY,CACnB,MAAOJ,aAAP,MACH,CANgB,CAPgB,CAgBrCvM,uBAAwB,kBAAc,CAClC,GAAG,WAAH,EAAgBgN,WAAhB,CACIT,YAAcrJ,KAAdqJ,WADJ,KAEK,CACDA,cADC,iFAGD,cAAQQ,UAAR,WAAsB7J,KAAtB,WAAsBA,CAAtB,eAAsBA,GAAtB,yFAAQ6J,UAAR,CAAuC,WAAvC,EAEQA,8CACAA,wCAAwCC,SAD5C,WAC4CA,EAAxCD,CAHR,GAIQR,4BAPP,yLAYJ,CAfLvM,EAhBqC,CAkCrCA,iBAlCJE,SAoCS,WAAO,CACZY,gBArCJZ,EAuCH,CA0EDA,CAtJZH,CACuC,CADvCA,CADJ,I;;+GCAA,CAAC,UAAY,CACTA,kEAEQ,oEACI,gEAAsE,CAElEC,kBAFkE,CAGlEA,iBAHkE,CAIlEA,mBAJkE,CAMlEA,qBA0BA,UAAyB,CACrBA,kBADqB,CAErBA,iBAFqB,CAGrBE,8CAA8C,CAC1CkC,MAAOpC,kBADmC,MAE1CqC,SAAUrC,OAAOqC,QAFyB,CAA9CnC,OAGQ,cAAU,CACdF,oBADc,CAEdA,uBAAyB,CACrBiN,WAAY,SADS,CAFX,CAKdlC,gBAAgB/K,OAAhB+K,QALc,CAMd/K,eAAiB+K,SAAS,iBAAI/K,iBAAJ,EAAD,CAAR+K,CAAjB/K,GAAiB+K,CATrB7K,SAWS,eAAW,CAChBF,qBADgB,CAEhB+K,gBAAgB/K,OAAhB+K,QAFgB,CAGhB/K,eAAiB+K,SAAS,iBAAI/K,iBAAJ,EAAD,CAAR+K,CAAjB/K,GAAiB+K,CAHD,CAIhB/K,uBAAyB,CACrBiN,WAAY,QADS,CAf7B/M,WAkBW,UAAI,CACXF,iBAnBJE,EAqBH,CAxDiE,CA0DlEA,qBAlDA,UAAgB,CAEZ,GAAIgN,cAAenL,aAAnB,GAEA7B,wBAAwB,CACpBiE,GADoB,aAEpBgJ,uBAFoB,CAAxBjN,OAGQ,cAAmB,IAAjBqM,aAAiB,KAAjBA,WAAiB,CACvBvM,kBAAoBuM,YAApBvM,CAAoBuM,CADG,CAIvBrM,qBAAqB,CACjB2B,IAAI7B,kBAAkBiI,QADL,CAArB/H,OAEQ,kBAAY,CAChBF,mCAHJE,EAPJA,SAcS,WAAO,CACZY,gBAfJZ,EAkBH,CA4BDA,CA7DhBH,CAEQ,CAFRA,CADJ,I;;qGCAA,CAAC,UAAY,CACTA,yDACoC,2DAAiE,uDAA8D,CA+B3J,oBAAqB,sBAEWC,OAFX,uFAIbkC,gBAAJ,EAAwBC,WAJP,GAQjBlC,mCARiB,IAWpB,CAED,mBAAoB,CAChBG,cACIA,6CADJA,GACIA,CADJA,OAIU,UAAY,CAJtBA,SAKa,UAAY,CALzBA,EAOH,CA8BD,oBAAqB,CACjB,MAAOa,IAAG,wBAAqB,IACvBC,MAAOC,uBAAX,OAAWA,CADgB,CAEvBC,QAFuB,IAG3BF,gBAH2B,CAI3BA,YAJ2B,CAM3BA,+BAAgC,UAAY,CAEpCA,uBAAJ,OAFwC,EAGpCG,OAAM,mDAANA,IAAM,CAANA,CAHoC,CAMxC,GAAIC,QAAS,GAAb,YAEAA,iBAAmB,UAAY,CAC3BC,QAAQD,OAARC,OADJD,CARwC,CAYxCA,qBAAqBJ,WAArBI,CAAqBJ,CAArBI,CAZJJ,EANJ,CAAOD,CAqBV,CAtGDjB,kBAF2J,CAG3JA,iBAH2J,CAK3JA,kBAiDA,UAAsB,CAElB,eAAiB,CAEb,GAAIkD,MAAO,CACPrB,IAAK7B,gBADE,IAEPkC,UAAWlC,gBAFJ,UAGPmC,SAAUnC,gBAHH,SAIPoN,MAAOpN,gBAAgBoN,KAJhB,CAAX,CAOApN,iBATa,CAWbE,+BAEU,UAAM,CACRD,4BADQ,CAERD,iBAJRE,SAOW,eAAW,CACdY,kBADc,CAEdd,iBATRE,EAWH,CAEJ,CAhF0J,CAM3JF,mBAoGA,UAAuB,CACnB0B,iBAAiB,aAAS,CACtB1B,+BADsB,CAEtBA,6BAFJ0B,SAGS,eAAW,CAChBzB,YAJJyB,EAMH,CAjH0J,CAO3J1B,6BA4GA,UAAiC,IAIzBoD,QAASpD,gBAAb,GAJ6B,CAM7B,MAAOiB,IAAG,wBAAqB,CAE3B,GAAIoC,QAAS,aALjB,yCAKiB,CAETC,OAAQvD,gBAAgBoB,SAFf,IAEDpB,CAFC,yCAKTwD,WAKJ,0BAA6C,CAEzCvD,aAlBR,iBAgBiD,CAGzCA,oBAHyC,CAIzCA,qBAJyC,CAKzCA,2BALyC,CAMzCA,iBANyC,CAQzCA,cAQA,UAAkB,CACdwD,kBACH,CAlBwC,CASzCxD,YAgBA,UAAgB,CACZA,iBADY,CAEZE,oBACY,CACJ2B,IADI,OAEJQ,SAAUrC,OAAOyD,WAFb,CADZvD,OAKU,UAAM,CACRD,gCADQ,CAERD,iBAFQ,CAGRwD,gBARRtD,SAWW,eAAW,CACdY,kBADc,CAEdd,iBAbRE,EAgBH,CA3CwC,CAUzCF,sBAUA,UAA0B,CAEtB,MAAQA,yBAAD,EAA8BA,2BAA7BA,EAAiEA,qBAAuBA,OAAhG,iBACH,CAvBwC,CAYzC,UAAgB,CAEf,CA+BDO,EACH,CAxDY,CAAb,CAQAiD,2CAVJ,CAAOvC,CA8DV,CAvL0J,CA0L3Jf,qBAhLA,UAAgB,CAEZ,GAAIO,MAAOP,OAAX,OAAWA,EAAX,CAEA,IAJY,GAKRF,gBAAkB,CACd6B,IAAKpB,KADS,IAEdyB,UAAWzB,KAFG,UAGd0B,SAAU1B,KAHI,SAId2B,MAAO3B,KAJO,MAKdiD,QAASjD,KALK,QAMd2M,MAAO,CACHzL,IAAKlB,MAAQA,KAARA,OAAsBA,WAAtBA,IAAuCA,WAAvCA,IADF,4BAEH4M,SAFG,CANO,CALV,CAmBf,CA6JDnN,CA3LRH,CACoC,CADpCA,CADJ,I;;6FCZA,CAAC,UAAY,CAaT,4BAAmD,CAE/CuN,cAAgBA,MAAhBA,IAF+C,IAI3CC,YAAJ,EAJ+C,CAK3CtE,YAAJ,EAL+C,CAO/C,IAAI,GAAJ,KAAaqE,eAAb,MACIC,gBAAgBD,uBAAhBC,YADJ,CAEItE,iBAAiBqE,uBAAjBrE,UAFJ,CAKA,GAAII,KAAMhD,0CAAV,CAAUA,CAAV,CACAgD,cAb+C,CAc9B,cAAe,CAC5B,KAD4B,MAE5B,KAAQ,CACJ,OADI,YAEJ,SAAY,CACR,CACI,MADJ,cAEI,KAFJ,mBAII,gBAJJ,UAKI,YAAe,CALnB,CADQ,CAFR,CAFoB,CAa5B,QAAW,CACPC,OAAQ,CACJC,QAAS,CACLC,KADK,EAELC,MAFK,EAGLC,IAHK,EAILC,OAAQ,CAJH,CADL,CADD,CASPC,OAAQ,YAEJE,OAAQ,CACJC,UAAW,mBADP,CAFJ,CATD,CAePC,MAAO,CACHC,UADG,CAfA,CAkBPC,SAAU,YAEND,UAFM,CAlBH,CAsBPE,OAAQ,CACJC,MAAO,CAAC,YAEJH,UAFI,CAAD,CADH,CAKJI,MAAO,CAAC,YAEJC,UAFI,CAAD,CALH,CAtBD,CAbiB,CAAf,CAgDpB,CAED,qBAA2B,CAE1B,CA9EDvK,iDAC4B,UAAY,CAChC,MAAO,CACHyN,SADG,IAEHC,QAFG,WAGHzG,YAHG,qCAIH0G,KAJG,KAKHnK,WAAY,qBALT,CAFfxD,EADJ,I;;4FCYA,CAAC,UAAY,CACTA,0BAA2B,2BAA3BA,SAA2B,CAA3BA,SACY,2DAA6D,0CAAgE,CAEjI4N,wBACe,CACP3G,YADO,6BAEPzD,WAAY,UAFL,CADfoK,gBAKoB,CACZ3G,YADY,8BAEZzD,WAAY,WAFA,CALpBoK,wBAS4B,CACpB3G,YADoB,sCAEpBzD,WAAY,iBAFQ,CAT5BoK,4BAagC,CACxB3G,YADwB,6CAExBzD,WAAY,uBAFY,CAbhCoK,4BAiBgC,CACxB3G,YADwB,0CAExBzD,WAAY,qBAFY,CAjBhCoK,gCAqBoC,CAC5B3G,YAD4B,iDAE5BzD,WAAY,2BAFgB,CArBpCoK,yBAyB6B,CACrB3G,YADqB,uCAErBzD,WAAY,kBAFS,CAzB7BoK,6BA6BiC,CACzB3G,YADyB,8CAEzBzD,WAAY,wBAFa,CA7BjCoK,2BAiC+B,CACvB3G,YADuB,yCAEvBzD,WAAY,iBAFW,CAjC/BoK,+BAqCmC,CAC3B3G,YAD2B,8CAE3BzD,WAAY,uBAFe,CArCnCoK,4BAyCgC,CACxB3G,YADwB,0CAExBzD,WAAY,oBAFY,CAzChCoK,uBA6C2B,CACnB3G,YADmB,qCAEnBzD,WAAY,gBAFO,CA7C3BoK,2BAiD+B,CACvB3G,YADuB,yCAEvBzD,WAAY,oBAFW,CAjD/BoK,yBAqD6B,CACrB3G,YADqB,uCAErBzD,WAAY,kBAFS,CArD7BoK,6BAyDiC,CACzB3G,YADyB,2CAEzBzD,WAAY,sBAFa,CAzDjCoK,mCA6DuC,CAC/B3G,YAD+B,iDAE/BzD,WAAY,2BAFmB,CA7DvCoK,4CAiEgD,CACxC3G,YADwC,gDAExCzD,WAAY,0BAF4B,CAjEhDoK,gCAqEoC,CAC5B3G,YAD4B,wCAE5BzD,WAAY,mBAFgB,CArEpCoK,0CAyE8C,CACtC3G,YADsC,+CAEtCzD,WAAY,yBAF0B,CAzE9CoK,mDA6EuD,CAC/C3G,YAD+C,gDAE/CzD,WAAY,mBAFmC,CA7EvDoK,gBAiFoB,CACZ3G,YADY,4BAEZzD,WAAY,SAFA,CAjFpBoK,CAFiI,CAwFjIC,+BAzFR7N,CACY,CADZA,MA4FS,6CAAgD,6CAAmD,CASpG8N,qCAAsC,UAAiB,CACnD,QAAGnN,kBADgD,CAE/CF,aAF+C,CAI/CA,aAJRqN,EArGR9N,CA4FS,CA5FTA,CADJ,I;;0FCAA,CAAC,UAAY,CAETA,4CACuB,uBAA0B,yBAA6B,CAqBtE,qBAAsB,CAClB,MAAO+N,MAAP,IACH,CAiHD,uBAAwB,CACpB,MAAO7M,IAAG,wBAAqB,CAC3B8M,WAAWC,OAAXD,WAAWC,CAAXD,CAAgC,CAC5B5J,GAAIA,EADwB,CAAhC4J,CAEG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAFHJ,OAMQ,kBAAc,CAClB,IAAItH,sBADc,CAId2H,QAAQ3H,cAAR2H,QAJc,CAEd/M,OAAOoF,cAAPpF,MARR0M,SAYS,eAAW,CAChB1M,aAbJ0M,EADJ,CAAO9M,CAiBV,CA1JqE,GAEhE6M,MAAN,EAFsE,CAMhEO,YAAN,sBANsE,CAQlEH,QAAU,CACVzN,KADU,KAEV0N,MAAO,IAFG,CARwD,CAalEG,mBAAJ,IAbsE,CA+5BtE,MAh5BA,WAAgB,CACR1N,qBAAJ,OAAIA,CADQ,GAERsN,cAAgBtN,qBAAhBsN,OAAgBtN,CAFR,CAIf,CA04BDL,EAEA,CAAO,OAt4BP,wBAAgC,CAE5B,MAAOU,IAAG,wBAAqB,CA8B3B,6BAA8B,CAE1BiN,aAAezH,iBAAfyH,IAF0B,CAG1BA,aAAezH,iBAAfyH,OAH0B,CAK1BtN,6BAA8BsN,aAA9BtN,MAL0B,CAO1B,GAAI8C,SAAJ,KAEA6K,WAAW9H,sBAAX8H,cAA+C,cAAU,CACrD7K,YADJ6K,SAES,UAAO,CAFhBA,WAGW,UAAM,CACb/N,qBAAqB0N,QAArB1N,aADa,CAEb4N,QAAQ3H,iBAAR2H,KAFa,CAGb,kBAHa,EAGWE,oBAN5BC,EAUH,CA/CD,cAF2B,CAInBL,QAAJ,KAJuB,CAKnBH,kBA3BhB,6BA2BgBA,KAAsC,CAClCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADyB,CAAtCJ,OAIQ,kBAAc,CAClBS,WAAW/H,SAAX+H,KALJT,SAMS,eAAW,CAChB1M,aAPJ0M,EALmB,CAenB1M,OAAO,UAAPA,yBAAO,CAAPA,CAfmB,CAmBvB0M,kBA3CZ,qBA2CYA,EAA+B,CAC3B,MAD2B,MAE3B,SAAY1L,QAFe,CAA/B0L,OAGQ,kBAAc,CAClBS,WAAW/H,SAAX+H,KAJJT,SAKS,eAAW,CAChB1M,aANJ0M,EAnBR,CAAO9M,CAqDV,CA+0BM,aA70BP,wBAAsC,CAElC,MAAOA,IAAG,wBAAqB,CAe3B,6BAA8B,CAE1BiN,aAAezH,iBAAfyH,IAF0B,CAG1BA,aAAezH,iBAAfyH,OAH0B,CAK1BtN,6BAA8BsN,aAA9BtN,MAL0B,CAO1B,GAAI8C,SAAJ,KAEA6K,WAAW9H,sBAAX8H,cAA+C,cAAU,CACrD7K,YADJ6K,SAES,UAAO,CAFhBA,WAGW,UAAM,CACb/N,qBAAqB0N,QAArB1N,aADa,CAEb4N,QAAQ3H,iBAAR2H,KAFa,CAGb,kBAHa,EAGWE,oBAN5BC,EASH,CA/BDR,kBAlFR,6BAkFQA,EAAuC,CACnC,MADmC,MAEnC,SAAY1L,QAFuB,CAAvC0L,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAOQ,kBAAc,CAClBS,WAAW/H,SAAX+H,KARJT,SASS,eAAW,CAChB1M,aAVJ0M,EAFJ,CAAO9M,CAqCV,CAsyBM,eApyBP,kBAAiC,CAC7B,IAAIiN,eADyB,CAEzBI,2BAFyB,CAIzBG,UAGP,CA6xBM,SA3xBP,UAAmB,CACf,MAAOP,SAAP,IACH,CAyxBM,CAKHK,WALG,WAMHhC,YApPJ,kBAAgC,CA8C5B,MAAO,MA5CP,gBAAsB,CAElB,MAAOtL,IAAG,wBAAqB,CAC3B8M,6CAA+C,CAC3CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADkC,CAA/CJ,OAKU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACd3B,QAAQ,CACJgL,YAAarJ,KAAKwL,OADd,CAARnN,CANRwM,SAUW,eAAW,CACd1M,aAXR0M,EADJ,CAAO9M,CAeV,CA2BM,CAEH0N,2BA3BJ,gBAA4C,CAExC,MAAO1N,IAAG,wBAAqB,CAC3B8M,uEACU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAEVA,KAAJ,KAFc,CAGV7B,OAAO,CACHuN,KAAM1L,KADH,MAEH2L,QAAS3L,KAAK4L,SAFX,CAAPzN,CAHU,CAQVE,QAAQ,CAACsN,QAAS,kBAAV,CAARtN,CATZwM,SAaW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO,CACHuN,KAAM1L,KADH,MAEH2L,QAAS3L,KAAK4L,SAFX,CAAPzN,CAdR0M,EADJ,CAAO9M,CAqBV,CAEM,CAIV,CAkMgB8N,CAAW,KAAXA,CANV,EAMUA,CANV,CAOHrL,QA1wBJ,kBAA4B,CAsBxB,MAAO,CACH2J,OArBJ,gBAAwB,CAEpB,MAAOpM,IAAG,wBAAqB,CAC3B8M,qCAAsC,CAClC5J,GAAI6K,OAD8B,IAElC9L,KAAM8L,MAF4B,CAAtCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,cAAY,MAAV7K,IAAU,CACd3B,WATRwM,SAWW,eAAW,CACd1M,aAZR0M,EADJ,CAAO9M,CAgBV,CAEM,CAGV,CAivBYgO,CAAO,KAAPA,CAPN,EAOMA,CAPN,CAQHjN,MA7UJ,kBAA0B,CA+EtB,MAAO,QA7EP,gBAAwB,CACpB,MAAOf,IAAG,wBAAqB,CAC3B8M,yCAA2C,CACvCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CAD8B,CAA3CJ,OAKU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACd3B,QAAQ2B,KAAR3B,QANRwM,SAQW,UAAW,CACd1M,OAAO6B,KAAP7B,MATR0M,EADJ,CAAO9M,CAaV,CA+DM,MA7DP,gBAAsB,CAElB,MAAOA,IAAG,wBAAqB,CAC3B8M,gCAAiC,CAC7B5J,GAAI6K,OADyB,IAE7B9L,KAAM8L,MAFuB,CAAjCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAEd3B,QAAQ,CACJS,MAAOkB,KAAKwL,OADR,CAARnN,CAVRwM,SAcW,eAAW,CACd1M,aAfR0M,EADJ,CAAO9M,CAmBV,CAwCM,QAtCP,gBAAwB,CAEpB,MAAOA,IAAG,wBAAqB,CAC3B8M,kCAAmC,CAC/B5J,GAAI6K,OAD2B,IAE/B9L,KAAM8L,MAFyB,CAAnCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,gBAAY,QAAV7K,IAAU,CACd3B,WATRwM,SAWW,eAAW,CACd1M,aAZR0M,EADJ,CAAO9M,CAgBV,CAoBM,CAIHiO,OAtBJ,gBAAwB,CACpB,MAAOjO,IAAG,wBAAqB,CAC3B8M,kCAAmC,CAC/B5J,GAAI6K,OAAOnN,GADoB,CAAnCkM,CAEG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAFHJ,OAOU,gBAAY,QAAV7K,IAAU,CACd3B,WARRwM,SAUW,eAAW,CACd1M,aAXR0M,EADJ,CAAO9M,CAeV,CAEM,CAMV,CAwPUkO,CAAK,KAALA,CARJ,EAQIA,CARJ,CASHC,WAjvBJ,kBAA+B,CAqC3B,MAAO,MAlBP,gBAAsB,CAElB,MAAOnO,IAAG,wBAAqB,CAC3B8M,6CAA+C,CAC3CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADkC,CAA/CJ,OAKU,eAAY,IAAV7K,MAAU,MAAVA,IAAU,CAEd3B,QAAQ2B,KAAR3B,QAPRwM,SASW,eAAW,CACd1M,aAVR0M,EADJ,CAAO9M,CAcV,CAEM,CAEHiH,SArCJ,UAA0B,CACtB,MAAOjH,IAAG,wBAAqB,CAC3B8M,6CAA+C,CAC3CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADkC,CAA/CJ,OAKU,eAAY,IAAV7K,MAAU,MAAVA,IAAU,CAEd3B,QAAQ2B,KAAR3B,QAPRwM,SASW,eAAW,CACd1M,aAVR0M,EADJ,CAAO9M,CAcV,CAoBM,CAIV,CAwsBeoO,CAAU,KAAVA,CATT,EASSA,CATT,CAUHnH,SAvsBJ,kBAAuC,CA+FnC,MAAO,QA7FP,gBAAwB,CACpB,MAAOjH,IAAG,wBAAqB,CAC3B8M,6CAA+C,CAC3CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADkC,CAA/CJ,OAKU,eAAY,IAAV7K,MAAU,MAAVA,IAAU,CACd3B,aANRwM,SASW,eAAY,IAAV7K,MAAU,MAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAVR0M,EADJ,CAAO9M,CAcV,CA8EM,MA5EP,gBAAsB,CAClB,MAAOA,IAAG,wBAAqB,CAC3B8M,oCAAqC,CACjC5J,GAAI6K,OAD6B,IAEjC9L,KAAM8L,MAF2B,CAArCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,eAAY,IAAV7K,MAAU,MAAVA,IAAU,CAEd3B,QAAQ2B,KAAR3B,QAVRwM,SAYW,eAAW,CACd1M,aAbR0M,EADJ,CAAO9M,CAiBV,CA0DM,QAxDP,gBAAwB,CAEpB,MAAOA,IAAG,wBAAqB,CAC3B8M,sCAAuC,CACnC5J,GAAI6K,OAD+B,IAEnC9L,KAAM8L,MAF6B,CAAvCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,eAAY,OAAV7K,IAAU,CACd3B,WATRwM,SAWW,eAAY,IAAV7K,MAAU,MAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAZR0M,EADJ,CAAO9M,CAgBV,CAsCM,QApCP,gBAAwB,CACpB,MAAOA,IAAG,wBAAqB,CAC3B8M,sCAAuC,CACnC5J,GAAI6K,OAAOnN,GADwB,CAAvCkM,CAEG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAFHJ,OAOU,eAAY,OAAV7K,IAAU,CACd3B,WARRwM,SAUW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAXR0M,EADJ,CAAO9M,CAeV,CAoBM,CAKHqO,YAvBJ,gBAA6B,CACzB,MAAOrO,IAAG,wBAAqB,CAC3B8M,2CAA4C,CACxC5J,GAAI6K,OAAO7K,EAD6B,CAA5C4J,CAEG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAFHJ,OAOU,gBAAY,QAAV7K,IAAU,CACd3B,WARRwM,SAUW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAXR0M,EADJ,CAAO9M,CAeV,CAEM,CAOV,CAimBasO,CAAkB,KAAlBA,CAVP,EAUOA,CAVP,CAWHC,WAhmBJ,kBAAyC,CA8ErC,MAAO,QA5EP,gBAAwB,CACpB,MAAOvO,IAAG,wBAAqB,CAC3B8M,6CAA+C,CAC3CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADkC,CAA/CJ,OAKU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACd3B,aANRwM,SASW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAVR0M,EADJ,CAAO9M,CAcV,CA6DM,MA3DP,gBAAsB,CAElB,MAAOA,IAAG,wBAAqB,CAC3B8M,oCAAqC,CACjC5J,GAAI6K,OAD6B,IAEjC9L,KAAM8L,MAF2B,CAArCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAEd3B,QAAQ2B,KAAR3B,QAVRwM,SAYW,eAAW,CACd1M,aAbR0M,EADJ,CAAO9M,CAiBV,CAwCM,QAtCP,gBAAwB,CAEpB,MAAOA,IAAG,wBAAqB,CAC3B8M,sCAAuC,CACnC5J,GAAI6K,OAD+B,IAEnC9L,KAAM8L,MAF6B,CAAvCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,gBAAY,QAAV7K,IAAU,CACd3B,WATRwM,SAWW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAZR0M,EADJ,CAAO9M,CAgBV,CAoBM,CAIHiO,OAtBJ,gBAAwB,CACpB,MAAOjO,IAAG,wBAAqB,CAC3B8M,sCAAuC,CACnC5J,GAAI6K,OAAOnN,GADwB,CAAvCkM,CAEG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAFHJ,OAOU,gBAAY,QAAV7K,IAAU,CACd3B,WARRwM,SAUW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAXR0M,EADJ,CAAO9M,CAeV,CAEM,CAMV,CA4gBewO,CAAoB,KAApBA,CAXT,EAWSA,CAXT,CAYHC,aA3gBJ,kBAA2C,CA0FvC,MAAO,WAxFP,UAAqB,CACjB,MAAOzO,IAAG,wBAAqB,CAC3B8M,iDAAmD,CAC/CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADsC,CAAnDJ,OAIQ,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAChB3B,aALJwM,SAMS,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACjB7B,OAAO6B,KAAP7B,MAPJ0M,EADJ,CAAO9M,CAWV,CA4EM,wBA1EP,kBAA0C,CACtC,MAAOA,IAAG,wBAAqB,CAC3B8M,kDAAmD,CAACzG,GAAIqI,QAAL,CAAnD5B,CAAmE,CAC/DE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADsD,CAAnEJ,OAIQ,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAChB3B,aALJwM,SAMS,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACjB7B,OAAO6B,KAAP7B,MAPJ0M,EADJ,CAAO9M,CAWV,CA8DM,wBA5DP,kBAA0C,CACtC,MAAOA,IAAG,wBAAqB,CAC3B8M,kDAAmD,CAACzG,GAAIqI,QAAL,CAAnD5B,CAAmE,CAC/DE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADsD,CAAnEJ,OAIQ,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAChB3B,aALJwM,SAMS,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACjB7B,OAAO6B,KAAP7B,MAPJ0M,EADJ,CAAO9M,CAWV,CAgDM,sBA9CP,kBAAwC,CACpC,MAAOA,IAAG,wBAAqB,CAC3B8M,gDAAiD,CAACzG,GAAIqI,QAAL,CAAjD5B,CAAiE,CAC7DE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADoD,CAAjEJ,OAIQ,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAChB3B,aALJwM,SAMS,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACjB7B,OAAO6B,KAAP7B,MAPJ0M,EADJ,CAAO9M,CAWV,CAkCM,WAhCP,uBAAmC,CAC/B,MAAOA,IAAG,wBAAqB,CAC3B8M,kDAAmD,CAAC6B,MAAD,OAAgBC,OAAQA,MAAxB,CAAnD9B,CAAoF,CAChFE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADuE,CAApFJ,OAIQ,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAChB3B,aALJwM,SAMS,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACjB7B,OAAO6B,KAAP7B,MAPJ0M,EADJ,CAAO9M,CAWV,CAoBM,CAMH6O,QAxBJ,gBAAyB,CACrB,MAAO7O,IAAG,wBAAqB,CAC3B8M,4CAA6C,CACzC1G,KAAM2H,OADmC,KAEzC1H,GAAI0H,OAFqC,GAGzCzH,IAAKyH,OAAOzH,GAH6B,CAA7CwG,CAIG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAJHJ,OAQQ,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAChB3B,aATJwM,SAUS,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACjB7B,OAAO6B,KAAP7B,MAXJ0M,EADJ,CAAO9M,CAeV,CAEM,CAQV,CAyaiB8O,CAAsB,KAAtBA,CAZX,EAYWA,CAZX,CAaH9H,SAxaJ,kBAA6B,CA8EzB,MAAO,QA5EP,gBAAwB,CAEpB,MAAOhH,IAAG,wBAAqB,CAC3B8M,4CAA8C,CAC1CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADiC,CAA9CJ,OAKU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAEd3B,QAAQ2B,KAAR3B,QAPRwM,SASW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAVR0M,EADJ,CAAO9M,CAcV,CA4DM,MA1DP,gBAAsB,CAElB,MAAOA,IAAG,wBAAqB,CAC3B8M,mCAAoC,CAChC5J,GAAI6K,OAD4B,IAEhC9L,KAAM8L,MAF0B,CAApCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACd3B,QAAQ2B,KAAR3B,QATRwM,SAWW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAZR0M,EADJ,CAAO9M,CAgBV,CAwCM,QAtCP,gBAAwB,CAEpB,MAAOA,IAAG,wBAAqB,CAC3B8M,qCAAsC,CAClC5J,GAAI6K,OAD8B,IAElC9L,KAAM8L,MAF4B,CAAtCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,gBAAY,QAAV7K,IAAU,CACd3B,WATRwM,SAWW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAZR0M,EADJ,CAAO9M,CAgBV,CAoBM,CAIHiO,OAtBJ,gBAAwB,CACpB,MAAOjO,IAAG,wBAAqB,CAC3B8M,qCAAsC,CAClC5J,GAAI6K,OAAOnN,GADuB,CAAtCkM,CAEG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAFHJ,OAOU,gBAAY,QAAV7K,IAAU,CACd3B,WARRwM,SAUW,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACf7B,OAAO6B,KAAP7B,MAXR0M,EADJ,CAAO9M,CAeV,CAEM,CAMV,CAoVa+O,CAAQ,KAARA,CAbP,EAaOA,CAbP,CAcHC,WAxMJ,kBAA+B,CA6E3B,MAAO,QA3EP,gBAAwB,CACpB,MAAOhP,IAAG,wBAAqB,CAC3B8M,8CAAgD,CAC5CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADmC,CAAhDJ,OAKU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACd3B,QAAQ,CACJ0O,WAAY/M,KAAKwL,OADb,CAARnN,CANRwM,SAUW,eAAW,CACd1M,aAXR0M,EADJ,CAAO9M,CAeV,CA2DM,MAzDP,gBAAsB,CAElB,MAAOA,IAAG,wBAAqB,CAC3B8M,4CAA8C,CAC1CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADiC,CAA9CJ,OAKU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CACd3B,QAAQ,CACJ0O,WAAY/M,KAAKwL,OADb,CAARnN,CANRwM,SAUW,eAAW,CACd1M,aAXR0M,EADJ,CAAO9M,CAeV,CAwCM,QAtCP,gBAAwB,CAEpB,MAAOA,IAAG,wBAAqB,CAC3B8M,uCAAwC,CACpC5J,GAAI6K,OADgC,IAEpC9L,KAAM8L,MAF8B,CAAxCjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,gBAAY,QAAV7K,IAAU,CACd3B,WATRwM,SAWW,eAAW,CACd1M,aAZR0M,EADJ,CAAO9M,CAgBV,CAoBM,CAIHiO,OAtBJ,gBAAwB,CACpB,MAAOjO,IAAG,wBAAqB,CAC3B8M,uCAAwC,CACpC5J,GAAI6K,OAAOnN,GADyB,CAAxCkM,CAEG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAFHJ,OAOU,gBAAY,QAAV7K,IAAU,CACd3B,WARRwM,SAUW,eAAW,CACd1M,aAXR0M,EADJ,CAAO9M,CAeV,CAEM,CAMV,CAqHeiP,CAAU,KAAVA,CAdT,EAcSA,CAdT,CAeHzL,kBApHJ,kBAAsC,CA0ClC,MAAO,MAxCP,UAAsB,CAElB,MAAOxD,IAAG,wBAAqB,CAC3B8M,gDAAkD,CAC9CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADqC,CAAlDJ,OAKU,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAEd3B,QAAQ,CACJkD,kBAAmBvB,KAAKwL,OADpB,CAARnN,CAPRwM,SAWW,eAAW,CACd1M,aAZR0M,EADJ,CAAO9M,CAgBV,CAsBM,CAEHoM,OAtBJ,gBAAwB,CAEpB,MAAOpM,IAAG,wBAAqB,CAC3B8M,+CAAgD,CAC5C5J,GAAI6K,OADwC,IAE5C9L,KAAM8L,MAFsC,CAAhDjB,CAGG,CACCE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADV,CAHHJ,OAQU,gBAAY,QAAV7K,IAAU,CACd3B,WATRwM,SAWW,eAAW,CACd1M,aAZR0M,EADJ,CAAO9M,CAgBV,CAEM,CAIV,CAsEsBkP,CAAiB,KAAjBA,CAfhB,EAegBA,CAfhB,CAgBHC,WArEJ,kBAAyC,CA4CrC,MAAO,aA1CP,gBAA6B,CACzB,MAAOnP,IAAG,wBAAqB,CAC3B8M,oDAAsD,CAClDE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADyC,CAAtDJ,OAIQ,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAChB3B,QAAQ2B,KAAR3B,QALJwM,SAMS,eAAW,CAChB1M,aAPJ0M,EADJ,CAAO9M,CAWV,CA8BM,WA5BP,gBAA2B,CACvB,MAAOA,IAAG,wBAAqB,CAC3B8M,kDAAoD,CAChDE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADuC,CAApDJ,OAIQ,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAChB3B,QAAQ2B,KAAR3B,QALJwM,SAMS,eAAW,CAChB1M,aAPJ0M,EADJ,CAAO9M,CAWV,CAgBM,CAGHoP,OAjBJ,gBAAwB,CACpB,MAAOpP,IAAG,wBAAqB,CAC3B8M,+CAAiD,CAC7CE,QAAS,CACL,cAAiB,UAAYC,QAAQC,KADhC,CADoC,CAAjDJ,OAIQ,gBAAY,IAAV7K,MAAU,OAAVA,IAAU,CAChB3B,QAAQ2B,KAAR3B,QALJwM,SAMS,eAAW,CAChB1M,aAPJ0M,EADJ,CAAO9M,CAWV,CAEM,CAKV,CAoBeqP,CAAoB,KAApBA,CAAoB,EAApBA,CAhBT,CAh6BfvQ,CACuB,CADvBA,CAFJ,I;;8FCAA,CAAC,UAAY,CAeT,wDAAoE,CA8ChE,MA5CA,WAAsB,CAwClByD,eAvCgB,CACZwD,YADY,uCAEZzD,WAKJ,0BAAuC,CAOnC,iBAAkB,CACdC,gBACH,CAPDxD,oBAFmC,CAInCA,WAOA,eAAoB,CAEhB,OADAuQ,QACA,QACI,cAAgB,CACZ7P,oCADY,CAEZ,KACH,CACD,eAAiB,CACbA,uCADa,CAEb,KACH,CACD,QACIA,qCADJ,CATJ,CAcH,CAGJ,CArCe,CAuChB8C,CACH,CAKJ,CACD,2EAAgF,CA6C5E,MA3CA,WAAsB,CAClB,MAAOvC,IAAG,eAAmB,CAoCzBuC,eAlCgB,CACZwD,YADY,gDAEZzD,WAIJ,0BAAuC,CAgBnC,iBAAkB,CACdC,gBACH,CAhBDxD,oBAFmC,CAGnCA,cAiBA,iBAAyB,CACrBuQ,QADqB,CAErBC,cACH,CAvBkC,CAInCxQ,iBAJmC,CAKnCA,kBALmC,CAOnC,UAAgB,CAEZE,8BAA8B,cAAQ,CAClCF,oBADkC,CAElCA,iBAFJE,EAKH,CAWDK,EACH,CAhCe,CAkChBiD,CApCJ,CAAOvC,CAuCV,CAKJ,CA5GDlB,gDAC2B,+CACnB,6CAAmD,CAE/C,MAAO,CACH0Q,QAASC,kBAAiB,KAAjBA,CAAiB,EAAjBA,CAAiB,SAAjBA,CAAiB,SAAjBA,CADN,MACMA,CADN,CAEHC,oBAAqBC,8BAA6B,KAA7BA,CAA6B,EAA7BA,CAA6B,SAA7BA,CAA6B,SAA7BA,CAA6B,MAA7BA,CAFlB,CAJnB7Q,CAC2B,CAD3BA,CAHJ,I;;6GCAA,CAAC,UAAY,CAGTA,4CACuB,cAAgB,UAAqB,IAE9CoD,aAAc,CAChBX,WADgB,aAEhBC,oBAFgB,qBAGhBC,eAHgB,iBAIhBC,cAJgB,gBAKhBC,eALgB,iBAMhBC,cANgB,gBAOhBC,aAPgB,eAQhBC,iBAAkB,kBARF,CAFgC,CAahD8N,QAAU,CACVC,SADU,CAbsC,CAiBhDC,SAAW,CACXD,SADW,CAjBqC,CA6HpD,MAAO,MAvGP,UAAgB,CACZD,iBADY,CAEZE,kBACH,CAoGM,MAlGP,UAAgB,CACZF,iBADY,CAEZE,kBACH,CA+FM,CAGHF,QAHG,QAIHE,SAJG,SAKHC,cAlGJ,sBAAsC,CAElCD,+BAFkC,CAGlCA,oBAAsB,CAClB,CACIhQ,KADJ,cAEIkQ,MAAO,CAMH,CACIC,QADJ,gCAEInQ,KAFJ,gBAGIoQ,KAAM,wBAHV,CANG,CAFX,CADkB,CAgBlB,CACIpQ,KADJ,aAEIkQ,MAAO,CACH,CACIC,QADJ,4BAEInQ,KAFJ,WAGIoQ,KAAM,gBAHV,CADG,CAMH,CACID,QADJ,+BAEInQ,KAFJ,UAGIoQ,KAAM,iBAHV,CANG,CAWH,CACID,QADJ,+BAEInQ,KAFJ,aAGIoQ,KAAM,mBAHV,CAXG,CAgBH,CACID,QADJ,oCAEInQ,KAFJ,gBAGIoQ,KAAM,sBAHV,CAhBG,CAFX,CAhBkB,CAyClB,CACIpQ,KADJ,MAEIkQ,MAAO,CACH,CACIC,QADJ,mCAEInQ,KAFJ,cAGIoQ,KAAM,oBAHV,CADG,CAMH,CACID,QADJ,mCAEInQ,KAFJ,cAGIoQ,KAAM,oBAHV,CANG,CAWH,CACID,QADJ,mCAEInQ,KAFJ,SAGIoQ,KAAM,eAHV,CAXG,CAgBH,CACID,QADJ,kCAEInQ,KAFJ,aAGIoQ,KAAM,mBAHV,CAhBG,CAFX,CAzCkB,CAkElB,CACIpQ,KADJ,UAEIkQ,MAAO,CACH,CACIC,QADJ,gCAEInQ,KAFJ,WAGIoQ,KAAM,qBAHV,CADG,CAFX,CAlEkB,EAAtBJ,MAAsB,CA+EtB,cAAgC,OAE5B,aAAIpQ,YAFwB,EAGjBF,0BAA0B0C,YAAjC,mBAAO1C,CAId,CAtFqB,CAwFzB,CAEM,CA9HfV,CACuB,CADvBA,CAHJ,I;;+JCZe,sEAA4E,CAqBvF,kBAAmB,CACf,MAAO,aAAY,wBAAqB,CAEpCC,eAAiB,CACb2L,IADa,EAEbC,QAFa,EAGbC,UAHa,EAIbC,QAAS,CAJI,CAFmB,CASpC5L,yBAAyB,CACrBwK,KAAM1K,2BADe,OACfA,EADe,CAErB2K,MAAO3K,kCAFc,CAAzBE,OAGQ,cAAU,IAEVkR,gBAAJ,EAFc,CAIVC,UAAY,CACZzG,KADY,GAEZ1C,SAAU,EAFE,CAJF,6EASd,wIAAuB,IAAdvH,MAAc,2FACnB,eAASyD,OAAT,YAAoBzD,KAApB,UAAoBA,CAApB,eAAoBA,GAApB,6FAASyD,OAAT,CAAqC,YAArC,CACSgN,eAAehN,QAApB,SAAKgN,CADT,GAEQA,eAAehN,QAAfgN,YAFR,EAIIA,eAAehN,QAAfgN,YAAqChN,QAArCgN,QALe,gMAOtB,CAhBa,yLAkBd,GAAIE,QAAJ,GAEA,IAAK,GAAL,sBACIA,YAAY,CACRnN,GADQ,GAERoN,SAAUH,eAAc,EAAdA,CAFF,CAAZE,EAMJA,YAAY,aAAU,CAClB,MAAO7E,YAAaD,EAApB,QADJ8E,EA3Bc,CA+Bd,GAAIE,aAAcF,eAAlB,EAAkBA,CAAlB,CAEAD,qBAjCc,oFAmCd,eAASjN,QAAT,uIAASA,QAAT,CAAiC,YAAjC,CACIiN,mBAAmBjN,SAAnBiN,MApCU,mRAuCd,eAAS1Q,KAAT,gIAAuB,CAAdA,KAAc,cACnB0Q,oBAAoB1Q,MAApB0Q,KADmB,oFAGnB,eAHmB,0CAIXI,MAAQ,sBAAqB,YAAE,OAAIC,gBAAiBtN,QAArB,EAAnC,CAAY,CAJG,CAMXpB,MAAJ,CANe,CAQf,KARe,GASXA,MAAQ6B,WAAW4M,MAAnBzO,WAAQ6B,CATG,EAYfwM,mBAAmBjN,QAAnBiN,eAZe,CAGnB,uIAAiC,OAHd,gMAetB,CAtDa,gMAwDdM,gBAAgB,CAACN,UAAD,UAAYD,6BAAZ,CAAhBO,6BA3DJzR,EATJ,CAAO,CA0EV,CAED,iCAAkC,CAE9B,MADA0R,yBACA,CAAO,YAAY,wBAAqB,CACpC1R,qBAAqB,CAAC2R,YAAD,CAArB3R,OAA6C,kBAAc,oFACvD,eAASkE,OAAT,oIAASA,OAAT,CAA8B,YAA9B,CACIwN,sBAAsBxN,QAAtBwN,YAFmD,gMAKvDrQ,gBALJrB,gBADJ,CAAO,CAUV,CAED,wBAAyB,IAEjB4R,SAAJ,EAFqB,CAIjB7I,YAAc/F,eAAlB,IAJqB,CAMrB,IAAK,GAAL,MAAeA,gBAAf,SAAwC,CAEpC,GAAI6O,OAAJ,cAEAD,aAAa,CACTzM,MAAOnC,uBADE,KAETA,KAAMA,wBAFG,EAEHA,CAFG,CAGT8O,gBAHS,MAITC,YAJS,EAKTC,YALS,EAMTC,OANS,CAAbL,CASH,CAED,GAAIzI,KAAMlI,mEAAV,CAAUA,CAAV,CACAA,oDAtBqB,CAuBrBA,gDAAgDA,uBAAhDA,QAAgDA,CAAhDA,CAvBqB,CAwBrBkI,IAAMlI,mEAANkI,CAAMlI,CAxBe,CA0BrBkI,cA1BqB,CAuEJ,UAAjB,GAAiB,CA3CF,CACX+I,KADW,OAEXlP,KAAM,CACF4G,OADE,YAEFuI,SAAUP,OAFR,CAFK,CAMXQ,QAAS,eAELC,YAAa,CACTC,KADS,QAETC,YAFS,CAFR,CAMLC,QAAS,CACL9I,OAAQ,CACJC,SADI,mBAGJC,OAAQ,CACJC,UAAW,OADP,CAHJ,CADH,CANJ,CAeLC,MAAO,CACHC,UADG,CAfF,CAkBL0I,QAAS,CACLH,KAAM,OADD,CAlBJ,CAqBLrI,OAAQ,CACJyI,EAAG,YAECR,KAAM,MAFP,CADC,CAKJS,EAAG,CACCvI,UADD,CALC,CAQJF,MAAO,CAAC,CACJ0I,mBADI,EAEJC,cAAe,CAFX,CAAD,CARH,CArBH,CANE,CA2CE,CAgCpB,CArND/S,mEAFuF,CAIvFA,iBAJuF,CAMvFuI,QAAU,UAAO,CAEbvI,mBAFa,CAGbA,mCAAqC,UAAM,CAA3CA,CAHJuI,CANuF,CAavFvI,mCAAqC,UAAM,CACvC8K,yBADJ9K,CAbuF,CAiBvF+K,SAAS,UAAM,CACXD,yBADI,CAARC,G,CAjBJ,0C,CAAA,mF","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"HomeCtrl\", ['$scope', '$interval', controller]);\n\n    function controller($scope, $interval) {\n\n\n    }\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"LoginCtrl\", ['$scope', '$NxApi','$NxNav', '$location', '$mdToast', function ($scope, $NxApi, $NxNav,$location, $mdToast) {\n\n            // Scope Properties\n\n            // Methods Declaration\n\n            $scope.keyPress = keyPress;\n            $scope.checkLogin = checkLogin;\n\n            // Implementation\n\n            function init() {\n\n            }\n\n\n            function keyPress($event) {\n                if ($event.code === \"Enter\") {\n                    checkLogin()\n                }\n            }\n\n            function checkLogin() {\n                if ($scope.loginData.email === \"\" || $scope.loginData.password === \"\") {\n                    toast(\"Please complete all your login information\")\n                } else {\n                    $NxApi.login($scope.loginData.email, $scope.loginData.password).then((user) => {\n                        window.location = \"/\";\n                    }).catch((error) => {\n                        toast(\"Invalid email or password. Pleas, check your login information.\")\n                    })\n                }\n            }\n\n            function toast(msg) {\n                $mdToast.show(\n                    $mdToast.simple()\n                        .textContent(msg)\n                        .hideDelay(5000))\n                    .then(function () {\n                    }).catch(function () {\n                });\n            }\n\n            init();\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"MainCtrl\", ['$scope', '$NxApi', '$NxNav', '$NxDialogs', '$location','$mdToast',\n            function ($scope, $NxApi, $NxNav, $NxDialogs, $location,$mdToast) {\n\n                // Scope Properties\n\n                $scope.navPanel = $NxNav.navPanel;\n                $scope.mainBar = $NxNav.mainBar;\n\n                // Methods Declaration\n\n                $scope.userPicture = userPicture;\n                $scope.userName = userName;\n                $scope.navAction = navAction;\n                $scope.currentAccount = currentAccount;\n                $scope.logOut = logOut;\n                $scope.accessProfile = accessProfile;\n                $scope.showAddDialog = showAddDialog;\n                $scope.toast = toast;\n\n                // Implementation\n\n                function init() {\n\n                    $NxApi.login().then(() => {\n\n                        if ($location.path() === \"/login\") {\n                            $location.path(\"/\")\n                        } else {\n\n                        }\n\n                    }).catch((e) => {\n                        console.log(2, e);\n                        $location.path(\"/login\");\n                    });\n\n                }\n\n                function userPicture() {\n                    const user = $NxApi.getUser();\n\n                    if (user && user.photo && user.photo.url) {\n                        return user.photo.url\n                    } else {\n                        return \"/res/drawable/ph_user.jpg\"\n                    }\n                }\n\n                function userName() {\n                    const user = $NxApi.getUser();\n\n                    if (user) {\n                        return user.firstName + \" \" + user.lastName\n                    } else {\n                        return \"...\"\n                    }\n                }\n\n                function navAction(item) {\n                    $location.path(item.path);\n                }\n\n                function currentAccount() {\n                    return $NxNav.navPanel.currentAccount;\n                }\n\n                function logOut() {\n                    localStorage.clear();\n                    window.location = \"/login\"\n                }\n\n                function accessProfile() {\n                    $location.path(\"/s/user-profile\")\n                }\n\n                function showAddDialog($event) {\n                    $NxDialogs.showAdd($event)\n                }\n\n                function toast(msg) {\n                    $mdToast.show(\n                        $mdToast.simple()\n                            .textContent(msg)\n                            .hideDelay(5000))\n                        .then(function () {\n                        }).catch(function () {\n                    });\n                }\n\n\n                init();\n\n            }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sAccountSettingsCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location','$q',\n                function ($scope, $NxApi, $mdToast, $location,$q) {\n\n            $scope.acount = {\n                logo: '',\n                name: '',\n                description: '',\n                services: []\n            };\n\n            $scope.account_users = account_users;\n            $scope.updateAccount = updateAccount;\n            $scope.uploadImage = uploadImage;\n\n            function init() {\n                let user = $NxApi.getUser();\n\n                if(user){\n                    $NxApi.getAccount(user.account).then((account) => {\n                        let {name, logo, description, services,_id} = account;\n\n                        $scope.acount = {\n                            _id,\n                            name,\n                            logo,\n                            description,\n                            services\n                        }\n                    })\n                }\n\n            }\n\n            function account_users(){\n                $location.path(\"/s/account/settings/users\")\n            }\n\n            function toast(msg) {\n                $mdToast.show(\n                    $mdToast.simple()\n                        .textContent(msg)\n                        .hideDelay(5000))\n                    .then(function () {\n                    }).catch(function () {\n                });\n            }\n\n            function checkForm() {\n\n                let {name, description} = $scope.acount;\n\n                if (name !== '' && description !== '') {\n                    return true\n                }\n\n                toast(\"The fields cannot be empty\");\n\n                return false\n            }\n\n            function _getImage() {\n                return $q((resolve, reject) => {\n                    let file = document.createElement('input');\n                    let maxSize = 500; //kb\n                    file.type = 'file';\n                    file.click();\n\n                    file.addEventListener('change', function () {\n\n                        if (file.files[0].size / 1000 > maxSize) {\n                            reject(`The image can not be larger than ${maxSize}kb`)\n                        }\n\n                        let reader = new FileReader();\n\n                        reader.onloadend = function () {\n                            resolve(reader.result)\n                        };\n\n                        reader.readAsDataURL(file.files[0]);\n                    })\n                })\n            }\n\n            function uploadImage() {\n                _getImage().then((img) => {\n                    $scope.acount.logo = {\n                        update:true,\n                        url:img\n                    };\n                }).catch((error) => {\n                    toast(error);\n                })\n            }\n\n            function updateAccount(){\n                if(checkForm()){\n\n                    $scope.loading = true;\n\n                    $NxApi.account\n                        .update($scope.acount)\n                        .then(() => {\n                            toast('The account was update');\n                            $scope.loading = false;\n                            if($scope.user.photo) $scope.user.photo.update = false;\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.loading = false;\n                        })\n\n                }\n            }\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sAccountSettingsUserCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location', '$routeParams', '$q', '$mdDialog',\n                function ($scope, $NxApi, $mdToast, $location, $routeParams, $q, $mdDialog) {\n\n                    const users_permissions = {\n                        USER_ADMIN: \"user.admin\",\n                        PRIVATE_CLOUD_ADMIN: \"privatecloud.admin\",\n                        PRODUCTS_WRITE: \"products.write\",\n                        PRODUCTS_READ: \"products.read\",\n                        CHANNELS_WRITE: \"channels.write\",\n                        CHANNELS_READ: \"channels.read\",\n                        STATS_ACCESS: \"stats.access\",\n                        SUBSCRIBERS_READ: \"subscribers.read\"\n                    };\n\n                    $scope.isNew = $routeParams.user_id === \"new\";\n                    $scope.user = {};\n                    $scope.accountName = '';\n                    $scope.users_permissions = [\n                        {\n                            value: users_permissions.CHANNELS_READ,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.CHANNELS_WRITE,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.PRODUCTS_READ,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.PRODUCTS_WRITE,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.STATS_ACCESS,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.SUBSCRIBERS_READ,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.USER_ADMIN,\n                            state: false\n                        },\n                        {\n                            value: users_permissions.PRIVATE_CLOUD_ADMIN,\n                            state: false\n                        }\n                    ];\n                    $scope.loading = false;\n\n                    $scope.updateUser = updateUser;\n                    $scope.uploadImage = uploadImage;\n                    $scope.getUrlProfilePhoto = getUrlProfilePhoto;\n                    $scope.dialog_changePassword = dialog_changePassword;\n                    $scope.dialog_alert = dialog_alert;\n                    $scope.logAsUser = logAsUser;\n\n                    function init() {\n                        if (!$scope.isNew) {\n                            let user_id = $routeParams.user_id;\n\n                            if (user_id) {\n                                $NxApi.users.read({_id: user_id}).then(({users}) => {\n                                    $scope.user = users[0];\n                                    for (let permission of $scope.users_permissions) {\n                                        if ($scope.user.permissions.includes(permission.value)) {\n                                            permission.state = true;\n                                        }\n                                    }\n                                });\n\n                            }\n                        }\n                    }\n\n                    function toast(msg) {\n                        $mdToast.show(\n                            $mdToast.simple()\n                                .textContent(msg)\n                                .hideDelay(5000))\n                            .then(function () {\n                            }).catch(function () {\n                        });\n                    }\n\n                    function checkForm() {\n\n                        let {firstName, lastName, email,password} = $scope.user;\n\n                        if (\n                            typeof firstName !== 'undefined' &&\n                            firstName !== '' &&\n                            typeof lastName !== 'undefined' &&\n                            lastName !== '' &&\n                            typeof email !== 'undefined'\n                            && email !== ''\n                        ) {\n\n                            if ($scope.isNew) {\n                                if (password !== 'undefined' && password !== '') {\n                                    return true\n                                }\n                            }else{\n                                return true\n                            }\n                        }\n\n                        toast(\"The fields cannot be empty\");\n\n                        return false\n                    }\n\n                    function updateUser() {\n\n                        if (checkForm()) {\n\n                            $scope.loading = true;\n\n                            let data = {\n                                _id: $scope.user._id,\n                                firstName: $scope.user.firstName,\n                                lastName: $scope.user.lastName,\n                                permissions: _getPermissions(),\n                                email: $scope.user.email\n                            };\n\n                            if($scope.user.photo){\n                                data[\"photo\"] = $scope.user.photo;\n                            }\n\n                            if ($scope.isNew) {\n\n                                data.password = $scope.user.password;\n\n                                $NxApi.users\n                                    .create(data)\n                                    .then(() => {\n                                        toast('The user was create');\n                                        $scope.loading = false;\n                                        $location.path(\"/s/account/settings/users\");\n\n                                    })\n                                    .catch((error) => {\n                                        console.log(error);\n                                        $scope.loading = false;\n                                    })\n\n                            } else {\n\n                                $NxApi.users\n                                    .update(data)\n                                    .then(() => {\n                                        toast('The user was update');\n                                        $scope.loading = false;\n                                        if($scope.user.photo) $scope.user.photo.update = false;\n\n                                    })\n                                    .catch((error) => {\n                                        console.log(error);\n                                        $scope.loading = false;\n                                    })\n                            }\n\n                        }\n\n                    }\n\n                    function getUrlProfilePhoto(user) {\n                        if (user.photo && user.photo.url) {\n                            return user.photo.url\n                        }\n\n                        return '/res/drawable/ph_user.jpg'\n                    }\n\n                    function _getPermissions() {\n                        let user_permissions = [];\n                        for (let permission of $scope.users_permissions) {\n                            if (permission.state) user_permissions.push(permission.value);\n                        }\n                        return user_permissions;\n                    }\n\n                    function dialog_changePassword() {\n\n                        let title = 'Reset Password';\n                        let templateUrl = \"/res/layout/dialog_change_password.html\";\n                        let userId = $scope.user._id;\n\n                        return $q((resolve, reject) => {\n\n                            let dialog = {\n                                templateUrl: templateUrl,\n                                parent: angular.element(document.body),\n                                escapeToClose: true,\n                                clickOutsideToClose: true,\n                                controller: dialogController\n                            };\n\n                            $mdDialog.show(dialog).then(resolve, reject);\n\n                            function dialogController($scope, $mdDialog) {\n\n                                $scope.title = title;\n                                $scope.userId = userId;\n                                $scope.newPassword = '';\n                                $scope.newPasswordVerify = '';\n                                $scope.loading = false;\n\n                                $scope.cancel = cancel;\n                                $scope.save = save;\n                                $scope.verifyPassword = verifyPassword;\n\n                                function init() {\n\n                                }\n\n                                function cancel() {\n                                    $mdDialog.cancel();\n                                }\n\n                                function verifyPassword() {\n\n                                    return ($scope.newPassword === '' && $scope.newPasswordVerify === '') || $scope.newPassword !== $scope.newPasswordVerify\n                                }\n\n                                function save() {\n                                    $scope.loading = true;\n                                    $NxApi.users\n                                        .update({\n                                            _id: userId,\n                                            password: $scope.newPassword\n                                        })\n                                        .then(() => {\n                                            toast('The password was update');\n                                            $scope.loading = false;\n                                            $mdDialog.hide();\n\n                                        })\n                                        .catch((error) => {\n                                            console.log(error);\n                                            $scope.loading = false;\n                                        })\n\n                                }\n\n                                init();\n                            }\n\n                        });\n\n                    }\n\n                    function dialog_alert() {\n\n                        let title = 'Remove user';\n                        let description = 'You are sure to delete the current user?';\n                        let templateUrl = \"/res/layout/dialog_alert.html\";\n                        let userId = $scope.user._id;\n\n                        return $q((resolve, reject) => {\n\n                            let dialog = {\n                                templateUrl: templateUrl,\n                                parent: angular.element(document.body),\n                                escapeToClose: true,\n                                clickOutsideToClose: true,\n                                controller: dialogController\n                            };\n\n                            $mdDialog.show(dialog).then(resolve, reject);\n\n                            function dialogController($scope, $mdDialog) {\n\n                                $scope.title = title;\n                                $scope.description = description;\n                                $scope.userId = userId;\n                                $scope.loading = false;\n\n                                $scope.cancel = cancel;\n                                $scope.ok = ok;\n\n                                function init() {\n\n                                }\n\n                                function cancel() {\n                                    $mdDialog.cancel();\n                                }\n\n                                function ok() {\n                                    $scope.loading = true;\n                                    $NxApi.users\n                                        .delete({\n                                            _id: userId\n                                        })\n                                        .then(() => {\n                                            toast('user removed');\n                                            $scope.loading = false;\n                                            $mdDialog.hide();\n                                            $location.path('/s/account/settings/users');\n\n                                        })\n                                        .catch((error) => {\n                                            console.log(error);\n                                            $scope.loading = false;\n                                        })\n\n                                }\n\n                                init();\n                            }\n\n                        });\n\n                    }\n\n                    function _getImage() {\n                        return $q((resolve, reject) => {\n                            let file = document.createElement('input');\n                            let maxSize = 500; //kb\n                            file.type = 'file';\n                            file.click();\n\n                            file.addEventListener('change', function () {\n\n                                if (file.files[0].size / 1000 > maxSize) {\n                                    reject(`The image can not be larger than ${maxSize}kb`)\n                                }\n\n                                let reader = new FileReader();\n\n                                reader.onloadend = function () {\n                                    resolve(reader.result)\n                                };\n\n                                reader.readAsDataURL(file.files[0]);\n                            })\n                        })\n                    }\n\n                    function uploadImage() {\n                        _getImage().then((img) => {\n                            $scope.user.photo = {\n                                update:true,\n                                url:img\n                            };\n                        }).catch((error) => {\n                            toast(error);\n                        })\n                    }\n\n                    function logAsUser(user){\n                        $NxApi.loginAsUser(user.email,user.authentication.password).then(()=>{\n                            window.location = \"/\";\n                        })\n                    }\n\n                    init();\n\n                    $NxApi.setAfterLogin(init);\n\n                }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sAccountSettingsUsersCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location', '$q', '$mdDialog',\n                function ($scope, $NxApi, $mdToast, $location, $q, $mdDialog) {\n\n                    $scope.users = [];\n                    $scope.accountName = '';\n                    $scope.loading = true;\n\n                    $scope.getUrlProfilePhoto = getUrlProfilePhoto;\n                    $scope.userDetails = userDetails;\n                    $scope.newUser = newUser;\n                    $scope.removeUser = removeUser;\n\n                    function init() {\n                        let user = $NxApi.getUser();\n\n                        if (user) {\n\n                            $NxApi.getAccount(user.account).then((account) => {\n                                $scope.accountName = account.name;\n                                $NxApi.users.read({account: user.account}).then(({users}) => {\n                                    $scope.users = users;\n                                    $scope.loading = false;\n                                });\n                            })\n\n                        }\n\n                    }\n\n                    function _updateTable() {\n                        let user = $NxApi.getUser();\n\n                        if (user) {\n\n                            $NxApi.getAccount(user.account).then((account) => {\n                                $scope.accountName = account.name;\n                                $NxApi.users.read({account: user.account}).then(({users}) => {\n                                    $scope.users = users;\n                                });\n                            })\n\n                        }\n                    }\n\n                    function newUser() {\n                        $location.path('/s/account/settings/users/new')\n                    }\n\n                    function userDetails(user) {\n                        $location.path('/s/account/settings/users/' + user._id)\n                    }\n\n                    function removeUser(user) {\n\n                        dialog_alert(user).then(() => {\n                            toast('user removed');\n                            _updateTable();\n                        })\n\n                    }\n\n                    function toast(msg) {\n                        $mdToast.show(\n                            $mdToast.simple()\n                                .textContent(msg)\n                                .hideDelay(5000))\n                            .then(function () {\n                            }).catch(function () {\n                        });\n                    }\n\n                    function dialog_alert(user) {\n\n                        let title = 'Remove user';\n                        let description = 'You are sure to delete the selected user?';\n                        let templateUrl = \"/res/layout/dialog_alert.html\";\n                        let userId = user._id;\n\n                        return $q((resolve, reject) => {\n\n                            let dialog = {\n                                templateUrl: templateUrl,\n                                parent: angular.element(document.body),\n                                escapeToClose: true,\n                                clickOutsideToClose: true,\n                                controller: dialogController\n                            };\n\n                            $mdDialog.show(dialog).then(resolve, reject);\n\n                            function dialogController($scope, $mdDialog) {\n\n                                $scope.title = title;\n                                $scope.description = description;\n                                $scope.userId = userId;\n                                $scope.loading = false;\n\n                                $scope.cancel = cancel;\n                                $scope.ok = ok;\n\n                                function init() {\n\n                                }\n\n                                function cancel() {\n                                    $mdDialog.cancel();\n                                }\n\n                                function ok() {\n                                    $scope.loading = true;\n                                    $NxApi.users\n                                        .delete({\n                                            _id: userId\n                                        })\n                                        .then(() => {\n                                            $scope.loading = false;\n                                            $mdDialog.hide();\n\n\n                                        })\n                                        .catch((error) => {\n                                            console.log(error);\n                                            $scope.loading = false;\n                                        })\n\n                                }\n\n                                init();\n                            }\n\n                        });\n\n                    }\n\n                    function getUrlProfilePhoto(user) {\n                        if (user.photo && user.photo.url) {\n                            return user.photo.url\n                        }\n\n                        return '/res/drawable/ph_user.jpg'\n                    }\n\n                    init();\n\n                    $NxApi.setAfterLogin(init);\n\n                }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sNACtrl\", ['$scope', '$NxApi', '$mdToast','$location', function ($scope, $NxApi, $mdToast,$location) {\n\n            function init(){\n\n            }\n\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sCategoriesCtrl\", ['$scope', '$interval', '$NxApi', '$location'\n            , function ($scope, $interval, $NxApi, $location) {\n\n                $scope.search = '';\n                $scope.categories = [];\n                $scope.channelDetails = channelDetails;\n                $scope.customFilter = customFilter;\n\n                function init() {\n\n                    $NxApi.categories\n                        .read({})\n                        .then((channels) => {\n                            $scope.categories = channels;\n                        })\n                        .catch((error) => {\n                            console.log(error);\n\n                        })\n                }\n\n                function channelDetails(category) {\n                    $location.path('/s/ott/categories/' + category._id)\n                }\n\n                function customFilter() {\n                    return function (item) {\n\n                        if($scope.search === '') return true;\n\n                        return !item.name.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.channelEPGId.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.entryPoint.streamKey.toLowerCase().indexOf($scope.search.toLowerCase())\n                    }\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sCategoriesDetailCtrl\", ['$scope', '$interval', '$routeParams', '$NxApi', '$q', '$location', '$mdDialog', controller]);\n\n    function controller($scope, $interval, $routeParams, $NxApi, $q, $location, $mdDialog) {\n\n        $scope.isNew = $routeParams.id === \"new\";\n        $scope.categoryData = {\n            name: '',\n            descriptionShort: '',\n            descriptionLong: '',\n            enabled: false\n        };\n\n        $scope.updateCategory = updateCategory;\n        $scope.removeCategory = removeCategory;\n\n        function init() {\n            if (!$scope.isNew) {\n                $NxApi.categories\n                    .read({_id: $routeParams.id})\n                    .then((category) => {\n                        $scope.categoryData = category[0];\n                    })\n                    .catch((error) => {\n                        $location.path(\"/s/ott/categories\");\n                        $scope.$parent.toast('The category doesn\\'t exist');\n\n                    })\n            }\n\n        }\n\n        function checkForm() {\n\n            let {name, descriptionShort, descriptionLong} = $scope.categoryData;\n\n            if (name !== '' && descriptionShort !== '' && descriptionLong !== '' ) {\n                return true\n            }\n\n            $scope.$parent.toast(\"The fields cannot be empty\");\n\n            return false\n        }\n\n        function removeCategory() {\n\n            dialog_alert()\n                .then(() => {\n                    $location.path('/s/ott/categories');\n                }).catch((error) => {\n                $scope.$parent.toast(error.message)\n            })\n        }\n\n        function dialog_alert() {\n\n            let title = 'Remove Category';\n            let description = 'You are sure you want to delete the current category?';\n            let templateUrl = \"/res/layout/dialog_alert.html\";\n            let channelId = $routeParams.id;\n\n            return $q((resolve, reject) => {\n\n                let dialog = {\n                    templateUrl: templateUrl,\n                    parent: angular.element(document.body),\n                    escapeToClose: true,\n                    clickOutsideToClose: true,\n                    controller: dialogController\n                };\n\n                $mdDialog.show(dialog).then(resolve, reject);\n\n                function dialogController($scope, $mdDialog, $location) {\n\n                    $scope.title = title;\n                    $scope.description = description;\n                    $scope.channelId = channelId;\n                    $scope.loading = false;\n\n                    $scope.cancel = cancel;\n                    $scope.ok = ok;\n\n                    function init() {\n\n                    }\n\n                    function cancel() {\n                        $mdDialog.cancel();\n                    }\n\n                    function ok() {\n                        $scope.loading = true;\n                        $NxApi.categories\n                            .delete({\n                                _id: channelId\n                            })\n                            .then(() => {\n                                $mdDialog.hide();\n                            })\n                            .catch((error) => {\n                                $mdDialog.cancel(error);\n                                $scope.loading = false;\n                            })\n\n                    }\n\n                    init();\n                }\n\n            });\n\n        }\n\n        function updateCategory() {\n            if (checkForm()) {\n\n                $scope.loading = true;\n\n                if ($scope.isNew) {\n\n                    $NxApi.categories\n                        .create($scope.categoryData)\n                        .then(() => {\n                            $scope.$parent.toast('The category was created');\n                            $scope.loading = false;\n                            $location.path(\"/s/ott/categories\");\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.$parent.toast(error.message);\n                            $scope.loading = false;\n                        })\n\n                } else {\n                    $NxApi.categories\n                        .update($scope.categoryData)\n                        .then(() => {\n                            $scope.$parent.toast('The category was update');\n                            $scope.loading = false;\n                            if ($scope.channelData.poster) $scope.channelData.poster.update = false;\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.$parent.toast(error.message);\n                            $scope.loading = false;\n\n                        })\n\n                }\n\n            }\n        }\n\n        $NxApi.setAfterLogin(init);\n\n\n    }\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttChannelCtrl\", ['$scope', '$interval', '$NxApi', '$location'\n            , function ($scope, $interval, $NxApi, $location) {\n\n                $scope.search = '';\n                $scope.channels = [];\n                $scope.channelDetails = channelDetails;\n                $scope.customFilter = customFilter;\n\n                function init() {\n                    $NxApi.channels\n                        .read({})\n                        .then((channels) => {\n                            $scope.channels = channels;\n                        })\n                        .catch((error) => {\n                            console.log(error);\n\n                        })\n                }\n\n                function channelDetails(channel) {\n                    $location.path('/s/ott/channel/' + channel._id)\n                }\n\n                function customFilter() {\n                    return function (item) {\n\n                        if ($scope.search === '') return true;\n\n                        return !item.name.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.channelEPGId.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.publishing[0].streamName.toLowerCase().indexOf($scope.search.toLowerCase()) ||\n                            !item.entryPoint.streamKey.toLowerCase().indexOf($scope.search.toLowerCase())\n                    }\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttChannelDetailCtrl\", ['$scope', '$interval', '$routeParams', '$NxApi', '$q', '$location', '$mdDialog', controller]);\n\n    function controller($scope, $interval, $routeParams, $NxApi, $q, $location, $mdDialog) {\n\n        $scope.isNew = $routeParams.id === \"new\";\n        $scope.channelData = {\n            name: '',\n            descriptionShort: '',\n            channelEPGId: '',\n            descriptionLong: '',\n            poster: [],\n            notes: '',\n            enabled: false,\n            transcoder: null\n        };\n\n        $scope.uploadImage = uploadImage;\n        $scope.getUrlPoster = getUrlPoster;\n        $scope.updateChannel = updateChannel;\n        $scope.removeChannel = removeChannel;\n        $scope.restartPush = restartPush;\n\n        $scope.categories = [];\n\n        function init() {\n            $NxApi.categories\n                .read({})\n                .then((categories) => {\n                    $scope.categories = categories;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n\n            if (!$scope.isNew) {\n\n                $NxApi.channels\n                    .read({_id: $routeParams.id})\n                    .then((channel) => {\n                        $scope.channelData = channel[0];\n                    })\n                    .catch((error) => {\n                        $location.path(\"/s/ott/channel\");\n                        $scope.$parent.toast('The channel not exist');\n                    })\n            }\n\n        }\n\n        function getUrlPoster(channel) {\n            if (channel && channel.poster && channel.poster.length) {\n                return {'background-image': 'url(' + channel.poster[0].url + ')'}\n            }\n\n            return {'background-image': 'url(/res/drawable/ph_noimage.png)'}\n        }\n\n        function _getImage() {\n            return $q((resolve, reject) => {\n                let file = document.createElement('input');\n                let maxSize = 500; //kb\n                file.type = 'file';\n                file.click();\n\n                file.addEventListener('change', function () {\n\n                    if (file.files[0].size / 1000 > maxSize) {\n                        reject(`The image can not be larger than ${maxSize}kb`)\n                    }\n\n                    let reader = new FileReader();\n\n                    reader.onloadend = function () {\n                        resolve(reader.result)\n                    };\n\n                    reader.readAsDataURL(file.files[0]);\n                })\n            })\n        }\n\n        function uploadImage() {\n            _getImage().then((img) => {\n                $scope.channelData.poster = [{\n                    update: true,\n                    url: img\n                }];\n            }).catch((error) => {\n                $scope.$parent.toast(error);\n            })\n        }\n\n        function checkForm() {\n\n            let {name, descriptionShort, channelEPGId, descriptionLong, poster} = $scope.channelData;\n\n            if (name !== '' && descriptionShort !== '' && channelEPGId !== '' && descriptionLong !== '' && poster.length !== 0) {\n                return true\n            }\n\n            $scope.$parent.toast(\"The fields cannot be empty\");\n\n            return false\n        }\n\n        function removeChannel() {\n\n            dialog_alert()\n                .then(() => {\n                    $location.path('/s/ott/channel');\n                })\n                .catch((error) => {\n                    $scope.$parent.toast(error.message)\n                })\n        }\n\n        function restartPush() {\n\n            let channelId = $routeParams.id;\n            $scope.loading = true;\n            $NxApi.channels.restartPush({id: channelId})\n                .then(() => {\n                    $scope.$parent.toast(\"Channel push restarted.\");\n                    $scope.loading = false;\n                })\n                .catch(() => {\n                    $scope.$parent.toast(\"Something happened. Channel push couldn't be restart.\");\n                    $scope.loading = false;\n                })\n\n        }\n\n        function dialog_alert() {\n\n            let title = 'Remove Channel';\n            let description = 'You are sure to delete the current Channel?';\n            let templateUrl = \"/res/layout/dialog_alert.html\";\n            let channelId = $routeParams.id;\n\n            return $q((resolve, reject) => {\n\n                let dialog = {\n                    templateUrl: templateUrl,\n                    parent: angular.element(document.body),\n                    escapeToClose: true,\n                    clickOutsideToClose: true,\n                    controller: dialogController\n                };\n\n                $mdDialog.show(dialog).then(resolve, reject);\n\n                function dialogController($scope, $mdDialog, $location) {\n\n                    $scope.title = title;\n                    $scope.description = description;\n                    $scope.channelId = channelId;\n                    $scope.loading = false;\n\n                    $scope.cancel = cancel;\n                    $scope.ok = ok;\n\n                    function init() {\n\n                    }\n\n                    function cancel() {\n                        $mdDialog.cancel();\n                    }\n\n                    function ok() {\n                        $scope.loading = true;\n                        $NxApi.channels\n                            .delete({\n                                _id: channelId\n                            })\n                            .then(() => {\n                                $mdDialog.hide();\n                            })\n                            .catch((error) => {\n                                $mdDialog.cancel(error);\n                                $scope.loading = false;\n                            })\n\n                    }\n\n                    init();\n                }\n\n            });\n\n        }\n\n        function updateChannel() {\n            if (checkForm()) {\n\n                $scope.loading = true;\n\n                if ($scope.isNew) {\n\n                    $NxApi.channels\n                        .create($scope.channelData)\n                        .then(() => {\n                            $scope.$parent.toast('The channel was created');\n                            $scope.loading = false;\n                            $location.path(\"/s/ott/channel\");\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.$parent.toast(error.message);\n                            $scope.loading = false;\n                        })\n\n                } else {\n                    $NxApi.channels\n                        .update($scope.channelData)\n                        .then(() => {\n                            $scope.$parent.toast('Channel updated');\n                            $scope.loading = false;\n                            if ($scope.channelData.poster) $scope.channelData.poster.update = false;\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.$parent.toast(error.message);\n                            $scope.loading = false;\n\n                        })\n\n                }\n\n            }\n        }\n\n        $NxApi.setAfterLogin(init);\n\n\n    }\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttConfigCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', function ($scope, $NxApi, $mdToast, $location) {\n\n            $scope.ottConfigurations = {};\n\n            $scope.save = save;\n\n            function save() {\n                $scope.loading = true;\n\n                $NxApi.ottConfigurations.update($scope.ottConfigurations).then(data => {\n\n                    $scope.loading = false;\n                    $scope.$parent.toast('The OTT Configurations was update');\n                }).catch((error) => {\n                    console.log(error);\n                    $scope.$parent.toast(error.message);\n                    $scope.loading = false;\n\n                })\n            }\n\n            function init() {\n\n                $NxApi.ottConfigurations.read().then(({ottConfigurations}) => {\n                    $scope.ottConfigurations = ottConfigurations;\n                })\n\n            }\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttEPGMonitorCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', function ($scope, $NxApi, $mdToast, $location) {\n\n            $scope.channels = [];\n            $scope.programmes = [];\n            $scope.loading = true;\n            $scope.order = 'channelEPGId';\n\n            $scope.sortBy = sortBy;\n            $scope.getIconChannel = getIconChannel;\n\n            function init() {\n\n                $NxApi.programmes.read({}).then((programmes) => {\n\n                    $scope.programmes = programmes;\n\n                    $NxApi.programmes.channels({}).then((channelsEPGId) => {\n\n                        $NxApi.channels.read({channelEPGId: channelsEPGId}).then((channels) => {\n\n                            $scope.channels = channels;\n                            $scope.loading = false;\n                        })\n                    });\n                })\n\n            }\n\n            function sortBy(order){\n                $scope.order = order;\n            }\n\n            function getIconChannel(channelEPGId) {\n                let value = '/res/drawable/ph_noimage.png';\n                let out = false;\n                for (let channel of $scope.channels) {\n\n                    if (out) break;\n\n                    if (channelEPGId === parseInt(channel.channelEPGId)) {\n                        out = true;\n                        value = channel.poster[0].url;\n                    }\n                }\n\n                return value\n            }\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sPrivateCloudCtrl\", ['$scope', '$interval', '$NxApi', '$location', '$routeParams'\n            , function ($scope, $interval, $NxApi, $location, $routeParams) {\n\n                $scope.loading = true;\n                $scope.privateCloudConfig = {};\n\n                $scope.entryPointItems = entryPointItems;\n                $scope.transcoderItems = transcoderItems;\n                $scope.edgeserverItems = edgeserverItems;\n                $scope.packagerItems = packagerItems;\n                $scope.openServer = openServer;\n\n                function init() {\n\n                    $NxApi.privateCloud\n                        .getConfig()\n                        .then((privateCloudConfig) => {\n                            $scope.privateCloudConfig = privateCloudConfig;\n                        })\n                        .catch((error) => {\n\n                        })\n\n\n                }\n\n                function entryPointItems(server) {\n\n                    if (!server) return [];\n\n                    if (typeof server.resumeItems === \"undefined\") {\n                        server.resumeItems = [];\n\n                        server.loading = true;\n\n                        $NxApi.privateCloud\n                            .getEntrypointCondition(server.ip)\n                            .then((privateCloudConfig) => {\n\n\n                                server.loading = false;\n                                server.resumeItems = [\n                                    {\n                                        label: \"Up Time\",\n                                        data: formatUptime(privateCloudConfig.serverStats.uptime.uptime)\n                                    },\n                                    {\n                                        label: \"Incoming Feeds\",\n                                        data: privateCloudConfig.entryPointTasks.length + \" channels\"\n                                    },\n                                    {\n                                        label: \"CPU Load\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"I/O Waits\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"Disk Reading\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                                    },\n                                    {\n                                        label: \"Disk Writing\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                                    }\n                                ];\n                            })\n                            .catch((error) => {\n                                console.error(error);\n\n                            })\n\n                    }\n\n\n                    return server.resumeItems;\n                }\n\n                function transcoderItems(server) {\n\n                    if (!server) return [];\n\n                    if (typeof server.resumeItems === \"undefined\") {\n                        server.resumeItems = [];\n                        server.loading = true;\n\n\n                        $NxApi.privateCloud\n                            .getTranscoderCondition(server.ip)\n                            .then((privateCloudConfig) => {\n\n                                server.loading = false;\n\n                                let gpu_enc = 0,\n                                    gpu_dec = 0,\n                                    gpu_mem = 0;\n\n                                for (let task of privateCloudConfig.transcoderTasks) {\n\n                                    if (task.gpu) {\n                                        gpu_enc += task.gpu.enc;\n                                        gpu_dec += task.gpu.dec;\n                                        gpu_mem += task.gpu.fb;\n                                    }\n\n                                }\n\n                                server.resumeItems = [\n                                    {\n                                        label: \"Up Time\",\n                                        data: formatUptime(privateCloudConfig.serverStats.uptime.uptime)\n                                    },\n                                    {\n                                        label: \"Transcoding tasks\",\n                                        data: privateCloudConfig.transcoderTasks.length + \" tasks\"\n                                    },\n                                    {\n                                        label: \"CPU Load\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"GPU Encoding\",\n                                        data: Math.round(100 * gpu_enc) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"GPU Decoding\",\n                                        data: Math.round(100 * gpu_dec) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"GPU Memory\",\n                                        data: Math.round(100 * gpu_mem) / 100 + \" MB\"\n                                    },\n                                    {\n                                        label: \"I/O Waits\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"Disk Reading\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                                    },\n                                    {\n                                        label: \"Disk Writing\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                                    }\n                                ];\n                            })\n                            .catch((error) => {\n                                console.error(error);\n                            })\n\n                    }\n\n\n                    return server.resumeItems;\n                }\n\n                function edgeserverItems() {\n                    return [];\n                }\n\n                function packagerItems(server) {\n\n\n                    if (!server) return [];\n\n                    if (typeof server.resumeItems === \"undefined\") {\n                        server.resumeItems = [];\n\n                        server.loading = true;\n\n                        $NxApi.privateCloud\n                            .getPackagerCondition(server.ip)\n                            .then((privateCloudConfig) => {\n\n                                server.loading = false;\n                                server.resumeItems = [\n                                    {\n                                        label: \"Up Time\",\n                                        data: formatUptime(privateCloudConfig.serverStats.uptime.uptime)\n                                    },\n                                    {\n                                        label: \"CPU Load\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"I/O Waits\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"Disk Reading\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                                    },\n                                    {\n                                        label: \"Disk Writing\",\n                                        data: Math.round(100 * privateCloudConfig.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                                    },\n                                    {\n                                        label: \"Nginx CPU Load\",\n                                        data: Math.round(100 * privateCloudConfig.packagerStats.serverStats.nginx.cpu) / 100 + \" %\"\n                                    },\n                                    {\n                                        label: \"Nginx Mem\",\n                                        data: Math.round(100 * privateCloudConfig.packagerStats.serverStats.nginx.mem / 1024) / 100 + \" kB/s\"\n                                    }\n\n                                ];\n                            })\n                            .catch((error) => {\n                                console.error(error);\n\n                            })\n\n                    }\n\n                    return server.resumeItems;\n                }\n\n                function openServer(server) {\n                    $location.path(`/s/infra/private-cloud/${server.role}/${server.ip}`)\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n\n    angular.module('NxStudio')\n        .controller(\"sPrivateCloudDetailCtrl\", ['$scope', '$interval', '$NxApi', '$location', '$routeParams', '$mdDialog'\n            , function ($scope, $interval, $NxApi, $location, $routeParams, $mdDialog) {\n\n                let mServer = null;\n\n                $scope.role = $routeParams.role;\n                $scope.ip = $routeParams.ip;\n                $scope.privateCloudConfig = null;\n                $scope.templateURL = null;\n                $scope.server = null;\n                $scope.channels = [];\n\n                $scope.transcoderItems = transcoderItems;\n                $scope.getChannel = getChannel;\n                $scope.getTranscoder = getTranscoder;\n                $scope.getPackager = getPackager;\n                $scope.restartEntrypoint = restartEntrypoint;\n                $scope.restartTranscoder = restartTranscoder;\n                $scope.testEntrypointInput = testEntrypointInput;\n                $scope.testTxInput = testTxInput;\n                $scope.testTxStream = testTxStream;\n                $scope.openTranscoder = openTranscoder;\n                $scope.openPackager = openPackager;\n                $scope.openChannel = openChannel;\n                $scope.formatUptime = formatUptime;\n                $scope.gpuResume = gpuResume;\n\n                function init() {\n\n                    $NxApi.channels.read({}).then(channels => {\n                        $scope.channels = channels;\n                    });\n\n                    $NxApi.privateCloud\n                        .getConfig()\n                        .then((privateCloudConfig) => {\n\n                            $scope.privateCloudConfig = privateCloudConfig;\n\n                            for (let server of $scope.privateCloudConfig[$scope.role]) {\n                                if (server.ip === $scope.ip) {\n                                    $scope.server = server;\n                                    mServer = server;\n                                }\n                            }\n\n                            switch ($routeParams.role) {\n                                case \"entrypoint\": {\n                                    $NxApi.privateCloud.getEntrypointCondition($routeParams.ip).then(initEntrypoint);\n                                    break;\n                                }\n\n                                case \"transcoder\": {\n                                    $NxApi.privateCloud.getTranscoderCondition($routeParams.ip).then(initTranscoder);\n                                    break;\n                                }\n\n                                case \"packager\": {\n                                    $NxApi.privateCloud.getPackagerCondition($routeParams.ip).then(initPackager);\n                                    break;\n                                }\n\n                                case \"edgeserver\": {\n                                    $NxApi.privateCloud.getEdgeserverCondition($routeParams.ip).then(initEdgeserver);\n                                    break;\n                                }\n                            }\n\n                        })\n                        .catch((error) => {\n\n                        })\n\n\n                }\n\n                function getChannel(hash) {\n                    for (let channel of $scope.channels) {\n                        if (channel.entryPoint.streamKey === hash || channel.publishing[0].streamName === hash) {\n                            return channel;\n                        }\n                    }\n                    return null\n                }\n\n                function getTranscoder(ip) {\n                    for (let t of $scope.privateCloudConfig.transcoder) {\n                        if (t.ip === ip || t.ip2 === ip)\n                            return t;\n                    }\n                    return null;\n                }\n\n                function getPackager(ip) {\n                    for (let t of $scope.privateCloudConfig.packager) {\n                        if (t.ip === ip || t.ip2 === ip)\n                            return t;\n                    }\n                    return null;\n                }\n\n                function getEntrypoint(ip) {\n                    for (let t of $scope.privateCloudConfig.entrypoint) {\n                        if (t.ip === ip || t.ip2 === ip)\n                            return t;\n                    }\n                    return null;\n                }\n\n                function transcoderItems() {\n                    if ($scope.server && $scope.server.resumeItems) {\n                        return $scope.server.resumeItems;\n                    } else {\n                        return [];\n                    }\n                }\n\n                function restartEntrypoint(task, $event) {\n                    let confirm = $mdDialog.confirm()\n                        .title(`Restarting ${getChannel(task.inStream).name}.`)\n                        .textContent(`Confirm you want to restart de connection between the \n                        Entrypoint and the Transcoder for the channel ${getChannel(task.inStream).name}.`)\n                        .ariaLabel('Restarting Entrypoint')\n                        .targetEvent($event)\n                        .ok('Restart Connection')\n                        .cancel('Cancel');\n\n                    $mdDialog.show(confirm).then(function () {\n\n\n                        $NxApi.privateCloud.killPid({\n                            role: \"entrypoint\",\n                            ip: mServer.ip,\n                            pid: task.pid\n                        }).then(result => {\n                            console.log(result);\n                            init();\n                        })\n\n\n                    }, function () {\n\n                    });\n                }\n\n                function restartTranscoder(task, $event) {\n                    let confirm = $mdDialog.confirm()\n                        .title(`Restarting ${getChannel(task.hash).name}.`)\n                        .textContent(`Confirm you want to restart de connection between the \n                        Entrypoint and the Transcoder for the channel ${getChannel(task.hash).name}.`)\n                        .ariaLabel('Restarting Entrypoint')\n                        .targetEvent($event)\n                        .ok('Restart Connection')\n                        .cancel('Cancel');\n\n                    $mdDialog.show(confirm).then(function () {\n\n\n                        $NxApi.privateCloud.killPid({\n                            role: \"transcoder\",\n                            ip: mServer.ip,\n                            pid: task.pid\n                        }).then(result => {\n                            console.log(result);\n                            init();\n                        })\n\n\n                    }, function () {\n\n                    });\n                }\n\n                function initEntrypoint(serverCondition) {\n                    $scope.templateURL = \"/res/layout/view_s_private_cloud_entrypoint.html\";\n\n                    $scope.serverCondition = serverCondition;\n\n                    $scope.server.resumeItems = [\n                        {\n                            label: \"Up Time\",\n                            data: formatUptime(serverCondition.serverStats.uptime.uptime)\n                        },\n                        {\n                            label: \"Incoming Feeds\",\n                            data: serverCondition.entryPointTasks.length + \" channels\"\n                        },\n                        {\n                            label: \"CPU Load\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                        },\n                        {\n                            label: \"I/O Waits\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                        },\n                        {\n                            label: \"Disk Reading\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                        },\n                        {\n                            label: \"Disk Writing\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                        }\n                    ];\n\n                }\n\n                function initTranscoder(serverCondition) {\n                    $scope.templateURL = \"/res/layout/view_s_private_cloud_transcoder.html\";\n\n                    $scope.serverCondition = serverCondition;\n\n                    let gpu_enc = 0,\n                        gpu_dec = 0,\n                        gpu_mem = 0;\n\n                    for (let task of serverCondition.transcoderTasks) {\n\n                        if (task.gpu) {\n                            gpu_enc += task.gpu.enc;\n                            gpu_dec += task.gpu.dec;\n                            gpu_mem += task.gpu.fb;\n                        }\n\n                    }\n\n                    $scope.server.resumeItems = [\n                        {\n                            label: \"Up Time\",\n                            data: formatUptime(serverCondition.serverStats.uptime.uptime)\n                        },\n                        {\n                            label: \"Transcoding tasks\",\n                            data: serverCondition.transcoderTasks.length + \" tasks\"\n                        },\n                        {\n                            label: \"CPU Load\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                        },\n                        {\n                            label: \"GPU Encoding\",\n                            data: Math.round(100 * gpu_enc) / 100 + \" %\"\n                        },\n                        {\n                            label: \"GPU Decoding\",\n                            data: Math.round(100 * gpu_dec) / 100 + \" %\"\n                        },\n                        {\n                            label: \"GPU Memory\",\n                            data: Math.round(100 * gpu_mem) / 100 + \" MB\"\n                        },\n                        {\n                            label: \"I/O Waits\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                        },\n                        {\n                            label: \"Disk Reading\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                        },\n                        {\n                            label: \"Disk Writing\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                        }\n                    ];\n                }\n\n                function initPackager(serverCondition) {\n                    $scope.templateURL = \"/res/layout/view_s_private_cloud_packager.html\";\n\n                    $scope.serverCondition = serverCondition;\n\n                    $scope.server.resumeItems = [\n                        {\n                            label: \"Up Time\",\n                            data: formatUptime(serverCondition.serverStats.uptime.uptime)\n                        },\n                        {\n                            label: \"CPU Load\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.total) / 100 + \" %\"\n                        },\n                        {\n                            label: \"I/O Waits\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.cpuLoad.iowait) / 100 + \" %\"\n                        },\n                        {\n                            label: \"Disk Reading\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.readRatio) / 100 + \" kB/s\"\n                        },\n                        {\n                            label: \"Disk Writing\",\n                            data: Math.round(100 * serverCondition.serverStats.ioStats.diskStats.totals.writeRatio) / 100 + \" kB/s\"\n                        },\n                        {\n                            label: \"Nginx CPU Load\",\n                            data: Math.round(100 * serverCondition.packagerStats.serverStats.nginx.cpu) / 100 + \" %\"\n                        },\n                        {\n                            label: \"Nginx Mem\",\n                            data: Math.round(100 * serverCondition.packagerStats.serverStats.nginx.mem / 1024) / 100 + \" kB/s\"\n                        }\n                    ];\n                }\n\n                function initEdgeserver(serverCondition) {\n\n                }\n\n                function openTranscoder(task) {\n                    $location.path(`s/infra/private-cloud/transcoder/${getTranscoder(task.targetServer).ip}`)\n                }\n\n                function openPackager(task) {\n                    $location.path(`s/infra/private-cloud/packager/${getPackager(task.target.server).ip}`)\n                }\n\n                function openChannel(task) {\n                    if (task.hash) {\n                        $location.path(`s/ott/channel/${getChannel(task.hash)._id}`)\n\n                    } else {\n                        $location.path(`s/ott/channel/${getChannel(task.inStream)._id}`)\n                    }\n                }\n\n                function testTxInput(task, event) {\n\n                    streamingTestDialog({\n                        protocol: \"rtmp\",\n                        host: getTranscoder(task.targetServer).ip,\n                        port: task.targetPort,\n                        app: task.targetApp,\n                        streamname: task.outStream\n                    }, task, event)\n                }\n\n                function testTxStream(task, event) {\n\n                    console.log(task);\n\n                    let streams = [];\n\n                    let targetServer = getPackager(task.target.server).ip;\n\n                    for (let o of  task.target.outs) {\n                        streams.push({\n                            protocol: \"rtmp\",\n                            host: targetServer,\n                            port: task.target.port,\n                            app: task.target.app,\n                            streamname: o.stream\n                        })\n                    }\n\n                    streamingTestDialog(streams, task, event)\n                }\n\n                function testEntrypointInput(task, event) {\n\n                    streamingTestDialog({\n                        protocol: \"rtmp\",\n                        host: mServer.ip,\n                        port: task.sourcePort,\n                        app: task.sourceApp,\n                        streamname: task.inStream\n                    }, task, event);\n                }\n\n                function streamingTestDialog(pSource, task, event) {\n\n                    let source;\n\n                    if (Array.isArray(pSource)) {\n                        source = pSource[0];\n                    } else {\n                        source = pSource;\n                    }\n\n                    let dialog = {\n                        controller: DialogController,\n                        templateUrl: \"/res/layout/dialog_private_cloud_stream_inspector.html\",\n                        target: event,\n                        clickOutsideToClose: true\n                    };\n\n                    $mdDialog.show(dialog);\n\n                    function DialogController($scope) {\n\n                        let protocol = source.protocol,\n                            host = source.host,\n                            port = source.port,\n                            app = source.app,\n                            streamname = source.streamname;\n\n                        $scope.busy = false;\n\n                        $scope.rtmpTestingSource = `${protocol}://${host}:${port}/${app}/${streamname}`;\n\n                        $scope.doMediaInfo = doMediaInfo;\n                        $scope.doSnapshot = doSnapshot;\n                        $scope.doPlayback = doPlayback;\n\n                        function doPlayback() {\n                            let element = document.getElementById(\"dialog-result-display\");\n\n                            let serverPart = `rtmp://${source.host}/${source.app}`,\n                                streamname = source.streamname;\n\n                            element.innerHTML = `<object type=\"application/x-shockwave-flash\" id=\"VideoPlayer\" data=\"/lib/JarisFLVPlayer.swf\" width=\"640px\" height=\"360px\"><param name=\"menu\" value=\"false\"><param name=\"scale\" value=\"noScale\"><param name=\"allowFullscreen\" value=\"true\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"bgcolor\" value=\"#000000\"><param name=\"quality\" value=\"high\"><param name=\"wmode\" value=\"opaque\"><param name=\"flashvars\" value=\"source=${streamname}&amp;type=video&amp;streamtype=rtmp&amp;controltype=1&amp;duration=3600&amp;aspectratio=auto&amp;autostart=true&amp;hardwarescaling=true&amp;controls=true&amp;darkcolor=000000&amp;brightcolor=4c4c4c&amp;controlcolor=FFFFFF&amp;hovercolor=67A8C1&amp;seekcolor=D3D3D3&amp;jsapi=flase&amp;server=${serverPart}\"></object>`\n\n                        }\n\n                        function doSnapshot() {\n\n                            let element = document.getElementById(\"dialog-result-display\");\n\n                            let video = document.createElement(\"video\");\n\n                            let id = (Date.now()).toString(32);\n\n                            element.innerHTML = \"\";\n\n                            console.log(`http://200.2.125.60:10888/api/snapshot/${encodeURIComponent($scope.rtmpTestingSource)}/play.mp4`);\n\n                            video.id = id;\n                            video.controls = \"true\";\n                            video.autoplay = \"true\";\n                            video.className = \"video-js vjs-default-skin vjs-big-play-centered video-container\";\n                            video.src = `http://200.2.125.60:10888/api/snapshot/${encodeURIComponent($scope.rtmpTestingSource)}/play.mp4`;\n\n                            element.append(video)\n\n                            videojs(id);\n\n                        }\n\n                        function doMediaInfo() {\n                            let element = document.getElementById(\"dialog-result-display\");\n\n                            $scope.busy = true;\n                            $NxApi.privateCloud.mediainfo($scope.rtmpTestingSource, \"text\").then(response => {\n                                    $scope.busy = false;\n                                    let pre = document.createElement(\"pre\");\n\n                                    pre.innerText = response.text;\n                                    pre.style.background = \"#353535\";\n                                    pre.style.color = \"#ddd\";\n                                    pre.style.fontWeight = \"800\";\n                                    pre.style.padding = \"#10px\";\n                                    pre.style.borderRadius = \"5px\";\n\n                                    element.innerHTML = \"\";\n                                    element.style.display = \"block\";\n                                    element.appendChild(pre);\n                                }\n                            )\n\n                        }\n\n                    }\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n\n    function gpuResume(task) {\n        if (task.gpu) {\n            return `${Math.round(10 * task.gpu.dec) / 10}%, ${Math.round(10 * task.gpu.enc) / 10}%, ${Math.round(task.gpu.mem * 10) / 10}%`;\n        } else {\n            return \"-\";\n        }\n    }\n\n    function formatUptime(timeInSec) {\n\n        let str = \"\";\n        let rst = timeInSec;\n\n        const DAY = 86400;\n        const HOUR = 3600;\n        const MINUTE = 60;\n\n        if (rst > DAY) {\n            str += Math.floor(rst / DAY) + \"d \";\n            rst -= Math.floor(rst / DAY) * DAY\n        }\n\n        if (rst > HOUR) {\n            str += Math.floor(rst / HOUR) + \"h \";\n            rst -= Math.floor(rst / HOUR) * HOUR\n        }\n\n        if (rst > MINUTE) {\n            str += Math.floor(rst / MINUTE) + \"m\";\n            rst -= Math.floor(rst / MINUTE) * MINUTE\n        }\n\n\n        return str;\n\n    }\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttProductsCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location','$q','$mdDialog',\n                function ($scope, $NxApi, $mdToast, $location,$q,$mdDialog) {\n\n            $scope.products = [];\n            $scope.loading = true;\n\n            $scope.details = details;\n            $scope.shortDescription = shortDescription;\n            $scope.remove = remove;\n\n            function init() {\n                _updateTable();\n\n            }\n\n            function details(product) {\n                $location.path('/s/ott/products/' + product._id)\n            }\n\n            function shortDescription(text){\n                return typeof text !== 'undefined' ? text.substring(0,20) + \"...\"  : '';\n            }\n\n            function dialog_alert(product) {\n\n                let title = 'Remove package';\n                let description = 'You are sure to delete the selected package?';\n                let templateUrl = \"/res/layout/dialog_alert.html\";\n                let productId = product._id;\n\n                return $q((resolve, reject) => {\n\n                    let dialog = {\n                        templateUrl: templateUrl,\n                        parent: angular.element(document.body),\n                        escapeToClose: true,\n                        clickOutsideToClose: true,\n                        controller: dialogController\n                    };\n\n                    $mdDialog.show(dialog).then(resolve, reject);\n\n                    function dialogController($scope, $mdDialog) {\n\n                        $scope.title = title;\n                        $scope.description = description;\n                        $scope.productId = productId;\n                        $scope.loading = false;\n\n                        $scope.cancel = cancel;\n                        $scope.ok = ok;\n\n                        function init() {\n\n                        }\n\n                        function cancel() {\n                            $mdDialog.cancel();\n                        }\n\n                        function ok() {\n                            $scope.loading = true;\n                            $NxApi.products\n                                .delete({\n                                    _id: productId\n                                })\n                                .then(() => {\n                                    $scope.loading = false;\n                                    $mdDialog.hide();\n\n\n                                })\n                                .catch((error) => {\n                                    console.log(error);\n                                    $scope.loading = false;\n                                })\n\n                        }\n\n                        init();\n                    }\n\n                });\n\n            }\n\n            function remove(product){\n                dialog_alert(product).then(()=>{\n                    $scope.$parent.toast('Package removed');\n                    _updateTable();\n                })\n            }\n\n            function _updateTable(){\n                $scope.loading = true;\n                $NxApi.products.read({}).then((products) => {\n                    $scope.products = products;\n\n                    for(let i=0;i<products.length;i++){\n\n                        let product = products[i];\n\n                        $NxApi.channels.read({\n                            _id:product.channels\n                        }).then((channels) => {\n                            product.channels = channels;\n                            $scope.loading = false;\n                        });\n                    }\n\n                });\n            }\n\n            $NxApi.setAfterLogin(init);\n\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttProductsDetailCtrl\",\n            ['$scope', '$interval', '$routeParams', '$NxApi', '$NxDialogs','$location','$q','$mdDialog', controller]);\n\n\n    function controller($scope, $interval, $routeParams, $NxApi, $NxDialogs, $location,$q,$mdDialog) {\n\n        $scope.isNew = $routeParams.id === \"new\";\n\n        $scope.productData = {\n            name:'',\n            description:'',\n            channels: [],\n            notes:''\n        };\n\n        $scope.addChannel = addChannel;\n        $scope.clearAllChannels = clearAllChannels;\n        $scope.removeChannel = removeChannel;\n        $scope.update = update;\n        $scope.remove = remove;\n\n        function init() {\n            if(!$scope.isNew){\n                $NxApi.products.read({\n                    _id:$routeParams.id\n                }).then((products)=>{\n\n                    let product = products[0];\n\n                    $NxApi.channels.read({\n                        _id:product.channels\n                    }).then((channels)=>{\n\n                        $scope.productData = {\n                            id: product._id,\n                            name: product.name,\n                            description:product.description,\n                            notes:product.notes,\n                            channels: channels\n                        };\n\n                    });\n\n\n\n\n                });\n            }\n\n\n        }\n\n        function addChannel() {\n            $NxDialogs.showChannelSelector().then((channel) => {\n                for (let item of $scope.productData.channels) {\n                    if (item._id === channel._id) {\n                        return;\n                    }\n                }\n\n                $scope.productData.channels.push(channel);\n            })\n        }\n\n        function clearAllChannels() {\n            $scope.productData.channels = [];\n        }\n\n        function removeChannel(channel) {\n\n            console.log(channel);\n\n            for (let i in $scope.productData.channels) {\n\n                let item = $scope.productData.channels[i];\n\n                if (item._id === channel._id) {\n                    $scope.productData.channels.splice(i, 1);\n                }\n            }\n        }\n\n        function update(){\n\n            if(_checkFields()){\n\n                if($scope.isNew){\n                    $scope.loading = true;\n                    $NxApi.products.create({\n                        ...$scope.productData,\n                        channels:$scope.productData.channels.map((item)=>item._id)\n                    }).then(()=>{\n                        $scope.$parent.toast('The product was created');\n                        $scope.loading = false;\n                        $location.path(\"/s/ott/products\");\n                    }).catch((error) => {\n                        console.log(error);\n                        $scope.$parent.toast(error.message);\n                        $scope.loading = false;\n\n                    });\n                }else{\n                    $scope.productData[\"_id\"] = $routeParams.id;\n                    $scope.loading = true;\n                    $NxApi.products.update({\n                        ...$scope.productData,\n                        channels:$scope.productData.channels.map((item)=>item._id)\n                    }).then(()=>{\n                        $scope.$parent.toast('The product was update');\n                        $scope.loading = false;\n\n                    }).catch((error) => {\n                        console.log(error);\n                        $scope.$parent.toast(error.message);\n                        $scope.loading = false;\n\n                    });\n                }\n\n            }else{\n                $scope.$parent.toast(\"The fields cannot be empty\");\n            }\n\n        }\n\n        function dialog_alert() {\n\n            let title = 'Remove package';\n            let description = 'You are sure to delete the selected package?';\n            let templateUrl = \"/res/layout/dialog_alert.html\";\n            let productId = $routeParams.id;\n\n            return $q((resolve, reject) => {\n\n                let dialog = {\n                    templateUrl: templateUrl,\n                    parent: angular.element(document.body),\n                    escapeToClose: true,\n                    clickOutsideToClose: true,\n                    controller: dialogController\n                };\n\n                $mdDialog.show(dialog).then(resolve, reject);\n\n                function dialogController($scope, $mdDialog) {\n\n                    $scope.title = title;\n                    $scope.description = description;\n                    $scope.productId = productId;\n                    $scope.loading = false;\n\n                    $scope.cancel = cancel;\n                    $scope.ok = ok;\n\n                    function init() {\n\n                    }\n\n                    function cancel() {\n                        $mdDialog.cancel();\n                    }\n\n                    function ok() {\n                        $scope.loading = true;\n                        $NxApi.products\n                            .delete({\n                                _id: productId\n                            })\n                            .then(() => {\n                                $scope.loading = false;\n                                $mdDialog.hide();\n\n\n                            })\n                            .catch((error) => {\n                                console.log(error);\n                                $mdDialog.cancel(error);\n                                $scope.loading = false;\n                            })\n\n                    }\n\n                    init();\n                }\n\n            });\n\n        }\n\n        function remove(){\n\n            dialog_alert().then(()=>{\n                $scope.$parent.toast('Package removed');\n                $scope.loading = false;\n                $mdDialog.hide();\n                $location.path('/s/ott/products');\n            }).catch((error) => {\n                console.log(error);\n                $scope.$parent.toast(error.message);\n                $scope.loading = false;\n\n            });\n        }\n\n        function _checkFields(){\n            return $scope.productData.name !== '' && $scope.productData.description !== '' && $scope.productData.channels.length !== 0\n        }\n\n        $NxApi.setAfterLogin(init);\n\n    }\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n\nimport ContentCtrl from \"./stats/statsContentCtrl\"\n\n(function () {\n\n    let  nextColor = 0;\n\n    angular.module('NxStudio')\n        .controller(\"sOttStatisticsCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', '$mdDialog', '$timeout',\n            function ($scope, $NxApi, $mdToast, $location, $mdDialog, $timeout) {\n\n                $scope.sectionName = \"Choose a section\";\n                $scope.filters = {\n                    active: false,\n                    changeDates: changeDates,\n                    changeParameters: changeParameters,\n                    dates: setDatesToLastWeek(),\n                    parameters: [],\n                    onDateChanged: () => {\n                    }\n                };\n\n                $scope.sections = [\n                    {\n                        name: \"Subscribers\",\n                        icon: \"/res/drawable/ic_users.svg\",\n                        controller: SubscribersCtrl\n                    }, {\n                        name: \"Audience\",\n                        icon: \"/res/drawable/ic_viewing.svg\",\n                        controller: AudienceCtrl\n                    }, {\n                        name: \"Content\",\n                        icon: \"/res/drawable/ic_show.svg\",\n                        controller: ContentCtrl\n                    }, {\n                        name: \"Devices\",\n                        icon: \"/res/drawable/ic_devices.svg\",\n                        controller: DevicesCtrl\n                    }\n                ];\n\n                $scope.startSection = startSection;\n\n                let cleanUp = (_) => {\n                };\n\n                function init() {\n                    startSection($scope.sections[0]);\n                }\n\n                function changeDates() {\n\n                    let masterScope = $scope;\n\n                    $mdDialog.show({\n                        templateUrl: \"/res/layout/fragment_dialog_date_rage.html\",\n                        controller: ($scope, $mdDialog) => {\n\n                            $scope.cancel = function () {\n                                $mdDialog.hide()\n                            };\n\n                            $scope.save = function () {\n\n                                masterScope.filters.dates.start = $scope.ctrl.startDate;\n                                masterScope.filters.dates.end = $scope.ctrl.endDate;\n\n                                if (typeof masterScope.filters.dates.onDateChanged === \"function\") {\n                                    masterScope.filters.dates.onDateChanged();\n                                }\n                                $mdDialog.hide()\n                            };\n\n                            $scope.ctrl = {\n                                startDate: new Date(masterScope.filters.dates.start),\n                                endDate: new Date(masterScope.filters.dates.end)\n                            };\n\n                        }\n                    })\n                }\n\n                function changeParameters() {\n                    $scope.filters.active = true;\n                }\n\n                function startSection(section) {\n\n                    if (typeof section.controller === \"function\") {\n                        cleanUp();\n                        $scope.currentSection = section;\n                        section.controller($scope, $timeout, Chart, cleanUp,$NxApi, randomColor) ;\n                    }\n\n                }\n\n                function SubscribersCtrl() {\n\n                    $scope.templateUrl = \"/res/layout/view_s_ott_statistics_subscribers.html\";\n\n                    $scope.summary = {\n                        new: 0,\n                        deletion: 0,\n                        active: 0\n                    };\n\n                    cleanUp = (_) => {\n                        // Clean data on new section fill\n                        $scope.summary = null;\n                        $scope.filters.dates.onDateChanged = () => {\n                        }\n                    };\n\n                    $scope.filters.dates.onDateChanged = () => {\n                        getData().then(drawChart);\n\n                    };\n\n                    $timeout(() => {\n                        getData().then(drawChart);\n                    }, 0);\n\n                    function drawChart(data) {\n\n                        let char_labels = data.date;\n                        let chart_data_active = data.active;\n                        let chart_data_new = data.new;\n                        let chart_data_del = data.deletions;\n\n                        let ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n                        document.getElementById(\"sb-chart\").removeChild(ctx);\n                        document.getElementById(\"sb-chart\").appendChild(document.createElement(\"canvas\"));\n                        ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n\n                        ctx.height = 125;\n                        let myBarChart = new Chart(ctx, {\n                            \"type\": \"line\",\n                            \"data\": {\n                                \"labels\": char_labels,\n                                \"datasets\": [\n                                    {\n                                        \"label\": \"Unsubscription\",\n                                        \"data\": chart_data_del,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(154,1,16,0.67)',\n                                        \"borderWidth\": 0\n                                    }, {\n                                        \"label\": \"New Subscribers\",\n                                        \"data\": chart_data_new,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(57,133,0,0.67)',\n                                        \"borderWidth\": 0\n                                    },\n                                    {\n                                        \"label\": \"Active Subscribers\",\n                                        \"data\": chart_data_active,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(0,77,160,0.67)',\n                                        \"borderWidth\": 0\n                                    }]\n                            },\n                            \"options\": {\n                                layout: {\n                                    padding: {\n                                        left: 0,\n                                        right: 0,\n                                        top: 0,\n                                        bottom: 0\n                                    }\n                                },\n                                legend: {\n                                    position: \"bottom\",\n                                    display: true,\n                                    labels: {\n                                        fontColor: 'black'\n                                    }\n                                },\n                                title: {\n                                    display: false\n                                },\n                                tooltips: {\n                                    enabled: true,\n                                    display: false,\n                                },\n                                scales: {\n                                    xAxes: [{\n                                        stacked: false,\n                                        display: true,\n                                    }],\n                                    yAxes: [{\n                                        display: true,\n                                        stacked: false\n                                    }]\n                                }\n                            }\n                        });\n                    }\n\n                    function getData() {\n                        return new Promise((resolve, reject) => {\n\n                            $scope.summary = {\n                                new: 0,\n                                deletion: 0,\n                                active: 0\n                            };\n\n                            $NxApi.statistics.subscribers({\n                                from: $scope.filters.dates.start.getTime(),\n                                until: $scope.filters.dates.end.getTime()\n                            }).then((data) => {\n\n                                let result = {\n                                    date: [],\n                                    active: [],\n                                    new: [],\n                                    deletions: []\n                                };\n\n                                for (let item of data) {\n\n                                    let date = new Date(item.date);\n\n                                    result.date.push(`${date.getDate()}/${date.getMonth() + 1}`);\n                                    result.active.push(item.active.total);\n                                    result.new.push(item.installs.total);\n                                    result.deletions.push(item.uninstalls.total);\n\n                                    $scope.summary.new += item.installs.total;\n                                    $scope.summary.deletion += item.uninstalls.total;\n\n                                }\n\n                                $scope.summary.active = result.active[result.active.length - 1];\n\n                                resolve(result);\n\n                            })\n\n                        });\n                    }\n\n                }\n\n                function AudienceCtrl() {\n\n                    $scope.templateUrl = \"/res/layout/view_s_ott_statistics_viewing.html\";\n\n                    $scope.summary = {\n                        concurrency: 0,\n                        uniqueUsers: 0,\n                        avgPTPD: 0\n                    };\n\n                    cleanUp = (_) => {\n                        // Clean data on new section fill\n                        $scope.summary = null;\n                        $scope.filters.dates.onDateChanged = () => {\n                        }\n                    };\n\n                    $scope.filters.dates.onDateChanged = () => {\n                        getData().then(drawChart);\n                    };\n\n                    $timeout(() => {\n                        getData().then(drawChart);\n                    }, 0);\n\n                    function drawChart(data) {\n\n                        let char_labels = data.date;\n                        let chart_data_unique = data.uniqueUsers;\n                        let chart_data_avgPTPD = data.avgPTPD;\n\n                        let ctx = document.getElementById(\"sb-chart-1\").getElementsByTagName(\"canvas\")[0];\n                        document.getElementById(\"sb-chart-1\").removeChild(ctx);\n                        document.getElementById(\"sb-chart-1\").appendChild(document.createElement(\"canvas\"));\n                        ctx = document.getElementById(\"sb-chart-1\").getElementsByTagName(\"canvas\")[0];\n\n                        ctx.height = 125;\n                        let myBarChart = new Chart(ctx, {\n                            \"type\": \"line\",\n                            \"data\": {\n                                \"labels\": char_labels,\n                                \"datasets\": [\n                                    {\n                                        \"label\": \"Unique Users\",\n                                        \"data\": chart_data_unique,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(57,133,0,0.67)',\n                                        \"borderWidth\": 0\n                                    }]\n                            },\n                            \"options\": {\n                                layout: {\n                                    padding: {\n                                        left: 0,\n                                        right: 0,\n                                        top: 0,\n                                        bottom: 0\n                                    }\n                                },\n                                legend: {\n                                    position: \"bottom\",\n                                    display: false,\n                                    labels: {\n                                        fontColor: 'black'\n                                    }\n                                },\n                                title: {\n                                    display: false\n                                },\n                                tooltips: {\n                                    enabled: true,\n                                    display: false,\n                                },\n                                scales: {\n                                    xAxes: [{\n                                        stacked: false,\n                                        display: true,\n                                    }],\n                                    yAxes: [{\n                                        display: true,\n                                        stacked: false,\n                                        ticks: {\n                                            beginAtZero: true\n                                        }\n                                    }]\n                                }\n                            }\n                        });\n\n\n                        let ctx2 = document.getElementById(\"sb-chart-2\").getElementsByTagName(\"canvas\")[0];\n                        document.getElementById(\"sb-chart-2\").removeChild(ctx2);\n                        document.getElementById(\"sb-chart-2\").appendChild(document.createElement(\"canvas\"));\n                        ctx2 = document.getElementById(\"sb-chart-2\").getElementsByTagName(\"canvas\")[0];\n\n                        ctx2.height = 125;\n                        let myBarChar2t = new Chart(ctx2, {\n                            \"type\": \"line\",\n                            \"data\": {\n                                \"labels\": char_labels,\n                                \"datasets\": [\n                                    {\n                                        \"label\": \"Average Playing Time per Subscriber\",\n                                        \"data\": chart_data_avgPTPD,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(154,1,16,0.67)',\n                                        \"borderWidth\": 0\n                                    }]\n                            },\n                            \"options\": {\n                                layout: {\n                                    padding: {\n                                        left: 0,\n                                        right: 0,\n                                        top: 0,\n                                        bottom: 0\n                                    }\n                                },\n                                legend: {\n                                    position: \"bottom\",\n                                    display: true,\n                                    labels: {\n                                        fontColor: 'black'\n                                    }\n                                },\n                                title: {\n                                    display: false\n                                },\n                                tooltips: {\n                                    enabled: true,\n                                    display: false,\n                                },\n                                scales: {\n                                    xAxes: [{\n                                        stacked: false,\n                                        display: true,\n                                    }],\n                                    yAxes: [{\n                                        display: true,\n                                        stacked: false,\n                                        ticks: {\n                                            beginAtZero: true\n                                        }\n                                    }]\n                                }\n                            }\n                        });\n\n\n                    }\n\n                    function getData() {\n                        return new Promise((resolve, reject) => {\n\n                            $scope.summary = {\n                                uniqueUsers: 0,\n                                avgPTPD: 0\n                            };\n\n                            let result = {\n                                date: [],\n                                uniqueUsers: [],\n                                avgPTPD: []\n                            };\n\n                            $NxApi.statistics.dailyPlay({\n                                from: $scope.filters.dates.start.getTime(),\n                                until: $scope.filters.dates.end.getTime()\n                            }).then((data) => {\n\n                                let uidx = [];\n\n                                for (let item of data) {\n\n                                    let date = new Date(item.date);\n\n                                    result.date.push(`${date.getDate()}/${date.getMonth() + 1}`);\n                                    result.uniqueUsers.push(item.peaks.uniqueUsers);\n                                    result.avgPTPD.push(Math.round(item.avgPerSub.playingTime / 60000));\n\n                                    if (item.avgPerSub.playingTime !== 0) {\n                                        $scope.summary.avgPTPD += item.avgPerSub.playingTime;\n                                    } else {\n                                        $scope.summary.avgPTPD = item.avgPerSub.playingTime;\n                                    }\n\n                                    for (let s in item.subscribers) {\n                                        uidx[s] = 1;\n                                    }\n\n                                }\n\n                                for (let id in uidx) {\n                                    $scope.summary.uniqueUsers++;\n                                }\n\n                                $scope.summary.avgPTPD /= data.length;\n\n                                resolve(result);\n                            });\n\n                        });\n                    }\n\n                }\n\n\n\n                function DevicesCtrl() {\n\n                    $scope.templateUrl = \"/res/layout/view_s_ott_statistics_devices.html\";\n\n                    $scope.summary = {\n                        ios: 0,\n                        android: 0,\n                        androidTv: 0,\n                        browser: 0\n                    };\n\n                    cleanUp = (_) => {\n                        // Clean data on new section fill\n                        $scope.summary = null;\n                        $scope.filters.dates.onDateChanged = () => {\n                        }\n                    };\n\n                    $scope.filters.dates.onDateChanged = () => {\n                        getData().then(drawChart);\n                    };\n\n                    $timeout(() => {\n                        getData().then(drawChart);\n                    }, 0);\n\n                    function getData() {\n                        return new Promise((resolve, reject) => {\n\n                            $scope.summary = {\n                                ios: 0,\n                                android: 0,\n                                androidTv: 0,\n                                browser: 0\n                            };\n\n                            $NxApi.statistics.dailyPlay({\n                                from: $scope.filters.dates.start.getTime(),\n                                until: $scope.filters.dates.end.getTime()\n                            }).then((data) => {\n\n                                let result = {\n                                    date: [],\n                                    ios: [],\n                                    android: [],\n                                    androidTv: [],\n                                    browser: []\n                                };\n\n                                for (let item of data) {\n\n                                    $scope.summary.ios += item.devices.ios;\n                                    $scope.summary.android += item.devices.android;\n                                    $scope.summary.androidTv += item.devices.androidTv;\n                                    $scope.summary.browser += item.devices.browser;\n\n\n                                    let date = new Date(item.date);\n\n                                    result.date.push(`${date.getDate()}/${date.getMonth() + 1}`);\n\n                                    result.ios.push(item.devices.ios);\n                                    result.android.push(item.devices.android);\n                                    result.androidTv.push(item.devices.androidTv);\n                                    result.browser.push(item.devices.browser);\n\n                                }\n\n                                let tnm = ($scope.summary.ios +\n                                    $scope.summary.android +\n                                    $scope.summary.androidTv +\n                                    $scope.summary.browser) / 100;\n\n                                $scope.summary.ios /= tnm;\n                                $scope.summary.android /= tnm;\n                                $scope.summary.androidTv /= tnm;\n                                $scope.summary.browser /= tnm;\n\n                                resolve(result);\n                            });\n\n                        });\n                    }\n\n                    function drawChart(data) {\n\n                        let char_labels = data.date;\n\n                        let chart_data_iOs = data.ios;\n                        let chart_data_and = data.android;\n                        let chart_data_box = data.androidTv;\n                        let chart_data_browser = data.browser;\n\n                        let ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n                        document.getElementById(\"sb-chart\").removeChild(ctx);\n                        document.getElementById(\"sb-chart\").appendChild(document.createElement(\"canvas\"));\n                        ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n\n                        ctx.height = 125;\n                        let myBarChart = new Chart(ctx, {\n                            \"type\": \"line\",\n                            \"data\": {\n                                \"labels\": char_labels,\n                                \"datasets\": [\n                                    {\n                                        \"label\": \"Android\",\n                                        \"data\": chart_data_and,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(47,110,0,0.67)',\n                                        \"borderWidth\": 0\n                                    }, {\n                                        \"label\": \"TV Box\",\n                                        \"data\": chart_data_box,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(0,77,160,0.67)',\n                                        \"borderWidth\": 0\n                                    },\n                                    {\n                                        \"label\": \"iOs\",\n                                        \"data\": chart_data_iOs,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(0,0,0,0.99)',\n                                        \"borderWidth\": 0\n                                    },\n                                    {\n                                        \"label\": \"Browser\",\n                                        \"data\": chart_data_browser,\n                                        \"fill\": true,\n                                        \"backgroundColor\": 'rgba(203,83,35,0.67)',\n                                        \"borderWidth\": 0\n                                    }]\n                            },\n                            \"options\": {\n                                layout: {\n                                    padding: {\n                                        left: 0,\n                                        right: 0,\n                                        top: 0,\n                                        bottom: 0\n                                    }\n                                },\n                                legend: {\n                                    position: \"bottom\",\n                                    display: true,\n                                    labels: {\n                                        fontColor: 'black'\n                                    }\n                                },\n                                title: {\n                                    display: false\n                                },\n                                tooltips: {\n                                    enabled: true,\n                                    display: false,\n                                },\n                                scales: {\n                                    xAxes: [{\n                                        stacked: false,\n                                        display: true,\n                                    }],\n                                    yAxes: [{\n                                        display: true,\n                                        stacked: false\n                                    }]\n                                }\n                            }\n                        });\n                    }\n\n\n                }\n\n                function setDatesToLastWeek() {\n                    const DELTA = 604800000;\n                    let result = {};\n\n                    result.start = new Date();\n                    result.start.setTime(result.start.getTime() - DELTA);\n                    result.start.setHours(0, 0, 0, 0);\n\n                    result.end = new Date();\n                    result.end.setHours(0, 0, 0, 0);\n\n                    return result;\n                }\n\n\n                function randomColor() {\n                    let colors =\n                        [\n                            \"#068f23\", \"#8a2d65\", \"#ed8052\",\n                            \"#4ea032\", \"#568ea8\", \"#d43d51\",\n                            \"#77b143\", \"#e2604f\", \"#bed36c\",\n                            \"#9cc256\", \"#864780\", \"#f49f5b\",\n                            \"#dfe584\", \"#8f0b80\", \"#1b94ad\",\n                            \"#b03317\", \"#1e6dff\", \"#205b1c\",\n                            \"#ffab31\", \"#126eb4\", \"#d03cc0\",\n                        ];\n                    if (!nextColor) nextColor = 0;\n                    return colors[nextColor++ % colors.length];\n                }\n\n                // End of code\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttSubscribersCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', '$timeout',\n            function ($scope, $NxApi, $mdToast, $location, $timeout) {\n\n                $scope.subscribers = {\n                    getItemAtIndex: function (i) {\n                        return null;\n                    },\n                    getLength: function () {\n                        return 0;\n                    }\n                };\n\n                $scope.sortedBy = sortedBy;\n                $scope.sortBy = sortBy;\n\n                let sortVars = {\n                    by: \"id\",\n                    order: 1\n                };\n\n                let subscribers = [];\n                let products = [];\n\n                $scope.loading = true;\n                $scope.details = details;\n\n                $scope.productName = function (id) {\n                    return products.find(element => element._id === id).name;\n                };\n\n                function init() {\n\n                    $NxApi.products.read({}).then((result) => {\n                        products = result;\n                    });\n\n                    $NxApi.subscribers.read().then((data) => {\n\n                        subscribers = data.subscribers;\n\n\n                        sortSubscribers();\n\n                        $scope.subscribers = {\n                            getItemAtIndex: function (i) {\n                                return subscribers[i];\n                            },\n                            getLength: function () {\n                                return subscribers.length;\n                            }\n                        };\n\n                        $scope.$watch(\"search\", (newValue) => {\n                            if(!newValue || newValue === \"\"){\n                                subscribers = data.subscribers;\n                            }else{\n                                subscribers = [];\n\n                                for(let subscriber of data.subscribers){\n\n                                    if( subscriber.cid.toString().includes(newValue) ||\n                                        subscriber.email.toLowerCase().includes(newValue.toLowerCase())){\n                                        subscribers.push(subscriber)\n                                    }\n\n                                }\n\n                            }\n                        });\n\n                        $scope.loading = false;\n\n                    }).catch((e) => {\n                        console.error(e);\n                    })\n                }\n\n                function details(subscriber) {\n                    $location.path('/s/ott/subscribers/' + subscriber._id)\n                }\n\n                function sortedBy(field, order) {\n                    return order === sortVars.order && field === sortVars.by;\n                }\n\n                function sortBy(field){\n\n                    if(sortVars.by === field){\n                        sortVars.order = (sortVars.order + 1) % 2; // Toggle\n                    }else{\n                        sortVars.by = field;\n                        sortVars.order = 0;\n                    }\n\n                    sortSubscribers();\n\n                }\n\n                function sortSubscribers(){\n                    let field = sortVars.by;\n                    switch (field) {\n                        case \"id\":{\n                            subscribers.sort((a,b)=>{\n                                if(sortVars.order === 0){\n                                    return a._id > b._id?1:-1\n                                }else{\n                                    return a._id < b._id?1:-1\n                                }\n                            });\n                            break;\n                        }\n                        case \"packages\":{\n                            break;\n                        }\n                        case \"email\":{\n                            subscribers.sort((a,b)=>{\n                                if(sortVars.order === 0){\n                                    return a.email > b.email?1:-1\n                                }else{\n                                    return a.email < b.email?1:-1\n                                }\n                            });\n                            break;\n                        }\n                        case \"creationd\":{\n                            subscribers.sort((a,b)=>{\n                                if(sortVars.order === 0){\n                                    return a.creationDate > b.creationDate?1:-1\n                                }else{\n                                    return a.creationDate < b.creationDate?1:-1\n                                }\n                            });\n                            break;\n                        }\n                        case \"lastud\":{\n                            subscribers.sort((a,b)=>{\n                                if(sortVars.order === 0){\n                                    return a.lastUpdate > b.lastUpdate?1:-1\n                                }else{\n                                    return a.lastUpdate < b.lastUpdate?1:-1\n                                }\n                            });\n                            break;\n                        }\n                        case \"detail\":{\n                        }\n                    }\n                }\n\n                $NxApi.setAfterLogin(init);\n\n            }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sOttSubscribersDetailCtrl\",\n            ['$scope', '$NxApi', '$mdToast', '$location', '$routeParams','$timeout',\n                function ($scope, $NxApi, $mdToast, $location, $routeParams,$timeout) {\n\n                    $scope.menssage = '';\n                    $scope.loading = false;\n                    $scope.promise = null;\n\n                    $scope.checkPassword = checkPassword;\n\n                    function init() {\n\n                        let subscriberId = $routeParams.id;\n\n                        $NxApi.subscribers.read({\n                            id: subscriberId,\n                            includeUpdateHistory: true\n                        }).then(({subscribers}) => {\n                            $scope.subscriber = subscribers[0];\n\n\n                            $NxApi.products.read({\n                                _id:$scope.subscriber.products\n                            }).then((products)=>{\n                                $scope.subscriber.products = products;\n                            })\n\n\n                        }).catch((e) => {\n                            console.error(e);\n                        })\n\n                    }\n\n                    function checkPassword() {\n                        $scope.menssage = '';\n                        $scope.loading = true;\n                        $NxApi.subscribers.checkSubscriberCredentials({\n                            email: $scope.subscriber.email,\n                            password: $scope.password\n                        }).then((data) => {\n                            $scope.menssage = data;\n                            $scope.backgroundAlert = {\n                                background: '#c9ffc9'\n                            };\n                            $timeout.cancel($scope.promise);\n                            $scope.promise = $timeout(()=>$scope.menssage = '',3000);\n\n                        }).catch((error) => {\n                            $scope.menssage = error;\n                            $timeout.cancel($scope.promise);\n                            $scope.promise = $timeout(()=>$scope.menssage = '',3000);\n                            $scope.backgroundAlert = {\n                                background: 'tomato'\n                            };\n                        }).finally(()=>{\n                            $scope.loading = false;\n                        })\n                    }\n\n                    $NxApi.setAfterLogin(init);\n\n                }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio')\n        .controller(\"sUserProfileCtrl\", ['$scope', '$NxApi', '$mdToast', '$location', '$q', '$mdDialog', function ($scope, $NxApi, $mdToast, $location, $q, $mdDialog) {\n\n            $scope.userData = {};\n            $scope.loading = false;\n\n            $scope.updateUser = updateUser;\n            $scope.uploadImage = uploadImage;\n            $scope.dialog_changePassword = dialog_changePassword;\n\n\n            function init() {\n\n                let user = $NxApi.getUser();\n\n                if (user) {\n                    $scope.userData = {\n                        _id: user._id,\n                        firstName: user.firstName,\n                        lastName: user.lastName,\n                        email: user.email,\n                        account: user.account,\n                        photo: {\n                            url: user && user.photo && user.photo.url ? user.photo.url : \"/res/drawable/ph_user.jpg\",\n                            update: false\n                        }\n                    };\n                }\n\n\n            }\n\n            function checkForm() {\n\n                let {firstName, lastName} = $scope.userData;\n\n                if (firstName !== '' && lastName !== '') {\n                    return true\n                }\n\n                toast(\"The fields cannot be empty\");\n\n                return false\n            }\n\n            function toast(msg) {\n                $mdToast.show(\n                    $mdToast.simple()\n                        .textContent(msg)\n                        .hideDelay(5000))\n                    .then(function () {\n                    }).catch(function () {\n                });\n            }\n\n            function updateUser() {\n\n                if (checkForm()) {\n\n                    let data = {\n                        _id: $scope.userData._id,\n                        firstName: $scope.userData.firstName,\n                        lastName: $scope.userData.lastName,\n                        photo: $scope.userData.photo\n                    };\n\n                    $scope.loading = true;\n\n                    $NxApi.users\n                        .update(data)\n                        .then(() => {\n                            toast('The user was update');\n                            $scope.loading = false;\n\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                            $scope.loading = false;\n                        })\n                }\n\n            }\n\n            function _getImage() {\n                return $q((resolve, reject) => {\n                    let file = document.createElement('input');\n                    let maxSize = 500; //kb\n                    file.type = 'file';\n                    file.click();\n\n                    file.addEventListener('change', function () {\n\n                        if (file.files[0].size / 1000 > maxSize) {\n                            reject(`The image can not be larger than ${maxSize}kb`)\n                        }\n\n                        let reader = new FileReader();\n\n                        reader.onloadend = function () {\n                            resolve(reader.result)\n                        };\n\n                        reader.readAsDataURL(file.files[0]);\n                    })\n                })\n            }\n\n            function uploadImage() {\n                _getImage().then((img) => {\n                    $scope.userData.photo.update = true;\n                    $scope.userData.photo.url = img;\n                }).catch((error) => {\n                    toast(error);\n                })\n            }\n\n            function dialog_changePassword() {\n\n                let title = 'Change Password';\n                let templateUrl = \"/res/layout/dialog_change_password.html\";\n                let userId = $scope.userData._id;\n\n                return $q((resolve, reject) => {\n\n                    let dialog = {\n                        templateUrl: templateUrl,\n                        parent: angular.element(document.body),\n                        escapeToClose: true,\n                        clickOutsideToClose: true,\n                        controller: dialogController\n                    };\n\n                    $mdDialog.show(dialog).then(resolve, reject);\n\n                    function dialogController($scope, $mdDialog) {\n\n                        $scope.title = title;\n                        $scope.userId = userId;\n                        $scope.newPassword = '';\n                        $scope.newPasswordVerify = '';\n                        $scope.loading = false;\n\n                        $scope.cancel = cancel;\n                        $scope.save = save;\n                        $scope.verifyPassword = verifyPassword;\n\n                        function init() {\n\n                        }\n\n                        function cancel() {\n                            $mdDialog.cancel();\n                        }\n\n                        function verifyPassword() {\n\n                            return ($scope.newPassword === '' && $scope.newPasswordVerify === '') || $scope.newPassword !== $scope.newPasswordVerify\n                        }\n\n                        function save() {\n                            $scope.loading = true;\n                            $NxApi.users\n                                .update({\n                                    _id: userId,\n                                    password: $scope.newPassword\n                                })\n                                .then(() => {\n                                    toast('The password was update');\n                                    $scope.loading = false;\n                                    $mdDialog.hide();\n\n                                })\n                                .catch((error) => {\n                                    console.log(error);\n                                    $scope.loading = false;\n                                })\n\n                        }\n\n                        init();\n                    }\n\n                });\n\n            }\n\n\n            $NxApi.setAfterLogin(init);\n\n        }]);\n})();","(function () {\n    angular.module('NxStudio')\n        .directive(\"nxChannel\", function () {\n            return {\n                restrict: 'E',\n                require: '?ngModel',\n                templateUrl: \"/res/layout/directive_channel.html\",\n                link: link,\n                controller: [\"$scope\", controller]\n            }\n        });\n\n\n    function link(scope, element, attributes, ngModel) {\n\n        scope.channel = scope.item;\n\n        let chart_data = [];\n        let char_labels = [];\n\n        for(let i in scope.channel.stats){\n            chart_data.push(scope.channel.stats[i].concurrency);\n            char_labels.push(scope.channel.stats[i].timestamp);\n        }\n\n        let ctx = element[0].getElementsByTagName(\"canvas\")[0];\n        ctx.height = 100;\n        let myBarChart = new Chart(ctx, {\n            \"type\": \"bar\",\n            \"data\": {\n                \"labels\": char_labels,\n                \"datasets\": [\n                    {\n                        \"label\": \"Concurrency\",\n                        \"data\": chart_data,\n                        \"fill\": true,\n                        \"backgroundColor\": '#42516E',\n                        \"borderWidth\": 0\n                    }]\n            },\n            \"options\": {\n                layout: {\n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0\n                    }\n                },\n                legend: {\n                    display: false,\n                    labels: {\n                        fontColor: 'rgb(255, 99, 132)'\n                    }\n                },\n                title: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false,\n                    display: false,\n                },\n                scales: {\n                    xAxes: [{\n                        stacked: true,\n                        display: false,\n                    }],\n                    yAxes: [{\n                        display: false,\n                        stacked: true\n                    }]\n                }\n            }\n        });\n\n    }\n\n    function controller(scope) {\n\n    }\n\n\n})();\n","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    angular.module('NxStudio', ['ngMaterial', 'ngMessages', 'ngRoute'])\n        .config([\"$routeProvider\", \"$locationProvider\", \"$mdThemingProvider\",function ($routeProvider, $locationProvider, $mdThemingProvider){\n\n            $routeProvider\n                .when('/', {\n                    templateUrl: '/res/layout/view_home.html',\n                    controller: 'HomeCtrl'\n                })\n                .when('/login', {\n                    templateUrl: '/res/layout/view_login.html',\n                    controller: 'LoginCtrl'\n                })\n                .when('/s/ott/channel', {\n                    templateUrl: '/res/layout/view_s_ott_channel.html',\n                    controller: 'sOttChannelCtrl'\n                })\n                .when('/s/ott/channel/:id', {\n                    templateUrl: '/res/layout/view_s_ott_channel_detail.html',\n                    controller: 'sOttChannelDetailCtrl'\n                })\n                .when('/s/ott/subscribers', {\n                    templateUrl: '/res/layout/view_s_ott_subscribers.html',\n                    controller: 'sOttSubscribersCtrl'\n                })\n                .when('/s/ott/subscribers/:id', {\n                    templateUrl: '/res/layout/view_s_ott_subscribers_detail.html',\n                    controller: 'sOttSubscribersDetailCtrl'\n                })\n                .when('/s/ott/products', {\n                    templateUrl: '/res/layout/view_s_ott_products.html',\n                    controller: 'sOttProductsCtrl'\n                })\n                .when('/s/ott/products/:id', {\n                    templateUrl: '/res/layout/view_s_ott_products_detail.html',\n                    controller: 'sOttProductsDetailCtrl'\n                })\n                .when('/s/ott/categories', {\n                    templateUrl: '/res/layout/view_s_ott_categories.html',\n                    controller: 'sCategoriesCtrl'\n                })\n                .when('/s/ott/categories/:id', {\n                    templateUrl: '/res/layout/view_s_ott_category_detail.html',\n                    controller: 'sCategoriesDetailCtrl'\n                })\n                .when('/s/ott/epg_monitor', {\n                    templateUrl: '/res/layout/view_s_ott_epg_monitor.html',\n                    controller: 'sOttEPGMonitorCtrl'\n                })\n                .when('/s/ott/config', {\n                    templateUrl: '/res/layout/view_s_ott_config.html',\n                    controller: 'sOttConfigCtrl'\n                })\n                .when('/s/ott/statistics', {\n                    templateUrl: '/res/layout/view_s_ott_statistics.html',\n                    controller: 'sOttStatisticsCtrl'\n                })\n                .when('/s/user-profile', {\n                    templateUrl: '/res/layout/view_s_user_profile.html',\n                    controller: 'sUserProfileCtrl'\n                })\n                .when('/s/account/settings', {\n                    templateUrl: '/res/layout/view_s_account_settings.html',\n                    controller: 'sAccountSettingsCtrl'\n                })\n                .when('/s/account/settings/users', {\n                    templateUrl: '/res/layout/view_s_account_settings_users.html',\n                    controller: 'sAccountSettingsUsersCtrl'\n                })\n                .when('/s/account/settings/users/:user_id', {\n                    templateUrl: '/res/layout/view_s_account_settings_user.html',\n                    controller: 'sAccountSettingsUserCtrl'\n                })\n                .when('/s/infra/private-cloud', {\n                    templateUrl: '/res/layout/view_s_private_cloud.html',\n                    controller: 'sPrivateCloudCtrl'\n                })\n                .when('/s/infra/private-cloud/:role/:ip', {\n                    templateUrl: '/res/layout/view_s_private_cloud_server.html',\n                    controller: 'sPrivateCloudDetailCtrl'\n                })\n                .when('/s/infra/private-cloud/channel/:channelId', {\n                    templateUrl: '/res/layout/view_s_private_cloud_channel.html',\n                    controller: 'sPrivateCloudCtrl'\n                })\n                .when('/s/n/a', {\n                    templateUrl: '/res/layout/view_n_a.html',\n                    controller: 'sNACtrl'\n                });\n\n            $locationProvider.html5Mode(true);\n\n        }])\n        .run([\"$rootScope\", \"$location\", \"$window\",\"$NxNav\", function run($rootScope,$location, $window,$NxNav) {\n            /*// initialise google analytics\n            $window.ga('create', 'UA-126373601-1', 'auto');\n\n            $rootScope.$on('$routeChangeSuccess', function (event) {\n                $window.ga('send', 'pageview', $location.path());\n            });*/\n\n\n            $rootScope.$on('$routeChangeSuccess', function (event) {\n                if($location.path() == \"/login\"){\n                    $NxNav.hide();\n                }else{\n                    $NxNav.show();\n                }\n            });\n\n\n\n        }]);\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n\n    angular.module('NxStudio')\n        .factory('$NxApi', ['$http', '$q', '$NxNav', function ($http, $q, $NxNav) {\n\n            const HOST = \"\";\n            const LOGIN_PATH = \"/api/1.0/user/login\";\n            const LOGIN_AS_USER_PATH = \"/api/1.0/user/login_as_user\";\n            const CHECK_SESSION = \"/api/1.0/user/check-session\";\n            const GET_ACCOUNT = \"/api/1.0/account/get\";\n\n            let session = {\n                user: null,\n                token: null\n            };\n\n            let afterLoginCallback = null;\n\n            function init() {\n                if (localStorage.getItem(\"token\")) {\n                    session.token = localStorage.getItem(\"token\");\n                }\n            }\n\n            function getURI(path) {\n                return HOST + path;\n            }\n\n            function login(email, password) {\n\n                return $q((success, reject) => {\n\n                    if (email === undefined) {\n\n                        if (session.token) {\n                            $http.post(getURI(CHECK_SESSION), {}, {\n                                headers: {\n                                    \"Authorization\": \"Bearer \" + session.token\n                                }\n                            }).then((response) => {\n                                preSuccess(response.data)\n                            }).catch((error) => {\n                                reject(error)\n                            });\n                        } else {\n                            reject(new Error(\"Session data not hosted\"));\n                        }\n                    } else {\n\n                        $http.post(getURI(LOGIN_PATH), {\n                            \"email\": email,\n                            \"password\": password\n                        }).then((response) => {\n                            preSuccess(response.data)\n                        }).catch((error) => {\n                            reject(error)\n                        });\n\n                    }\n\n                    function preSuccess(response) {\n\n                        session.user = response.content.user\n                        session.data = response.content.session\n\n                        localStorage.setItem(\"token\", session.data.token);\n\n                        let account = null;\n\n                        getAccount(response.content.user.account).then((data) => {\n                            account = data;\n                        }).catch((b) => {\n                        }).finally(() => {\n                            $NxNav.loadRootLevel(session.user, account);\n                            success(response.content.user);\n                            if (afterLoginCallback) afterLoginCallback();\n                        })\n\n\n                    }\n\n                })\n\n            }\n\n            function loginAsUser(email, password) {\n\n                return $q((success, reject) => {\n\n                    $http.post(getURI(LOGIN_AS_USER_PATH), {\n                        \"email\": email,\n                        \"password\": password\n                    }, {\n                        headers: {\n                            \"Authorization\": \"Bearer \" + session.token\n                        }\n                    }).then((response) => {\n                        preSuccess(response.data)\n                    }).catch((error) => {\n                        reject(error)\n                    });\n\n                    function preSuccess(response) {\n\n                        session.user = response.content.user\n                        session.data = response.content.session\n\n                        localStorage.setItem(\"token\", session.data.token);\n\n                        let account = null;\n\n                        getAccount(response.content.user.account).then((data) => {\n                            account = data;\n                        }).catch((b) => {\n                        }).finally(() => {\n                            $NxNav.loadRootLevel(session.user, account);\n                            success(response.content.user);\n                            if (afterLoginCallback) afterLoginCallback();\n                        })\n\n                    }\n\n                })\n\n            }\n\n            function setAfterLogin(callback) {\n                if (session.user === null) {\n                    afterLoginCallback = callback;\n                } else {\n                    callback()\n                }\n\n            }\n\n            function getUser() {\n                return session.user;\n            }\n\n            function getAccount(id) {\n                return $q((success, reject) => {\n                    $http.post(getURI(GET_ACCOUNT), {\n                        id: id\n                    }, {\n                        headers: {\n                            \"Authorization\": \"Bearer \" + session.token\n                        }\n                    }).then((response) => {\n                        if (response.data.error !== null) {\n                            reject(response.data.error)\n                        } else {\n                            success(response.data.content)\n                        }\n                    }).catch((error) => {\n                        reject(error)\n                    });\n                })\n            }\n\n            function Account($http, $q) {\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/account/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    update,\n                }\n            }\n\n            function Programmes($http, $q) {\n\n                function channels(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/programmes/channels\", {}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/programmes/read\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    read,\n                    channels\n                }\n            }\n\n            function channelsDelegation($http, $q) {\n\n                function create(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve(data);\n\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function read(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/read\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function restartPush(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/channels/restartPush\", {\n                            id: params.id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                    restartPush\n                }\n            }\n\n            function categoriesDelegation($http, $q) {\n\n                function create(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/category/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve(data);\n\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/category/read\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/category/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/category/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                }\n            }\n\n            function privateCloudDelegation($http, $q) {\n\n                function getConfig() {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/privateCloud/config/get\", {}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function getEntrypointCondition(serverIp) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/entrypoint/get`, {ip: serverIp}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function getTranscoderCondition(serverIp) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/transcoder/get`, {ip: serverIp}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function getPackagerCondition(serverIp) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/packager/get`, {ip: serverIp}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function mediainfo(source, format) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/test/mediainfo`, {media: source, format: format}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                function killPid(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(`/api/1.0/privateCloud/kill/pid`, {\n                            role: params.role,\n                            ip: params.ip,\n                            pid: params.pid\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data);\n                        }).catch(({data}) => {\n                            reject(data.error)\n                        });\n                    });\n                }\n\n                return {\n                    getConfig,\n                    getEntrypointCondition,\n                    getTranscoderCondition,\n                    getPackagerCondition,\n                    mediainfo,\n                    killPid\n                }\n            }\n\n            function Products($http, $q) {\n\n                function create(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/product/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve(data.content);\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/product/read\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve(data.content);\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/product/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/product/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch(({data}) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                }\n            }\n\n            function Users($http, $q) {\n\n                function create(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/user/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve(data.content);\n                            })\n                            .catch((error) => {\n                                reject(data.error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/user/read\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve({\n                                    users: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/user/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/user/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                }\n            }\n\n            function Subscribers($http, $q) {\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/subscriber/read\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({\n                                    subscribers: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function checkSubscriberCredentials(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/playme/check_subscriber_credentials\", params)\n                            .then(({data}) => {\n\n                                if (data.error) {\n                                    reject({\n                                        code: data.error,\n                                        message: data.error_dsc\n                                    });\n                                } else {\n                                    resolve({message: \"Correct Password\"});\n                                }\n\n                            })\n                            .catch(({data}) => {\n                                reject({\n                                    code: data.error,\n                                    message: data.error_dsc\n                                })\n                            });\n                    });\n                }\n\n                return {\n                    read,\n                    checkSubscriberCredentials\n                }\n            }\n\n            function AvProfiles($http, $q) {\n\n                function create(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/avProfile/create\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({\n                                    avProfiles: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/avProfile/read\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({\n                                    avProfiles: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/avProfile/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function remove(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/avProfile/delete\", {\n                            id: params._id\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    create,\n                    read,\n                    update,\n                    delete: remove,\n                }\n            }\n\n            function OttConfigurations($http, $q) {\n\n                function read(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/ottConfigurations/read\", {}, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n\n                                resolve({\n                                    ottConfigurations: data.content\n                                });\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                function update(params) {\n\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/ottConfigurations/update\", {\n                            id: params._id,\n                            data: params\n                        }, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        })\n                            .then(({data}) => {\n                                resolve({});\n                            })\n                            .catch((error) => {\n                                reject(error)\n                            });\n                    });\n                }\n\n                return {\n                    read,\n                    update\n                }\n            }\n\n            function StatisticsDelegation($http, $q) {\n\n                function subscribers(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/statistics/subscribers\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data.content);\n                        }).catch((error) => {\n                            reject(error)\n                        });\n                    });\n                }\n\n                function dailyPlay(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/statistics/dailyPlay\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data.content);\n                        }).catch((error) => {\n                            reject(error)\n                        });\n                    });\n                }\n\n                function report(params) {\n                    return $q((resolve, reject) => {\n                        $http.post(\"/api/1.0/statistics/report\", params, {\n                            headers: {\n                                \"Authorization\": \"Bearer \" + session.token\n                            }\n                        }).then(({data}) => {\n                            resolve(data.content);\n                        }).catch((error) => {\n                            reject(error)\n                        });\n                    });\n                }\n\n                return {\n                    subscribers,\n                    dailyPlay,\n                    report\n                }\n            }\n\n            init();\n\n            return {\n                login: login,\n                loginAsUser: loginAsUser,\n                setAfterLogin: setAfterLogin,\n                getUser: getUser,\n                getAccount: getAccount,\n                subscribers: Subscribers($http, $q),\n                account: Account($http, $q),\n                users: Users($http, $q),\n                programmes: Programmes($http, $q),\n                channels: channelsDelegation($http, $q),\n                categories: categoriesDelegation($http, $q),\n                privateCloud: privateCloudDelegation($http, $q),\n                products: Products($http, $q),\n                avProfiles: AvProfiles($http, $q),\n                ottConfigurations: OttConfigurations($http, $q),\n                statistics: StatisticsDelegation($http, $q)\n            }\n        }]);\n\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    const C = {};\n\n    angular.module('NxStudio')\n        .factory('$NxDialogs', ['$http', '$q', '$mdDialog', '$location', '$NxApi',\n            function ($http, $q, $mdDialog, $location, $NxApi) {\n\n                return {\n                    showAdd: showAddDelegation($http, $q, $mdDialog, $location, $NxApi),\n                    showChannelSelector: showChannelSelectorDelegation($http, $q, $mdDialog, $location, $NxApi)\n                }\n\n            }]);\n\n\n    function showAddDelegation($http, $q, $mdDialog, $location, $NxApi) {\n\n        function show($event) {\n            let addDialog = {\n                templateUrl: \"/res/layout/fragment_dialog_add.html\",\n                controller: controller,\n\n            };\n\n\n            function controller($scope, $mdDialog) {\n\n                $scope.cancel = cancel;\n\n                $scope.add = add;\n\n\n                function cancel() {\n                    $mdDialog.hide()\n                }\n\n                function add(event) {\n                    cancel();\n                    switch (event) {\n                        case \"channel\": {\n                            $location.path(\"/s/ott/channel/new\");\n                            break;\n                        }\n                        case \"category\": {\n                            $location.path(\"/s/ott/categories/new\");\n                            break;\n                        }\n                        default: {\n                            $location.path(\"/s/ott/products/new\")\n                        }\n                    }\n\n                }\n\n\n            }\n\n            $mdDialog.show(addDialog);\n        }\n\n\n        return show;\n\n    }\n    function showChannelSelectorDelegation($http, $q, $mdDialog, $location, $NxApi) {\n\n        function show($event) {\n            return $q((solve, reject) => {\n\n                let addDialog = {\n                    templateUrl: \"/res/layout/fragment_dialog_channel_list.html\",\n                    controller: controller,\n                };\n\n\n                function controller($scope, $mdDialog) {\n\n                    $scope.cancel = cancel;\n                    $scope.select = select;\n                    $scope.loading = true;\n                    $scope.channels = [];\n\n                    function init() {\n\n                        $NxApi.channels.read({}).then((data)=>{\n                            $scope.channels = data;\n                            $scope.loading = false;\n                        })\n\n                    }\n\n                    function cancel() {\n                        $mdDialog.hide()\n                    }\n\n                    function select(channel) {\n                        cancel();\n                        solve(channel)\n                    }\n\n                    init();\n                }\n\n                $mdDialog.show(addDialog);\n\n            });\n        }\n\n\n        return show;\n\n    }\n\n\n})();","/*\n * Copyright (C) 2018 ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n *\n *  NOTICE:  All information contained herein is, and remains the property of\n * ENTERTAINMENT PORTAL OF THE AMERICAS, LLC ; if any.\n *\n *  The intellectual and technical concepts contained herein are proprietary to ENTERTAINMENT PORTAL OF THE AMERICAS, LLC\n *  and its suppliers and may be covered by U.S. and Foreign Patents, patents in\n *  process, and are protected by trade secret or copyright law. Dissemination of this\n *  information or reproduction of this material is strictly forbidden unless prior written\n *  permission is obtained from ENTERTAINMENT PORTAL OF THE AMERICAS, LLC.\n */\n(function () {\n    const C = {};\n\n    angular.module('NxStudio')\n        .factory('$NxNav', ['$http', '$q', function ($http, $q) {\n\n            const permissions = {\n                USER_ADMIN: \"user.admin\",\n                PRIVATE_CLOUD_ADMIN: \"privatecloud.admin\",\n                PRODUCTS_WRITE: \"products.write\",\n                PRODUCTS_READ: \"products.read\",\n                CHANNELS_WRITE: \"channels.write\",\n                CHANNELS_READ: \"channels.read\",\n                STATS_ACCESS: \"stats.access\",\n                SUBSCRIBERS_READ: \"subscribers.read\"\n            };\n\n            let mainBar = {\n                hidden: true\n            };\n\n            let navPanel = {\n                hidden: true\n            };\n\n\n            function hide() {\n                mainBar.hidden = true;\n                navPanel.hidden = true;\n            }\n\n            function show() {\n                mainBar.hidden = false;\n                navPanel.hidden = false;\n            }\n\n            function loadRootLevel(user, account) {\n\n                navPanel.currentAccount = account;\n                navPanel.currentMap = [\n                    {\n                        name: \"Assets (PC)\",\n                        items: [\n                            /*{\n                                iconURL: \"/res/drawable/ic_live_alt.svg\",\n                                name: \"Live Feeds\",\n                                path: \"/s/ott/channel\"\n                            },*/\n                            {\n                                iconURL: \"/res/drawable/ic_playlist.svg\",\n                                name: \"Private Cloud\",\n                                path: \"/s/infra/private-cloud\"\n                            }\n                        ],\n                    },\n                    {\n                        name: \"Publishing\",\n                        items: [\n                            {\n                                iconURL: \"/res/drawable/ic_show.svg\",\n                                name: \"Channels\",\n                                path: \"/s/ott/channel\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_package.svg\",\n                                name: \"Package\",\n                                path: \"/s/ott/products\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_channel.svg\",\n                                name: \"Categories\",\n                                path: \"/s/ott/categories\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_notification.svg\",\n                                name: \"Notifications\",\n                                path: \"/s/ott/notifications\"\n                            }\n                        ]\n                    },\n                    {\n                        name: \"OTT\",\n                        items: [\n                            {\n                                iconURL: \"/res/drawable/ic_subscribers.svg\",\n                                name: \"Subscribers\",\n                                path: \"/s/ott/subscribers\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_epg_monitor.svg\",\n                                name: \"EPG Monitor\",\n                                path: \"/s/ott/epg_monitor\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_ott_project.svg\",\n                                name: \"Config\",\n                                path: \"/s/ott/config\"\n                            },\n                            {\n                                iconURL: \"/res/drawable/ic_statistics.svg\",\n                                name: \"Statistics\",\n                                path: \"/s/ott/statistics\"\n                            }]\n\n                    },\n                    {\n                        name: \"Account\",\n                        items: [\n                            {\n                                iconURL: \"/res/drawable/ic_settings.svg\",\n                                name: \"Settings\",\n                                path: \"/s/account/settings\"\n                            }\n                        ]\n                    }\n\n                ].filter(checkPermissions);\n\n                function checkPermissions(item) {\n\n                    if (item.name === \"Assets (PC)\") {\n                        return user.permissions.includes(permissions.PRIVATE_CLOUD_ADMIN);\n                    }\n\n                    return true;\n                }\n\n            }\n\n            return {\n                hide: hide,\n                show: show,\n                mainBar: mainBar,\n                navPanel: navPanel,\n                loadRootLevel: loadRootLevel\n            }\n\n        }]);\n})();","export default function ContentCtrl($scope, $timeout, Chart, cleanUp, $NxApi, randomColor) {\n\n    $scope.templateUrl = \"/res/layout/view_s_ott_statistics_content.html\";\n\n    $scope.summary = {};\n\n    cleanUp = (_) => {\n        // Clean data on new section fill\n        $scope.summary = null;\n        $scope.filters.dates.onDateChanged = () => {\n        }\n    };\n\n    $scope.filters.dates.onDateChanged = () => {\n        getData().then(drawChart);\n    };\n\n    $timeout(() => {\n        getData().then(drawChart);\n    }, 0);\n\n    function getData() {\n        return new Promise((resolve, reject) => {\n\n            $scope.summary = {\n                ios: 0,\n                android: 0,\n                androidTv: 0,\n                browser: 0\n            };\n\n            $NxApi.statistics.report({\n                from: $scope.filters.dates.start.getTime(),\n                until: $scope.filters.dates.end.getTime()\n            }).then((data) => {\n\n                let channelsTotals = [];\n\n                let chartData = {\n                    date: [],\n                    channels: {}\n                };\n\n                for (let item of data) {\n                    for (let channel of item.perChannel) {\n                        if (!channelsTotals[channel.channelId]) {\n                            channelsTotals[channel.channelId] = 0;\n                        }\n                        channelsTotals[channel.channelId] += channel.playTime;\n                    }\n                }\n\n                let sorted = [];\n\n                for (let id in channelsTotals) {\n                    sorted.push({\n                        id: id,\n                        playTime: channelsTotals[id]\n                    })\n                }\n\n                sorted.sort((a, b) => {\n                    return b.playTime - a.playTime;\n                });\n\n                let topChannels = sorted.slice(0, 20);\n\n                chartData.channels = {};\n\n                for (let channel of topChannels) {\n                    chartData.channels[channel.id] = [];\n                }\n\n                for (let item of data) {\n                    chartData.date.push(item.date);\n\n                    for (let channel of topChannels) {\n                        let match = item.perChannel.find(it => it.channelId === channel.id);\n\n                        let value = 0;\n\n                        if (match) {\n                            value = Math.round(match.concurrency);\n                        }\n\n                        chartData.channels[channel.id].push(value);\n                    }\n\n                }\n\n                addChannelNames({chartData, channelsTotals})\n                    .then(resolve)\n                    .catch(reject)\n            });\n\n        });\n    }\n\n    function addChannelNames(results) {\n        results.channelsIndex = {};\n        return new Promise((resolve, reject) => {\n            $NxApi.channels.read({namesOnly: true}).then((channels) => {\n                for (let channel of channels) {\n                    results.channelsIndex[channel._id] = channel;\n                }\n\n                resolve(results)\n\n            }).catch(reject);\n        });\n    }\n\n    function drawChart(data) {\n\n        let dataSet = [];\n\n        let char_labels = data.chartData.date;\n\n        for (let id in data.chartData.channels) {\n\n            let color = randomColor();\n\n            dataSet.push({\n                label: data.channelsIndex[id].name,\n                data: data.chartData.channels[id],\n                backgroundColor: color,\n                pointRadius: 0,\n                borderWidth: 1,\n                fill: true\n            });\n\n        }\n\n        let ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n        document.getElementById(\"sb-chart\").removeChild(ctx);\n        document.getElementById(\"sb-chart\").appendChild(document.createElement(\"canvas\"));\n        ctx = document.getElementById(\"sb-chart\").getElementsByTagName(\"canvas\")[0];\n\n        ctx.height = 125;\n\n        const config = {\n            type: 'line',\n            data: {\n                labels: char_labels,\n                datasets: dataSet\n            },\n            options: {\n                responsive: true,\n                interaction: {\n                    mode: 'index',\n                    intersect: false,\n                },\n                plugins: {\n                    legend: {\n                        position: \"right\",\n                        display: true,\n                        labels: {\n                            fontColor: 'black'\n                        }\n                    }\n                },\n                title: {\n                    display: false\n                },\n                tooltip: {\n                    mode: 'index'\n                },\n                scales: {\n                    x: {\n                        stacked: true,\n                        type: 'time'\n                    },\n                    y: {\n                        stacked: true\n                    },\n                    xAxes: [{\n                        categoryPercentage: 1.0,\n                        barPercentage: 1.0\n                    }]\n                }\n            }\n        };\n\n        let myBarChart = new Chart(ctx, config);\n        /*\n        let myBarChart = new Chart(ctx, {\n            type: \"bar\",\n            data: {\n                labels: char_labels,\n                datasets: dataSet\n            },\n            options: {\n                layout: {\n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0\n                    }\n                },\n                responsive: true,\n\n                scales: {\n                    xAxes: [{\n                        stacked: true,\n                        display: true,\n                    }],\n                    yAxes: [{\n                        display: true,\n                        stacked: true\n                    }]\n                }\n            }\n        });\n         */\n    }\n\n\n}"],"sourceRoot":""}